
# Detailed Project Repository Content: **ATB_Fresh**

This context presents a comprehensive view of the _/ATB_Fresh_ repository.


## 📂 How to Request Missing Files 📂

If you need to see the contents of files that are not fully available (marked with "✗" or "○" in the repository structure below), please follow these steps:

1. Immediately halt your current response.
2. Start a new response with a markdown code block (```) on a new line.
3. List the root-relative paths of the missing files you need, one per line.
4. Close the markdown code block with another ```.
5. End your response.

Example file request:

```
/ATB_Fresh/config\mail.php
/ATB_Fresh/artisan
```

The human will then provide the requested file contents in the next message.

## Repository Structure

```
Key: ✓ Full content, ○ Outline only, ✗ Excluded

└── ATB_Fresh
    ├── .editorconfig ✗
    ├── .env.example ✗
    ├── .gitattributes ✗
    ├── .gitignore ✗
    ├── .llm-context ✗
    │   ├── config.toml ✗
    │   ├── curr_ctx.toml ✗
    │   └── templates ✗
    │       ├── lc-context.j2 ✗
    │       ├── lc-files.j2 ✗
    │       ├── lc-highlights.j2 ✗
    │       └── lc-prompt.md ✗
    ├── Claude_Answers.md ✗
    ├── FULL_curr_ctx.toml ✗
    ├── MyScratchPad.php ✗
    ├── MyScratchPad.txt ✗
    ├── README.md ✗
    ├── TRIM_curr_ctx.toml ✗
    ├── app ✗
    │   ├── Console ✗
    │   │   ├── Commands ✗
    │   │   │   └── TruncateTable.php ✗
    │   │   └── Kernel.php ✗
    │   ├── Http ✗
    │   │   ├── Controllers ✗
    │   │   │   ├── Auth ✗
    │   │   │   │   ├── AuthenticatedSessionController.php ✗
    │   │   │   │   ├── ConfirmPasswordController.php ✗
    │   │   │   │   ├── ConfirmablePasswordController.php ✗
    │   │   │   │   ├── EmailVerificationNotificationController.php ✗
    │   │   │   │   ├── EmailVerificationPromptController.php ✗
    │   │   │   │   ├── ForgotPasswordController.php ✗
    │   │   │   │   ├── LoginController.php ✗
    │   │   │   │   ├── NewPasswordController.php ✗
    │   │   │   │   ├── PasswordController.php ✗
    │   │   │   │   ├── PasswordResetLinkController.php ✗
    │   │   │   │   ├── RegisterController.php ✗
    │   │   │   │   ├── RegisteredUserController.php ✗
    │   │   │   │   ├── ResetPasswordController.php ✗
    │   │   │   │   ├── VerificationController.php ✗
    │   │   │   │   └── VerifyEmailController.php ✗
    │   │   │   ├── Controller.php ✓
    │   │   │   ├── CourseController.php ✓
    │   │   │   ├── EventController.php ✓
    │   │   │   ├── FacilitatorController.php ✓
    │   │   │   ├── HomeController.php ✓
    │   │   │   ├── PracticeController.php ✗
    │   │   │   ├── ProfileController.php ✓
    │   │   │   ├── RegistrationController.php ✓
    │   │   │   ├── StudentController.php ✓
    │   │   │   └── VenueController.php ✓
    │   │   └── Requests ✓
    │   │       ├── Auth ✓
    │   │       │   └── LoginRequest.php ✓
    │   │       └── ProfileUpdateRequest.php ✓
    │   ├── Livewire ✗
    │   │   ├── FlashMessage.php ✗
    │   │   ├── HelloWorld.php ✗
    │   │   ├── ParticipantsList.php ✓
    │   │   ├── SearchableDropdown.php ✗
    │   │   ├── StudentSearch.php ✓
    │   │   └── VenueSearch.php ✗
    │   ├── Models ✓
    │   │   ├── Course.php ✓
    │   │   ├── Event.php ✓
    │   │   ├── Facilitator.php ✓
    │   │   ├── Job.php ✗
    │   │   ├── Registration.php ✓
    │   │   ├── Student.php ✓
    │   │   ├── User.php ✓
    │   │   └── Venue.php ✓
    │   ├── Providers ✗
    │   │   ├── AppServiceProvider.php ✗
    │   │   └── TelescopeServiceProvider.php ✗
    │   └── View ✓
    │       └── Components ✓
    │           ├── AppLayout.php ✓
    │           └── GuestLayout.php ✓
    ├── artisan ✗
    ├── boltar.txt ✗
    ├── bootstrap ✗
    │   ├── app.php ✗
    │   └── providers.php ✗
    ├── composer.json ✗
    ├── composer.lock ✗
    ├── config ✗
    │   ├── app.php ✗
    │   ├── auth.php ✗
    │   ├── cache.php ✗
    │   ├── database.php ✗
    │   ├── filesystems.php ✗
    │   ├── logging.php ✗
    │   ├── mail.php ✗
    │   ├── queue.php ✗
    │   ├── services.php ✗
    │   ├── session.php ✗
    │   └── telescope.php ✗
    ├── database ✗
    │   ├── .gitignore ✗
    │   ├── factories ✓
    │   │   ├── EventFactory.php ✓
    │   │   ├── JobFactory.php ✓
    │   │   ├── RegistrationFactory.php ✓
    │   │   ├── StudentFactory.php ✓
    │   │   ├── UserFactory.php ✓
    │   │   └── VenueFactory.php ✓
    │   ├── migrations ✓
    │   │   ├── 0001_01_01_000000_create_users_table.php ✓
    │   │   ├── 0001_01_01_000001_create_cache_table.php ✓
    │   │   ├── 0001_01_01_000002_create_jobs_table.php ✓
    │   │   ├── 2024_09_10_081806_job_listings_table.php ✓
    │   │   ├── 2024_09_11_071627_add_isadmin_to_job_listings_table.php ✓
    │   │   ├── 2024_09_17_055413_create_students_table.php ✓
    │   │   ├── 2024_09_17_151829_create_courses_table.php ✓
    │   │   ├── 2024_09_17_152100_create_facilitators_table.php ✓
    │   │   ├── 2024_09_20_080850_create_venues_table.php ✓
    │   │   ├── 2024_09_20_080851_create_events_table.php ✓
    │   │   ├── 2024_09_20_135759_create_registrations_table.php ✓
    │   │   └── 2024_10_06_152102_create_telescope_entries_table.php ✓
    │   └── seeders ✓
    │       ├── DatabaseSeeder.php ✓
    │       ├── RegistrationSeeder.php ✓
    │       └── StudentSeeder.php ✗
    ├── minesweeper.css ✗
    ├── minesweeper.html ✗
    ├── minesweeper.js ✗
    ├── package-lock.json ✗
    ├── package.json ✗
    ├── phpunit.xml ✗
    ├── postcss.config.cjs ✗
    ├── postcss.config.js ✗
    ├── public ✗
    │   ├── .htaccess ✗
    │   ├── build ✗
    │   │   ├── assets ✗
    │   │   │   ├── app-BjCBnTiP.js ✗
    │   │   │   └── app-qYM9faR7.css ✗
    │   │   └── manifest.json ✗
    │   ├── favicon.ico ✗
    │   ├── index.php ✗
    │   ├── js ✗
    │   │   ├── app.js ✗
    │   │   └── bootstrap.js ✗
    │   ├── robots.txt ✗
    │   └── vendor ✗
    │       ├── livewire ✗
    │       │   ├── livewire.esm.js ✗
    │       │   ├── livewire.esm.js.map ✗
    │       │   ├── livewire.js ✗
    │       │   ├── livewire.min.js ✗
    │       │   ├── livewire.min.js.map ✗
    │       │   └── manifest.json ✗
    │       └── telescope ✗
    │           ├── app-dark.css ✗
    │           ├── app.css ✗
    │           ├── app.js ✗
    │           ├── favicon.ico ✗
    │           └── mix-manifest.json ✗
    ├── resources ✗
    │   ├── .gitignore ✗
    │   ├── css ✓
    │   │   └── app.css ✓
    │   ├── js ✗
    │   │   ├── app.js ✗
    │   │   └── bootstrap.js ✗
    │   └── views ✓
    │       ├── auth ✓
    │       │   ├── confirm-password.blade.php ✓
    │       │   ├── forgot-password.blade.php ✓
    │       │   ├── login.blade.php ✓
    │       │   ├── passwords ✓
    │       │   │   ├── confirm.blade.php ✓
    │       │   │   ├── email.blade.php ✓
    │       │   │   └── reset.blade.php ✓
    │       │   ├── register.blade.php ✓
    │       │   ├── reset-password.blade.php ✓
    │       │   ├── verify-email.blade.php ✓
    │       │   └── verify.blade.php ✓
    │       ├── components ✓
    │       │   ├── application-logo.blade.php ✓
    │       │   ├── auth-session-status.blade.php ✓
    │       │   ├── danger-button.blade.php ✓
    │       │   ├── dropdown-link.blade.php ✓
    │       │   ├── dropdown.blade.php ✓
    │       │   ├── input-error.blade.php ✓
    │       │   ├── input-label.blade.php ✓
    │       │   ├── layout.blade.php ✓
    │       │   ├── modal.blade.php ✓
    │       │   ├── nav-link.blade.php ✓
    │       │   ├── primary-button.blade.php ✓
    │       │   ├── responsive-nav-link.blade.php ✓
    │       │   ├── secondary-button.blade.php ✓
    │       │   └── text-input.blade.php ✓
    │       ├── contact.blade.php ✓
    │       ├── courses ✓
    │       │   ├── create.blade.php ✓
    │       │   ├── edit.blade.php ✓
    │       │   ├── index.blade.php ✓
    │       │   └── show.blade.php ✓
    │       ├── dashboard.blade.php ✓
    │       ├── events ✓
    │       │   ├── create.blade.php ✓
    │       │   ├── edit.blade.php ✓
    │       │   ├── index.blade.php ✓
    │       │   └── show.blade.php ✓
    │       ├── facilitators ✓
    │       │   ├── create.blade.php ✓
    │       │   ├── edit.blade.php ✓
    │       │   ├── index.blade.php ✓
    │       │   └── show.blade.php ✓
    │       ├── home.blade.php ✓
    │       ├── index-shell.blade.php ✓
    │       ├── job.blade.php ✗
    │       ├── jobs.blade.php ✗
    │       ├── layouts ✓
    │       │   ├── app.blade.php ✓
    │       │   ├── guest.blade.php ✓
    │       │   └── navigation.blade.php ✓
    │       ├── livewire ✗
    │       │   ├── flash-message.blade.php ✗
    │       │   ├── hello-world.blade.php ✗
    │       │   ├── participants-list.blade.php ✓
    │       │   ├── searchable-dropdown.blade.php ✗
    │       │   ├── student-search.blade.php ✓
    │       │   └── venue-search.blade.php ✗
    │       ├── practice.blade.php ✗
    │       ├── profile ✓
    │       │   ├── edit.blade.php ✓
    │       │   └── partials ✓
    │       │       ├── delete-user-form.blade.php ✓
    │       │       ├── update-password-form.blade.php ✓
    │       │       └── update-profile-information-form.blade.php ✓
    │       ├── registrations ✓
    │       │   ├── create.blade.php ✓
    │       │   ├── index.blade.php ✓
    │       │   └── show.blade.php ✓
    │       ├── students ✓
    │       │   ├── create.blade.php ✓
    │       │   ├── edit.blade.php ✓
    │       │   ├── index.blade.php ✓
    │       │   └── show.blade.php ✓
    │       ├── venues ✓
    │       │   ├── create.blade.php ✓
    │       │   ├── edit.blade.php ✓
    │       │   ├── index.blade.php ✓
    │       │   └── show.blade.php ✓
    │       └── welcome.blade.php ✓
    ├── routes ✓
    │   ├── auth.php ✓
    │   ├── console.php ✓
    │   └── web.php ✓
    ├── storage ✗
    │   └── framework ✗
    │       └── .gitignore ✗
    ├── tailwind.config.js ✗
    ├── test.http ✗
    ├── tests ✗
    │   ├── Feature ✗
    │   │   ├── Auth ✗
    │   │   │   ├── AuthenticationTest.php ✗
    │   │   │   ├── EmailVerificationTest.php ✗
    │   │   │   ├── PasswordConfirmationTest.php ✗
    │   │   │   ├── PasswordResetTest.php ✗
    │   │   │   ├── PasswordUpdateTest.php ✗
    │   │   │   └── RegistrationTest.php ✗
    │   │   ├── ExampleTest.php ✗
    │   │   └── ProfileTest.php ✗
    │   ├── Pest.php ✗
    │   ├── TestCase.php ✗
    │   └── Unit ✗
    │       └── ExampleTest.php ✗
    └── vite.config.js ✗
```




## Complete File Contents

/ATB_Fresh/app\Http\Controllers\Controller.php
॥๛॥
<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;


class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}

॥๛॥
/ATB_Fresh/app\Http\Controllers\CourseController.php
॥๛॥
<?php

namespace App\Http\Controllers;

use App\Models\Course; // Assuming your model is named 'Course'
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class CourseController extends Controller
{
    public function index(Request $request)
    {
        $sort_by = $request->get('sort_by', 'id');  // Default sort column
        $direction = $request->get('direction', 'asc');    // Default sort direction

        $courses = Course::orderBy($sort_by, $direction)->paginate(20); // Paginate for ease

        // Pass courses to the view
        return view('courses.index', compact('courses', 'sort_by', 'direction'));
    }

    public function show($id)
    {
        // Fetch the course along with its related events and facilitators
        $course = Course::with('events.facilitator')->findOrFail($id);

        // Return the course to the view
        return view('courses.show', compact('course'));
    }



    public function create()
    {
        return view('courses.create');
    }

    public function store(Request $request)
    {
        // Validate the incoming request data
        $validator = Validator::make($request->all(), [
            'course_code' => 'required|string|max:255|unique:courses',
            'course_title' => 'required|string|max:255',
            'description' => 'required|string',
            'prerequisites' => 'required|string',
            'duration' => 'required|numeric|min:0',
        ]);

        // If validation fails, redirect back with errors
        if ($validator->fails()) {
            return redirect()
                ->route('courses.create')
                ->withErrors($validator)
                ->withInput();
        }

        // Create a new course with the validated data
        $course = Course::create($validator->validated());

        // Redirect to the course's show page with a success message
        return redirect()
            ->route('courses.show', $course->id)
            ->with('success', 'Course created successfully!');
    }

    public function edit($id)
    {
        $course = Course::findOrFail($id);
        return view('courses.edit', compact('course'));
    }

    public function update(Request $request, $id)
    {
        $course = Course::findOrFail($id);

        $validatedData = $request->validate([
            'course_code' => 'required|string|max:255|unique:courses,course_code,' . $id,
            'course_title' => 'required|string|max:255',
            'description' => 'required|string',
            'prerequisites' => 'required|string',
            'duration' => 'required|numeric|min:1',
        ]);

        $course->update($validatedData);

        return redirect()->route('courses.show', $course->id)->with('success', 'Course updated successfully.');
    }

    public function destroy($id)
    {
        // Find the course by ID
        $course = Course::findOrFail($id);

        // Perform the delete
        $course->delete();

        // Redirect back to the courses list with a success message
        return redirect()->route('courses.index')->with('success', 'Course deleted successfully.');
    }
}

॥๛॥
/ATB_Fresh/app\Http\Controllers\EventController.php
॥๛॥
<?php

namespace App\Http\Controllers;

use App\Models\Event;
use App\Models\Course;
use App\Models\Facilitator;
use App\Models\Venue;
use Illuminate\Http\Request;

class EventController extends Controller
{
    public function index(Request $request)
    {
        // Determine the column to sort by and the direction
        $sort_by = $request->get('sort_by', 'course_title'); // Default to sorting by course title
        $direction = $request->get('direction', 'asc'); // Default to ascending order

        // Map sortable columns to their respective database columns
        $sortableColumns = [
            'course_title' => 'courses.course_title',
            'participant_count' => 'events.participant_count',
            'datefrom' => 'events.datefrom',
            'dateto' => 'events.dateto',
            'facilitator_name' => 'facilitators.first_name',
        ];

        // Default to 'course_title' if the provided column is not in the sortable list
        $sortColumn = $sortableColumns[$sort_by] ?? 'courses.course_title';

        // Fetch events with related data, sorted by the chosen column, and with participant count
        $events = Event::with(['course', 'facilitator'])
            ->withCount('registrations') // Count the number of participants for each event
            ->join('courses', 'events.course_id', '=', 'courses.id')
            ->join('facilitators', 'events.facilitator_id', '=', 'facilitators.id')
            ->orderBy($sortColumn, $direction)
            ->paginate(15);

        // Pass the sorting parameters to the view
        return view('events.index', compact('events', 'sort_by', 'direction'));
    }

    public function show($id)
    {
        $event = Event::with(['course', 'facilitator'])
            ->with(['registrations' => function ($query) {
                $query->select('registrations.*')
                    ->join('students', 'students.id', '=', 'registrations.student_id')
                    ->orderBy('students.last_name')
                    ->orderBy('registrations.id');
            }])
            ->findOrFail($id);

        return view('events.show', compact('event'));
    }

    public function create()
    {
        $courses = Course::all();
        $facilitators = Facilitator::all();
        $venues = Venue::all();

        return view('events.create', compact('courses', 'facilitators', 'venues'));
    }

    // Store the event data
    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'title' => 'required|string|max:255',
            'course_id' => 'required|exists:courses,id',
            'facilitator_id' => 'required|exists:facilitators,id',
            'venue_id' => 'required|exists:venues,id',
            'datefrom' => 'required|date',
            'dateto' => 'required|date|after_or_equal:datefrom',
            'timefrom' => 'required',
            'timeto' => 'required',
            'remarks' => 'nullable|string'
        ]);

        $event = Event::create($validatedData);

        return redirect()->route('events.show', $event->id)
            ->with('success', 'Event created successfully.');
    }

    public function edit(Event $event)
    {
        $courses = Course::all();
        $facilitators = Facilitator::all();
        $venues = Venue::all();
        return view('events.edit', compact('event', 'courses', 'facilitators', 'venues'));
    }

    public function update(Request $request, Event $event)
    {
        $validatedData = $request->validate([
            'title' => 'required|string|max:255',
            'course_id' => 'required|exists:courses,id',
            'facilitator_id' => 'required|exists:facilitators,id',
            'venue_id' => 'required|exists:venues,id',
            'datefrom' => 'required|date',
            'dateto' => 'required|date|after_or_equal:datefrom',
            'timefrom' => 'required',
            'timeto' => 'required',
            'remarks' => 'nullable|string'
        ]);

        $event->update($validatedData);
        return redirect()->route('events.show', $event->id)
            ->with('success', 'Event updated successfully.');
    }
}

॥๛॥
/ATB_Fresh/app\Http\Controllers\FacilitatorController.php
॥๛॥
<?php

namespace App\Http\Controllers;

use App\Models\Facilitator;
use Illuminate\Http\Request;
use Carbon\Carbon;
use Rinvex\Country\CountryLoader; // If you're using the Laravel package for countries

class FacilitatorController extends Controller
{
    // Display a listing of facilitators
    public function index()
    {
        // Get all facilitators
        $facilitators = Facilitator::all();

        // Return view with facilitators
        return view('facilitators.index', compact('facilitators'));
    }

    // Show the details of a specific facilitator
    public function show($id)
    {
        // Find the facilitator by ID and load related events and courses
        $facilitator = Facilitator::with(['events' => function ($query) {
            $query->orderBy('datefrom', 'asc'); // Adjust 'start_date' to your actual date column name
        }])->findOrFail($id);

        // Return view with facilitator data
        return view('facilitators.show', compact('facilitator'));
    }

    public function create()
    {
        // If using the Rinvex package to fetch countries
        $countries = CountryLoader::countries(); // Fetch all countries

        return view('facilitators.create', compact('countries'));
    }

    public function store(Request $request)
    {
        $currentYear = now()->year;
        $minBirthYear = $currentYear - 100;
        $maxBirthYear = $currentYear - 18;

        // Validate the form inputs
        $validatedData = $request->validate([
            'first_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'gender' => 'nullable|string|max:10',
            'email' => 'required|email|unique:facilitators,email',
            'phone_number' => 'nullable|string|max:20',
            'dob' => [
                'nullable',
                'date',
                function ($attribute, $value, $fail) use ($minBirthYear, $maxBirthYear) {
                    if ($value) {
                        $dob = \Carbon\Carbon::parse($value);
                        if ($dob->year < $minBirthYear || $dob->year > $maxBirthYear) {
                            $fail("The date of birth must be between {$minBirthYear} and {$maxBirthYear}.");
                        }
                    }
                },
            ],
            'address' => 'nullable|string|max:255',
            'city' => 'nullable|string|max:255',
            'state' => 'nullable|string|max:255',
            'country' => 'nullable|string|max:255',
            'post_code' => 'nullable|string|max:20',
            'website' => 'nullable|url|max:255'
        ]);


        // Create a new facilitator record
        $facilitator = Facilitator::create($validatedData);

        // Redirect back to a page (e.g., facilitator index) with a success message
        return redirect()->route('facilitators.show', $facilitator->id)->with('success', 'Facilitator created successfully.');
    }

    public function edit(Facilitator $facilitator)
    {
        // If using the Rinvex package to fetch countries
        $countries = CountryLoader::countries(); // Fetch all countries
        return view('facilitators.edit', compact('facilitator', 'countries'));
    }

    public function update(Request $request, Facilitator $facilitator)
    {

        $currentYear = now()->year;
        $minBirthYear = $currentYear - 100;
        $maxBirthYear = $currentYear - 18;

        $validatedData = $request->validate([
            'first_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'gender' => 'nullable|string|max:10',
            'email' => 'required|email|unique:facilitators,email,' . $facilitator->id,
            'phone_number' => 'nullable|string|max:20',
            'dob' => [
                'nullable',
                'date',
                function ($attribute, $value, $fail) use ($minBirthYear, $maxBirthYear) {
                    if ($value) {
                        $dob = \Carbon\Carbon::parse($value);
                        if ($dob->year < $minBirthYear || $dob->year > $maxBirthYear) {
                            $fail("The date of birth must be between {$minBirthYear} and {$maxBirthYear}.");
                        }
                    }
                },
            ],
            'address' => 'nullable|string|max:255',
            'city' => 'nullable|string|max:255',
            'state' => 'nullable|string|max:255',
            'country' => 'nullable|string|max:255',
            'post_code' => 'nullable|string|max:20',
            'website' => 'nullable|url|max:255'
        ]);

        $facilitator->update($validatedData);

        return redirect()->route('facilitators.show', $facilitator)->with('success', 'Facilitator updated successfully.');
    }

    public function destroy($id)
    {
        $facilitator = Facilitator::findOrFail($id);

        // The if will never run because the delete button is disabled in the view
        if ($facilitator->events->isNotEmpty()) {
            return redirect()->route('facilitators.show', $facilitator->id)
                ->with('error', 'Cannot delete facilitator with associated events.');
        }

        $facilitator->delete();

        return redirect()->route('facilitators.index')
            ->with('success', 'Facilitator deleted successfully.');
    }
}

॥๛॥
/ATB_Fresh/app\Http\Controllers\HomeController.php
॥๛॥
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class HomeController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function index()
    {
        return view('home');
    }
}

॥๛॥
/ATB_Fresh/app\Http\Controllers\ProfileController.php
॥๛॥
<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\View\View;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): View
    {
        return view('profile.edit', [
            'user' => $request->user(),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
        $request->user()->fill($request->validated());

        if ($request->user()->isDirty('email')) {
            $request->user()->email_verified_at = null;
        }

        $request->user()->save();

        return Redirect::route('profile.edit')->with('status', 'profile-updated');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validateWithBag('userDeletion', [
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}

॥๛॥
/ATB_Fresh/app\Http\Controllers\RegistrationController.php
॥๛॥
<?php

namespace App\Http\Controllers;

use App\Models\Event;
use App\Models\Student;
use App\Models\Registration;
use Illuminate\Http\Request;

class RegistrationController extends Controller
{
    public function index(Request $request)
    {
        // Determine the column to sort by and the direction
        $sort_by = $request->get('sort_by', 'registrations.id'); // Default to sorting by student name
        $direction = $request->get('direction', 'asc'); // Default to ascending order

        // Map sortable columns to their respective database columns
        $sortableColumns = [
            'student_name' => 'students.first_name',
            'course_name' => 'courses.course_title',
            'datefrom' => 'events.datefrom',
            'dateto' => 'events.dateto',
            'facilitator_name' => 'facilitators.first_name',
            'end_status' => 'registrations.end_status',
        ];

        // Default to 'student_name' if the provided column is not in the sortable list
        $sortColumn = $sortableColumns[$sort_by] ?? 'student_name';

        // Fetch registrations with relationships, sorted by the chosen column
        // $registrations = Registration::with(['event.facilitator', 'event.course'])
        //     ->paginate(10);

        // Fetch registrations with relationships, sorted by the chosen column
        // $registrations = Registration::join('students', 'registrations.student_id', '=', 'students.id')
        //     ->join('events', 'registrations.event_id', '=', 'events.id')
        //     ->join('courses', 'events.course_id', '=', 'courses.id')
        //     ->join('facilitators', 'events.facilitator_id', '=', 'facilitators.id')
        //     ->select([
        //         'registrations.id',
        //         'students.id as student_id',
        //         'students.first_name as student_first_name',
        //         'students.last_name as student_last_name',
        //         'courses.course_title',
        //         'events.datefrom',
        //         'events.dateto',
        //         'facilitators.first_name as facilitator_first_name',
        //         'registrations.end_status'
        //     ])
        //     ->whereNotNull('courses.id') // Ensure that events have valid courses
        //     ->orderBy($sortColumn, $direction)
        //     ->paginate(10);

        $registrations = Registration::with(['student', 'event.course', 'event.facilitator'])
            ->join('students', 'registrations.student_id', '=', 'students.id')
            ->join('events', 'registrations.event_id', '=', 'events.id')
            ->join('courses', 'events.course_id', '=', 'courses.id')
            ->join('facilitators', 'events.facilitator_id', '=', 'facilitators.id')
            ->orderBy('students.first_name', $direction) // Sort by the chosen column
            ->orderBy('events.datefrom', $direction) // Then sort by event start date
            ->select('registrations.*') // Select all registration fields after the join
            ->paginate(30);

        // $registrations = Registration::with(['student', 'event.course', 'event.facilitator'])
        //     ->orderBy($sortColumn, $direction)
        //     ->paginate(50);

        // Pass the sorting parameters to the view
        return view('registrations.index', compact('registrations', 'sort_by', 'direction')); // , 'sort_by', 'direction'
    }


    public function show(Registration $registration)
    {
        // Load related data for a single registration
        $student = $registration->student; // Make sure it correctly loads the associated student
        $registration->load('student'); // Eager load student relationship

        return view('registrations.show', compact('registration', 'student'));
    }

    public function create(Event $event)
    {
        $students = Student::orderBy('first_name')->get();
        return view('registrations.create', compact('event', 'students'));
    }

    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'event_id' => 'required|exists:events,id',
            'student_id' => 'required|exists:students,id',
            'end_status' => 'required|string'
        ]);

        Registration::create($validatedData);

        return redirect()->route('events.show', $request->event_id)
            ->with('success', 'Participant added successfully');
    }
}


    // You can add methods for create, store, update, and delete if needed

॥๛॥
/ATB_Fresh/app\Http\Controllers\StudentController.php
॥๛॥
<?php

namespace App\Http\Controllers;

use App\Models\Student;
use Illuminate\Http\Request;
use Rinvex\Country\CountryLoader; // If you're using the Laravel package for countries
use Illuminate\Support\Facades\Validator;

class StudentController extends Controller
{
    public function index(Request $request)
    {
        $sort_by = $request->get('sort_by', 'first_name');  // Default sort column
        $direction = $request->get('direction', 'asc');    // Default sort direction

        $students = Student::orderBy($sort_by, $direction)->paginate(30); // Paginate for ease
        //dd($students);

        return view('students.index', compact('students', 'sort_by', 'direction'));
    }

    public function show($id)
    {
        // Find the student by ID and load related registrations, events, courses, and facilitators
        $student = Student::with('registrations.event.course', 'registrations.event.facilitator')->findOrFail($id);

        // dd($student->dob);
        return view('students.show', compact('student'));
    }

    // Show the form for creating a new student
    public function create()
    {
        // If using the Rinvex package to fetch countries
        $countries = CountryLoader::countries(); // Fetch all countries

        return view('students.create', compact('countries'));
    }

    // Store a new student in the database
    public function store(Request $request)
    {
        // Validate incoming request
        $validated = $request->validate([
            'first_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'email' => 'required|email|unique:students',
            'phone_number' => 'required|string|max:20|unique:students',
            'address' => 'required|string|max:255',
            'city' => 'required|string|max:100',
            'state' => 'required|string|max:100',
            'country' => 'required|string|max:100',
            'post_code' => 'required|string|max:20',
        ]);

        // Create a new student
        $student = Student::create($validated);

        // Get the sorting and direction from the request (or default to first_name asc)
        $sort_by = $request->get('sort_by', 'first_name');
        $direction = $request->get('direction', 'asc');

        // Count how many students come before the newly created student in the sorted list
        $studentCountBefore = Student::where($sort_by, '<', $student->$sort_by)
            ->orWhere(function ($query) use ($sort_by, $student) {
                $query->where($sort_by, '=', $student->$sort_by)
                    ->where('id', '<', $student->id);  // In case of tie, use 'id' for a stable sort
            })
            ->orderBy($sort_by, $direction)
            ->count();

        // Calculate which page the student is on
        $perPage = 30; // Assuming pagination is set to 20
        $page = ceil(($studentCountBefore + 1) / $perPage);

        // Redirect to the calculated page, with the newly created student's ID in the query string
        return redirect()->route('students.index', ['page' => $page, 'highlight' => $student->id, 'sort_by' => $sort_by, 'direction' => $direction])
            ->with('success', 'Student created successfully.');
    }


    public function edit(Student $student)
    {
        // If using the Rinvex package to fetch countries
        $countries = CountryLoader::countries(); // Fetch all countries

        return view('students.edit', compact('student', 'countries'));
    }

    public function update(Request $request, Student $student)
    {
        $validator = Validator::make($request->all(), [
            'first_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:students,email,' . $student->id,
            'phone_number' => 'required|string|max:20',
            'dob' => 'required|date',
            'address' => 'required|string|max:255',
            'city' => 'required|string|max:255',
            'state' => 'required|string|max:255',
            'country' => 'required|string|max:255',
            'post_code' => 'required|string|max:20',
            'website' => 'nullable|url|max:255',
            'ident' => 'nullable|string|max:255',
            'next_of_kin' => 'nullable|string|max:255',
            'allergies' => 'nullable|string|max:255',
            'special_needs' => 'nullable|string|max:1020',
        ]); // Very important to include all fields here that we want to validate and send to the view and database.

        if ($validator->fails()) {
            return redirect()
                ->route('students.edit', $student->id)
                ->withErrors($validator)
                ->withInput();
        }

        $student->update($validator->validated());

        return redirect()
            ->route('students.show', $student->id)
            ->with('success', 'Student updated successfully!');
    }

    public function destroy($id)
    {
        $student = Student::findOrFail($id);

        // The if will never run because the delete button is disabled in the view
        if ($student->events->isNotEmpty()) {
            return redirect()->route('facilitators.show', $student->id)
                ->with('error', 'Cannot delete facilitator with associated events.');
        }

        $student->delete();

        return redirect()->route('students.index')
            ->with('success', 'Student deleted successfully.');
    }
}

॥๛॥
/ATB_Fresh/app\Http\Controllers\VenueController.php
॥๛॥
<?php

namespace App\Http\Controllers;

use App\Models\Venue;
use Illuminate\Http\Request;
use Rinvex\Country\CountryLoader;
use Illuminate\Support\Facades\Validator;

class VenueController extends Controller
{
    public function index(Request $request)
    {
        $sort_by = $request->get('sort_by', 'venue_name');  // Default sort column
        $direction = $request->get('direction', 'asc');    // Default sort direction

        $venues = Venue::orderBy($sort_by, $direction)->paginate(30);

        return view('venues.index', compact('venues', 'sort_by', 'direction'));
    }

    public function show($id)
    {
        $venue = Venue::with('events.course', 'events.facilitator')->findOrFail($id);
        return view('venues.show', compact('venue'));
    }

    public function create()
    {
        $countries = CountryLoader::countries();
        return view('venues.create', compact('countries'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'venue_name' => 'required|string|max:255',
            'address' => 'required|string|max:255',
            'city' => 'required|string|max:100',
            'state' => 'required|string|max:100',
            'country' => 'required|string|max:100',
            'postcode' => 'required|string|max:20',
            'location_geocode' => 'nullable|string|max:255',
            'remarks' => 'nullable|string|max:1000'
        ]);

        $venue = Venue::create($validated);

        // Get the sorting and direction from the request
        $sort_by = $request->get('sort_by', 'venue_name');
        $direction = $request->get('direction', 'asc');

        // Calculate pagination for the newly created venue
        $venueCountBefore = Venue::where($sort_by, '<', $venue->$sort_by)
            ->orWhere(function ($query) use ($sort_by, $venue) {
                $query->where($sort_by, '=', $venue->$sort_by)
                    ->where('id', '<', $venue->id);
            })
            ->orderBy($sort_by, $direction)
            ->count();

        $perPage = 30;
        $page = ceil(($venueCountBefore + 1) / $perPage);

        return redirect()->route('venues.index', [
            'page' => $page,
            'highlight' => $venue->id,
            'sort_by' => $sort_by,
            'direction' => $direction
        ])->with('success', 'Venue created successfully.');
    }

    public function edit(Venue $venue)
    {
        $countries = CountryLoader::countries();
        return view('venues.edit', compact('venue', 'countries'));
    }

    public function update(Request $request, Venue $venue)
    {
        $validator = Validator::make($request->all(), [
            'venue_name' => 'required|string|max:255',
            'address' => 'required|string|max:255',
            'city' => 'required|string|max:100',
            'state' => 'required|string|max:100',
            'country' => 'required|string|max:100',
            'postcode' => 'required|string|max:20',
            'location_geocode' => 'nullable|string|max:255',
            'remarks' => 'nullable|string|max:1000'
        ]);

        if ($validator->fails()) {
            return redirect()
                ->route('venues.edit', $venue->id)
                ->withErrors($validator)
                ->withInput();
        }

        $venue->update($validator->validated());

        return redirect()
            ->route('venues.show', $venue->id)
            ->with('success', 'Venue updated successfully!');
    }

    public function destroy($id)
    {
        $venue = Venue::findOrFail($id);

        if ($venue->events->isNotEmpty()) {
            return redirect()->route('venues.show', $venue->id)
                ->with('error', 'Cannot delete venue with associated events.');
        }

        $venue->delete();

        return redirect()->route('venues.index')
            ->with('success', 'Venue deleted successfully.');
    }
}

॥๛॥
/ATB_Fresh/app\Http\Requests\ProfileUpdateRequest.php
॥๛॥
<?php

namespace App\Http\Requests;

use App\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'lowercase',
                'email',
                'max:255',
                Rule::unique(User::class)->ignore($this->user()->id),
            ],
        ];
    }
}

॥๛॥
/ATB_Fresh/app\Http\Requests\Auth\LoginRequest.php
॥๛॥
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->string('email')).'|'.$this->ip());
    }
}

॥๛॥
/ATB_Fresh/app\Livewire\StudentSearch.php
॥๛॥
<?php

namespace App\Livewire;

use Livewire\Component;
use App\Models\Student;
use Illuminate\Support\Facades\Log;

class StudentSearch extends Component
{
    public $event;
    public $search = '';
    public $selectedName = '';
    public $selectedId;
    public $showDropdown = false;
    public $message = '';
    public $selectedStudentName = '';

    public function mount($event)
    {
        $this->event = $event;
        // Clear the search when component is mounted
        $this->dispatch('init-search');
    }

    public function getStudentsProperty()
    {
        if (strlen($this->search) >= 2) {
            $this->showDropdown = true;

            $students = Student::where(function ($query) {
                $query->where('first_name', 'like', "%{$this->search}%")
                    ->orWhere('last_name', 'like', "%{$this->search}%");
            })->limit(10)->get();

            // Debug logging
            Log::info('Student search results', [
                'search' => $this->search,
                'count' => $students->count(),
                'students' => $students->toArray()
            ]);

            return $students;
        }

        $this->showDropdown = false;
        return collect();
    }

    public function updatedSearch()
    {
        // Debug logging
        Log::info('Search updated', [
            'search' => $this->search,
            'length' => strlen($this->search)
        ]);

        // Clear any previous messages
        $this->message = '';  // Add this line to clear warning messages

        $this->selectedId = null;
        $this->selectedName = '';
        $this->showDropdown = strlen($this->search) >= 2;
    }

    public function selectStudent($id, $fname, $lname)
    {
        // Debug logging
        Log::info('Student selected', [
            'id' => $id,
            'name' => $fname . ' ' . $lname
        ]);

        $this->selectedId = $id;
        $this->search = $fname . ' ' . $lname;
        $this->selectedName = $fname . ' ' . $lname;
        $this->showDropdown = false;
    }

    public function addParticipant()
    {
        if (!$this->selectedId) {
            $this->message = 'Please select a student first.';
            return;
        }

        // Check if student is already registered
        $existingRegistration = $this->event->registrations()
            ->where('student_id', $this->selectedId)
            ->exists();

        if ($existingRegistration) {
            $this->message = 'This student is already registered for this event.';
            return;
        }

        // Create the registration
        $this->event->registrations()->create([
            'student_id' => $this->selectedId,
            'end_status' => 'registered'
        ]);

        // Reset the form
        $this->search = '';
        $this->selectedId = null;
        $this->selectedName = '';
        $this->dispatch('init-search');  // This will trigger the Alpine.js init

        // Dispatch flash message
        $this->dispatch(
            'flash-message',
            message: 'Student successfully added to the event.',
            type: 'success'
        );

        // Dispatch events
        $this->dispatch('registration-added');
        $this->dispatch('close-modal', 'add-participant');
    }

    public function clearSelection()
    {
        $this->selectedId = null;
        $this->selectedName = '';
        $this->search = '';
        $this->showDropdown = false;
        $this->message = ''; // Add this line to clear any previous messages
    }

    public function render()
    {
        // Debug logging
        Log::info('Rendering search component', [
            'search' => $this->search,
            'showDropdown' => $this->showDropdown,
            'hasStudents' => isset($this->students) ? $this->students->count() : 0
        ]);

        return view('livewire.student-search', [
            'students' => $this->students,
        ]);
    }
}

॥๛॥
/ATB_Fresh/app\Livewire\ParticipantsList.php
॥๛॥
<?php

namespace App\Livewire;

use Livewire\Component;
use App\Models\Event;
use App\Models\Registration;
use Livewire\Attributes\On;

class ParticipantsList extends Component
{
    public $event;
    public $isDeleting = false;

    public function mount(Event $event)
    {
        $this->event = $event;
    }

    #[On('registration-added')]
    public function refreshParticipants()
    {
        $this->event->refresh();
    }

    public function deleteRegistration($registrationId)
    {
        if ($this->isDeleting) {
            return;
        }

        $this->isDeleting = true;

        try {
            $registration = Registration::findOrFail($registrationId);
            $studentName = $registration->student->first_name . ' ' . $registration->student->last_name;

            // Add a small delay to ensure proper handling
            usleep(500000); // 0.5 second delay

            $registration->delete();

            $this->dispatch(
                'flash-message',
                message: "Successfully removed {$studentName} from the event.",
                type: 'success'
            );

            $this->event->refresh();
        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            $this->dispatch(
                'flash-message',
                message: 'Registration not found. It may have been already deleted.',
                type: 'error'
            );
        } catch (\Exception $e) {
            $this->dispatch(
                'flash-message',
                message: 'Error removing participant from the event. Please try again.',
                type: 'error'
            );
        } finally {
            $this->isDeleting = false;
        }
    }

    public function render()
    {
        return view('livewire.participants-list', [
            'registrations' => $this->event->registrations()->with('student')->get()
        ]);
    }
}

॥๛॥
/ATB_Fresh/app\Models\Course.php
॥๛॥
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Course extends Model
{
    use HasFactory;

    protected $guarded = [];

    public function events()
    {
        return $this->hasMany(Event::class, 'course_id');
    }
}

॥๛॥
/ATB_Fresh/app\Models\Event.php
॥๛॥
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Event extends Model
{
    use HasFactory;

    protected $guarded = [];

    // Define relationship with the Course model
    public function course()
    {
        return $this->belongsTo(Course::class);
    }

    public function facilitator()
    {
        return $this->belongsTo(Facilitator::class);
    }

    public function venue()
    {
        return $this->belongsTo(Venue::class);
    }

    public function registrations()
    {
        return $this->hasMany(Registration::class, 'event_id');
    }

    public function students()
    {
        return $this->belongsToMany(Student::class, 'registrations', 'event_id', 'student_id')->withTimestamps();
    }
}

॥๛॥
/ATB_Fresh/app\Models\Facilitator.php
॥๛॥
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Facilitator extends Model
{
    use HasFactory;

    protected $guarded = [];

    protected $casts = [
        'dob' => 'date:Y-m-d',
    ];

    public function events()
    {
        return $this->hasMany(Event::class, 'facilitator_id');
    }
}

॥๛॥
/ATB_Fresh/app\Models\Registration.php
॥๛॥
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Registration extends Model
{
    use HasFactory;

    protected $guarded = [];

    // Define relationship with the Student model
    public function student()
    {
        return $this->belongsTo(Student::class);
    }

    // Define relationship with the Event model
    public function event()
    {
        return $this->belongsTo(Event::class);
    }
}

॥๛॥
/ATB_Fresh/app\Models\Student.php
॥๛॥
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Student extends Model
{
    use HasFactory;

    protected $fillable = [
        'first_name',
        'last_name',
        'email',
        'phone_number',
        'address',
        'city',
        'state',
        'country',
        'post_code',
        'dob',
        'gender',
        'website'
    ];

    public function registrations()
    {
        return $this->hasMany(Registration::class);
    }
}

॥๛॥
/ATB_Fresh/app\Models\User.php
॥๛॥
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }
}

॥๛॥
/ATB_Fresh/app\Models\Venue.php
॥๛॥
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Venue extends Model
{
    use HasFactory;

    protected $fillable = [
        'venue_name',
        'address',
        'city',
        'state',
        'country',
        'postcode',
        'location_geocode',
        'remarks'
    ];

    // Define relationship with the Event model
    public function events()
    {
        return $this->hasMany(Event::class);
    }
}

॥๛॥
/ATB_Fresh/app\View\Components\AppLayout.php
॥๛॥
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class AppLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.app');
    }
}

॥๛॥
/ATB_Fresh/app\View\Components\GuestLayout.php
॥๛॥
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class GuestLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.guest');
    }
}

॥๛॥
/ATB_Fresh/database\factories\EventFactory.php
॥๛॥
<?php

namespace Database\Factories;

use App\Models\Event;
use App\Models\Course;
use App\Models\Facilitator;
use App\Models\Venue;
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Carbon;

class EventFactory extends Factory
{
    protected $model = Event::class;

    public function definition(): array
    {
        // Fetch a random course from the courses table
        $course = Course::inRandomOrder()->first();

        // Generate a random start date (datefrom)
        $datefrom = $this->faker->dateTimeBetween('-2 years', '+2 years');

        // Calculate dateto by adding the course's duration in days to the datefrom value
        // Assuming the course's duration is stored as an integer or a string like "3 days", we extract the number of days
        $durationInDays = (int) filter_var($course->duration, FILTER_SANITIZE_NUMBER_INT);

        // Calculate the dateto value by adding the course duration to the datefrom
        $dateto = Carbon::instance($datefrom)->addDays($durationInDays);

        return [
            'title' => $course->course_title,
            'datefrom' => $datefrom->format('Y-m-d'),
            'dateto' => $dateto->format('Y-m-d'),
            'timefrom' => $this->faker->time(),
            'timeto' => $this->faker->time(),
            'venue_id' => Venue::inRandomOrder()->first()->id,
            'course_id' => $course->id,
            'facilitator_id' => Facilitator::inRandomOrder()->first()->id,
            'remarks' => $this->faker->optional()->sentence(),
            'participant_count' => 0,
        ];
    }
}

॥๛॥
/ATB_Fresh/database\factories\JobFactory.php
॥๛॥
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Job>
 */
class JobFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'title' => $this->faker->jobTitle(),
            'salary' => '$' . number_format($this->faker->numberBetween(18000, 100000), 0),
        ];
    }
}

॥๛॥
/ATB_Fresh/database\factories\RegistrationFactory.php
॥๛॥
<?php

namespace Database\Factories;

use App\Models\Registration;
use App\Models\Student;
use App\Models\Event;
use App\Models\Course;
use Illuminate\Database\Eloquent\Factories\Factory;

class RegistrationFactory extends Factory
{
    protected $model = Registration::class;

    // Define course progression in sequence
    protected $courseSequence = [
        'ATB K-BT',  // Kindergarten/Basic Tools Module
        'ATB 1',     // Introductory Basic Module
        'ATB 2',     // Basic Module 2
        'ATB 3',     // Basic Module 3
        'ATB 4',     // Advanced Module 1
        'ATB 5',     // Advanced Module 2
        'M_Body',    // Embodiment Module
    ];

    public function definition(): array
    {
        // Select a random student
        $student = Student::inRandomOrder()->first();
        // echo "Student ID: " . $student->id . "\n\n";
        // echo "Student name: " . $student->first_name . " " . $student->last_name . "\n\n";

        // Get the list of course codes for courses the student has already completed
        $completedCourseCodes = Registration::where('student_id', $student->id)
            ->where('end_status', 'completed') // Filter only completed registrations
            ->with('event.course') // Eager load the course details via the event relationship
            ->get() // Get all completed registrations
            ->map(function ($registration) {
                return $registration->event->course->course_code; // Extract course_code from related course
            })
            // ->pluck('event.course.course_code') // Pluck the course_code from the related course model
            ->flatten() // Flatten the collection to a single level
            ->toArray(); // Convert the collection to an array
        // echo "\$completedCourseCodes: " . json_encode($completedCourseCodes, JSON_PRETTY_PRINT) . "\n\n";

        // Check if the student has completed all courses except the one with ID 0
        $allCoursesCompleted = count(array_diff($this->courseSequence, $completedCourseCodes)) === 1
            && in_array('ATB K-BT', $this->courseSequence); // both sides of the && must be true. If the student has completed all courses except for one (1) course (ATB K-BT), then all courses are completed.
        // echo "\$allCoursesCompleted: is ";
        // echo $allCoursesCompleted ? 'true' : 'false'; // This is a boolean value
        // echo "\n\n";

        // Get the full details of the student's last completed registration
        $lastCompletedRegistration = Registration::where('student_id', $student->id)
            ->join('events', 'registrations.event_id', '=', 'events.id') // Join the events table
            ->where('end_status', 'completed') // Note this is a second where clause
            ->orderByDesc('events.datefrom') // Get the latest completed event which will appear on top since the order is reversed (latest first in the list)
            ->get() // Get the collection of completed registrations
            ->first(); // Note that this returns a single model instance or (row), not a collection of rows.

        // print_r($lastCompletedRegistration);
        // var_dump($lastCompletedRegistration);
        // dd($lastCompletedRegistration);

        // echo "\$lastCompletedRegistration: " . $lastCompletedRegistration . " which is of type " . gettype($lastCompletedRegistration) . "\n\n";

        // Debug to check the result
        if (!$lastCompletedRegistration) {
            // echo "No completed registrations found.\n\n";
        } else {
            // Check if event and course are properly loaded
            if ($lastCompletedRegistration->event && $lastCompletedRegistration->event->course) {
                $lastCompletedCourseCode = $lastCompletedRegistration->event->course->course_code;
                // echo "\$lastCompletedCourseCode: " . $lastCompletedCourseCode . "\n\n";
            } else {
                // echo "Event or course information missing.\n\n";
            }
        }


        // Determine the next course in the progression
        $lastCompletedCourseCode = $lastCompletedRegistration
            ? $lastCompletedRegistration->event->course->course_code
            : null; // If no course completed, this will result in starting with the first course
        // echo "\$lastCompletedCourseCode: " . $lastCompletedCourseCode . " is of type " . gettype($lastCompletedCourseCode) . "\n\n";

        $currentCourseIndex = $lastCompletedCourseCode
            ? array_search($lastCompletedCourseCode, $this->courseSequence)
            : 0; // If no course completed, start with the first course
        // echo "\$currentCourseIndex: " . $currentCourseIndex . "\n\n"; // This is an array number, NOT a course code!


        // Determine the next course in sequence or allow repeating if all are completed
        FIXME: // There is a bug in here somewhere.The logic is flawed.
        // It only shows up when all courses are completed. The code should allow repeating any course except the first one (ATB K-BT).
        // The generated error was: SQLSTATE[HY000]: General error: 1364 Field 'student_id' doesn't have a default value (Connection: mysql, SQL: insert into `registrations` (`updated_at`, `created_at`) values (2024-10-03 14:26:42, 2024-10-03 14:26:42))
        if ($allCoursesCompleted) {
            // If all courses are completed, allow repeating any previous course except the one with ID 0
            $repeatableCourses = array_diff($completedCourseCodes, ['ATB K-BT']);
            $nextCourseCode = $this->faker->randomElement($repeatableCourses);
        } else {
            // Find the next course in sequence that hasn't been completed yet
            $nextCourseCode = null;
            for ($i = $currentCourseIndex + 1; $i < count($this->courseSequence); $i++) {
                if (!in_array($this->courseSequence[$i], $completedCourseCodes)) {
                    $nextCourseCode = $this->courseSequence[$i];
                    break;
                }
            }
        }
        // echo "\$nextCourseCode: " . $nextCourseCode . "\n\n";


        // If no further courses are available, return empty array (no registration)
        if (!$nextCourseCode) {
            return [];
        }

        // Find the next event with this course in the Event table
        $nextCourse = Course::where('course_code', $nextCourseCode)->first();
        // echo "\$nextCourse: " . $nextCourse . "\n\n";
        // Seems a bit early in the code for this check, but let's keep it here for now.

        if (!$nextCourse) {
            // echo "No course found for code: $nextCourseCode\n\n";
            return [];
        }

        TODO: // Get the student's last attempt for the same course
        // Problem with allCoursesCompleted = true ... starts here
        $lastAttemptOnSameCourse = null; // Starting point for the variable value
        $lastAttemptOnSameCourse = Registration::where('student_id', $student->id)
            ->join('events', 'registrations.event_id', '=', 'events.id') // Join the events table
            ->where('events.course_id', $nextCourse->id)  // Filter by the course ID
            ->orderByDesc('events.datefrom')  // Order by the datefrom of the event
            ->select('registrations.*')  // Ensure we're selecting from the registrations table
            ->first();
        // echo "\$lastAttemptOnSameCourse: " . $lastAttemptOnSameCourse . "\n\n";

        // Get the baseline date as the most recent 'dateto' from all the student's registrations
        $baselineDate = Registration::where('student_id', $student->id)
            ->join('events', 'registrations.event_id', '=', 'events.id') // Join with events table
            ->orderByDesc('events.dateto') // Sort by 'dateto' in descending order
            ->value('events.dateto'); // Get the most recent 'dateto'

        // echo "\$baselineDate: " . ($baselineDate ?? 'No baseline date available') . "\n\n";

        // If no baseline date is found (i.e., student has no registrations), default to null or another strategy.
        if (!$baselineDate) {
            // echo "No previous registrations found. Defaulting to no baseline date.\n";
        }


        // Step 4: Find the next available event for this course after the baseline date
        $registeredEventIds = null; // Starting point for the variable value
        $registeredEventIds = Registration::where('student_id', $student->id)
            ->limit(5)
            ->pluck('event_id')
            ->toArray();
        // echo "\$registeredEventIds: " . json_encode($registeredEventIds, JSON_PRETTY_PRINT) . "\n\n";

        // Find the next available event for the course
        $events = Event::where('course_id', $nextCourse->id)
            ->whereNotIn('id', $registeredEventIds) // Exclude already registered events
            ->when($baselineDate, function ($query) use ($baselineDate) {
                return $query->where('datefrom', '>', $baselineDate);
            })
            ->orderBy('datefrom', 'asc') // Sort by soonest event date
            ->select('id', 'title', 'datefrom', 'dateto') // Select only specific fields
            ->limit(5) // Limit the number of events to 5
            ->get();


        // echo "\$events: " . json_encode($events, JSON_PRETTY_PRINT) . "\n\n";

        // echo "Available Events for the same course:\n";
        foreach ($events as $event) {
            //    echo "Event ID: {$event->id}, Date: {$event->datefrom}, Participants: {$event->participant_count}\n";
        }

        // Pick the first available event
        $nextEvent = $events->first(function ($event) {
            return $event->participant_count < 30; // Ensure it has available space and assigns to the $nextEvent variable, the first event that meets the condition
        });
        // echo "\$nextEvent: " . json_encode($nextEvent, JSON_PRETTY_PRINT) . "\n\n";

        // If no event is available, return no registration
        if (!$nextEvent) {
            // echo "No available events found for the course '{$nextCourse->course_title}' after {$baselineDate}\n\n";
            return []; // Exit early if no event is available
        }

        // Increment participant count for the selected event
        $nextEvent->increment('participant_count');
        // echo "Next event selected: Event ID {$nextEvent->id}, {$nextEvent->title} starting on {$nextEvent->datefrom}\n";
        // echo "=========================================================================\n\n";

        // Return the registration details for the next event
        return [
            'student_id' => $student->id,
            'event_id' => $nextEvent->id, // Ensure this is valid
            'end_status' => $this->faker->randomElement(['completed', 'incomplete']),
            'comments' => $this->faker->optional()->sentence(),
        ];
    }
}

॥๛॥
/ATB_Fresh/database\factories\StudentFactory.php
॥๛॥
<?php

namespace Database\Factories;

use App\Models\Student;
use Illuminate\Database\Eloquent\Factories\Factory;

class StudentFactory extends Factory
{
    protected $model = Student::class;

    public function definition(): array
    {
        $gender = $this->faker->randomElement(['M', 'F']);

        return [
            'first_name' => $this->faker->firstName($gender === 'F' ? 'female' : 'male'),
            'last_name' => $this->faker->lastName(),
            'email' => $this->faker->unique()->safeEmail(),
            'phone_number' => $this->faker->phoneNumber(),
            'address' => $this->faker->streetAddress(),
            'city' => $this->faker->city(),
            'state' => $this->faker->state(),
            'country' => $this->faker->country(),
            'post_code' => $this->faker->postcode(),
            'dob' => $this->faker->date(),
            'gender' => $gender,
            'website' => $this->faker->url()
        ];
    }
}

॥๛॥
/ATB_Fresh/database\factories\UserFactory.php
॥๛॥
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'first_name' => fake()->firstName(),
            'last_name' => fake()->lastName(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn(array $attributes) => [
            'email_verified_at' => null,
        ]);
    }

    // Just like the preceding function,
    // the following function is a state method that returns a new
    // instance of the factory with the specified attributes.
    // It effectively overrides the default attributes of the factory.
    // Usage: App\Models\User::factory()->generic()->create();

    public function generic(): static
    {
        return $this->state(fn(array $attributes) => [
            'first_name' => 'Joan',
            'last_name' => 'Marti',
        ]);
    }
}

॥๛॥
/ATB_Fresh/database\factories\VenueFactory.php
॥๛॥
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use App\Models\Venue;

class VenueFactory extends Factory
{
    protected $model = Venue::class;

    public function definition(): array
    {
        return [
            'venue_name' => $this->faker->company(),
            'address' => $this->faker->address(),
            'city' => $this->faker->city(),
            'state' => $this->faker->state(),
            'country' => $this->faker->country(),
            'postcode' => $this->faker->postcode(),
            'location_geocode' => $this->faker->latitude() . ', ' . $this->faker->longitude(),
            'remarks' => $this->faker->optional()->sentence(),
        ];
    }
}

॥๛॥
/ATB_Fresh/database\migrations\0001_01_01_000000_create_users_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};

॥๛॥
/ATB_Fresh/database\migrations\0001_01_01_000001_create_cache_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};

॥๛॥
/ATB_Fresh/database\migrations\0001_01_01_000002_create_jobs_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};

॥๛॥
/ATB_Fresh/database\migrations\2024_09_10_081806_job_listings_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('job_listings', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->string('salary');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('job_listings');
    }
};

॥๛॥
/ATB_Fresh/database\migrations\2024_09_11_071627_add_isadmin_to_job_listings_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

use function Laravel\Prompts\table;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('job_listings', function (Blueprint $table) {
            $table->boolean('is_admin')->default(false);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('job_listings', function (Blueprint $table) {
            table()->dropColumn('is_admin');
        });
    }
};

॥๛॥
/ATB_Fresh/database\migrations\2024_09_17_055413_create_students_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('first_name');
            $table->string('last_name');
            $table->string('gender')->nullable();
            $table->string('email')->unique();
            $table->string('phone_number')->unique();
            $table->string('address');
            $table->string('city');
            $table->string('state');
            $table->string('country');
            $table->string('post_code');
            $table->string('website')->default('N/A')->nullable();
            $table->date('dob')->nullable();
            $table->string('ident')->nullable();
            $table->string('next_of_kin')->nullable();
            $table->string('allergies')->default('N/A')->nullable();
            $table->text('special_needs')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('students');
    }
};

॥๛॥
/ATB_Fresh/database\migrations\2024_09_17_151829_create_courses_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('courses', function (Blueprint $table) {
            $table->id();
            $table->string('course_code');
            $table->string('course_title');
            $table->text('description');
            $table->string('prerequisites');
            $table->float('duration');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('courses');
    }
};

॥๛॥
/ATB_Fresh/database\migrations\2024_09_17_152100_create_facilitators_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('facilitators', function (Blueprint $table) {
            $table->id();
            $table->string('first_name');
            $table->string('last_name');
            $table->string('gender')->nullable();
            $table->string('email')->unique();
            $table->string('phone_number')->nullable();
            $table->string('address');
            $table->string('city');
            $table->string('state')->nullable();
            $table->string('country');
            $table->string('post_code')->nullable();
            $table->string('website')->nullable();
            $table->date('dob')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('intructors');
    }
};

॥๛॥
/ATB_Fresh/database\migrations\2024_09_20_080850_create_venues_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('venues', function (Blueprint $table) {
            $table->id();
            $table->string('venue_name');
            $table->string('address');
            $table->string('city');
            $table->string('state');
            $table->string('country');
            $table->string('postcode');
            $table->string('location_geocode')->nullable();
            $table->text('remarks')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('venues');
    }
};

॥๛॥
/ATB_Fresh/database\migrations\2024_09_20_080851_create_events_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('events', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->date('datefrom');
            $table->date('dateto')->nullable();
            $table->time('timefrom');
            $table->time('timeto');
            $table->unsignedBigInteger('venue_id');
            $table->unsignedBigInteger('course_id');
            $table->unsignedBigInteger('facilitator_id');
            $table->text('remarks')->nullable();
            $table->integer('participant_count')->default(0);
            $table->timestamps();

            // Add foreign key constraints
            $table->foreign('venue_id')->references('id')->on('venues')->onDelete('cascade');
            $table->foreign('course_id')->references('id')->on('courses')->onDelete('cascade');
            $table->foreign('facilitator_id')->references('id')->on('facilitators')->onDelete('cascade');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('events');
    }
};

॥๛॥
/ATB_Fresh/database\migrations\2024_09_20_135759_create_registrations_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use \App\Models\Student;
use \App\Models\Event;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('registrations', function (Blueprint $table) {
            $table->id();
            $table->foreignIdFor(Student::class)->constrained('students')->cascadeOnDelete(); // Ensure cascade delete if the student is deleted
            $table->foreignIdFor(Event::class)->constrained('events')->cascadeOnDelete(); // Ensure cascade delete for events
            $table->string('end_status');
            $table->text('comments')->nullable(); // Make comments optional
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('registrations');
    }
};

॥๛॥
/ATB_Fresh/database\migrations\2024_10_06_152102_create_telescope_entries_table.php
॥๛॥
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Get the migration connection name.
     */
    public function getConnection(): ?string
    {
        return config('telescope.storage.database.connection');
    }

    /**
     * Run the migrations.
     */
    public function up(): void
    {
        $schema = Schema::connection($this->getConnection());

        $schema->create('telescope_entries', function (Blueprint $table) {
            $table->bigIncrements('sequence');
            $table->uuid('uuid');
            $table->uuid('batch_id');
            $table->string('family_hash')->nullable();
            $table->boolean('should_display_on_index')->default(true);
            $table->string('type', 20);
            $table->longText('content');
            $table->dateTime('created_at')->nullable();

            $table->unique('uuid');
            $table->index('batch_id');
            $table->index('family_hash');
            $table->index('created_at');
            $table->index(['type', 'should_display_on_index']);
        });

        $schema->create('telescope_entries_tags', function (Blueprint $table) {
            $table->uuid('entry_uuid');
            $table->string('tag');

            $table->primary(['entry_uuid', 'tag']);
            $table->index('tag');

            $table->foreign('entry_uuid')
                ->references('uuid')
                ->on('telescope_entries')
                ->onDelete('cascade');
        });

        $schema->create('telescope_monitoring', function (Blueprint $table) {
            $table->string('tag')->primary();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        $schema = Schema::connection($this->getConnection());

        $schema->dropIfExists('telescope_entries_tags');
        $schema->dropIfExists('telescope_entries');
        $schema->dropIfExists('telescope_monitoring');
    }
};

॥๛॥
/ATB_Fresh/database\seeders\DatabaseSeeder.php
॥๛॥
<?php

namespace Database\Seeders;

use App\Models\Student;
use App\Models\Event;
use App\Models\Venue;
use App\Models\Registration;
use Illuminate\Support\Facades\Hash;

// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Faker\Factory as Faker;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    protected static ?string $password;

    public function run(): void
    {
        $faker = Faker::create();

        // Creating fewer students will give you a better chance of having students who have completed all courses
        Student::factory(100)->create();

        DB::table('users')->insert([
            [
                'name' => 'Joan',
                'email' => 'joan@auroville.org.in',
                'email_verified_at' => now(),
                'password' => Hash::make('password'),
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'name' => 'Louisr57',
                'email' => 'louisr57@gmail.com',
                'email_verified_at' => now(),
                'password' => Hash::make('password'),
                'create_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        DB::table('courses')->insert([
            [
                'course_code' => 'ATB K-BT',
                'course_title' => 'Kindergarten/Basic Tools Module',
                'description' => 'Kindergarten/Basic Tools Module',
                'prerequisites' => 'none',
                'duration' => '1.0'
            ],
            [
                'course_code' => 'ATB 1',
                'course_title' => 'Introductory Basic Module',
                'description' => 'Introductory Basic Module',
                'prerequisites' => 'none',
                'duration' => '2.0'
            ],
            [
                'course_code' => 'ATB 2',
                'course_title' => 'Basic Module 2',
                'description' => 'Basic Module 2',
                'prerequisites' => 'ATB 1',
                'duration' => '3.0'
            ],
            [
                'course_code' => 'ATB 3',
                'course_title' => 'Basic Module 3',
                'description' => 'Basic Module 3',
                'prerequisites' => 'ATB 2',
                'duration' => '3.0'
            ],
            [
                'course_code' => 'ATB 4',
                'course_title' => 'Advanced Module 1',
                'description' => 'Advanced Module',
                'prerequisites' => 'All ATB Basic Modules',
                'duration' => '4.0'
            ],
            [
                'course_code' => 'ATB 5',
                'course_title' => 'Advanced Module 2',
                'description' => 'Advanced Module',
                'prerequisites' => 'All ATB Basic Modules',
                'duration' => '5.0'
            ],
            [
                'course_code' => 'M_Body',
                'course_title' => 'Embodiment Module',
                'description' => 'Embodiment Module',
                'prerequisites' => 'none',
                'duration' => '2.0'
            ],
        ]);

        DB::table('facilitators')->insert([
            [
                'first_name' => 'Aloka',
                'last_name' => 'Marti',
                'gender' => 'F',
                'email' => 'alokamariona@gmail.com',
                'phone_number' => '+91 9843985445',
                'address' => 'Auroville',
                'city' => 'Auroville',
                'state' => 'Tamil Nadu',
                'country' => 'India/Catalunya',
                'post_code' => '605101',
                'website' => $faker->url(),
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Joan',
                'last_name' => 'Sala',
                'gender' => 'M',
                'email' => 'joan@auroville.org.in',
                'phone_number' => '+91 8098144726',
                'address' => 'Auroville',
                'city' => 'Auroville',
                'state' => 'Tamil Nadu',
                'country' => 'India/Catalunya',
                'post_code' => '605101',
                'website' => 'https://www.joansala.com',
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Rosa',
                'last_name' => 'Aleman',
                'gender' => 'F',
                'email' => 'nuatbconrosa@gmail.com',
                'phone_number' => '+91 7094299924',
                'address' => 'Auroville',
                'city' => 'Auroville',
                'state' => 'Tamil Nadu',
                'country' => 'India/South America',
                'post_code' => '605101',
                'website' => 'https://www.rosaaleman.com',
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Karin',
                'last_name' => 'Van des Plass',
                'gender' => 'F',
                'email' => 'awarenessinfo@gmail.com',
                'phone_number' => '+31 637446469',
                'address' => 'Soest',
                'city' => 'Soest',
                'state' => null,
                'country' => 'Holland',
                'post_code' => null,
                'website' => $faker->url(),
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Amir',
                'last_name' => 'Azulay',
                'gender' => 'M',
                'email' => 'connect@atbwithamir.com',
                'phone_number' => '+91 9751257709',
                'address' => 'Auroville',
                'city' => 'Auroville',
                'state' => 'Tamil Nadu',
                'country' => 'India/Israël',
                'post_code' => '605101',
                'website' => $faker->url(),
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Nicolas',
                'last_name' => 'Maraval',
                'gender' => 'M',
                'email' => 'nicovoul@hotmail.com',
                'phone_number' => '+33 603594410',
                'address' => 'Castres',
                'city' => 'Castres',
                'state' => null,
                'country' => 'France',
                'post_code' => '605101',
                'website' => $faker->url(),
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Sébastien',
                'last_name' => 'Rabbé',
                'gender' => 'M',
                'email' => 'sebrb@hotmail.com',
                'phone_number' => '+33 687776566',
                'address' => 'Paris',
                'city' => 'Paris',
                'state' => null,
                'country' => 'France',
                'post_code' => null,
                'website' => $faker->url(),
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Valérie',
                'last_name' => 'Laville',
                'gender' => 'F',
                'email' => 'laville.valerie@free.fr',
                'phone_number' => '+33 675847558',
                'address' => 'Brest',
                'city' => 'Brest',
                'state' => null,
                'country' => 'France',
                'post_code' => null,
                'website' => $faker->url(),
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Celeste',
                'last_name' => 'Ledesma',
                'gender' => 'F',
                'email' => 'edesmariaceleste@gmail.com',
                'phone_number' => '+54 2804589125',
                'address' => 'Puerto Madryn',
                'city' => 'Puerto Madryn',
                'state' => null,
                'country' => 'Argentina',
                'post_code' => null,
                'website' => $faker->url(),
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Ignasi',
                'last_name' => 'Salvatella',
                'gender' => 'M',
                'email' => 'ig.educacio22@gmail.com',
                'phone_number' => '+34 665804833',
                'address' => 'Barcelona',
                'city' => 'Barcelona',
                'state' => null,
                'country' => 'Catalunya',
                'post_code' => null,
                'website' => $faker->url(),
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Lison',
                'last_name' => 'Moegle',
                'gender' => 'F',
                'email' => 'moeglelison@gmail.com',
                'phone_number' => null,
                'address' => 'Grace',
                'city' => 'Auroville',
                'state' => null,
                'country' => 'France/India',
                'post_code' => null,
                'website' => $faker->url(),
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ],
            [
                'first_name' => 'Suryamayi',
                'last_name' => 'Ashwini',
                'gender' => 'F',
                'email' => 'suryamayi@auroville.org.in',
                'phone_number' => '+91 9489457158',
                'address' => 'Auroville',
                'city' => 'Auroville',
                'state' => 'Tamil Nadu',
                'country' => 'India',
                'post_code' => null,
                'website' => $faker->url(),
                'dob' => $faker->dateTimeBetween($startDate = '-70 years', $endDate = '-20 years', $timezone = null),
            ]
        ]);

        // Create venues first since events depend on them
        Venue::factory(100)->create();

        // Then create events that reference the venues
        Event::factory(300)->create();

        // Fetch all events
        $events = Event::all();

        // Create 300 registrations one by one
        for ($i = 0; $i < 300; $i++) {
            Registration::factory()->create();
        }

        // Update participant count for each Event (event)
        foreach ($events as $event) {
            // Count how many registrations this event has
            $participantCount = Registration::where('event_id', $event->id)->count();

            // Update the participant_count column in the events table
            $event->update(['participant_count' => $participantCount]);
        }
    }
}

॥๛॥
/ATB_Fresh/database\seeders\RegistrationSeeder.php
॥๛॥
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Registration;

class RegistrationSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Seed the RegistrationFactory

        // Create registrations one by one
        for ($i = 0; $i < 200; $i++) {
            Registration::factory()->create();

            // echo "Iteration: $i \n";
            // echo "Press the spacebar (or any key) to continue...\n";

            // // Wait for any keyboard input (requires hitting enter afterward in most terminals)
            // fgets(STDIN);

            // Proceed with the next iteration
        }

        // Registration::factory()->count(1)->create(); // Adjust the count as needed
    }
}

॥๛॥
/ATB_Fresh/resources\css\app.css
॥๛॥
@tailwind base;
@tailwind components;
@tailwind utilities;

॥๛॥
/ATB_Fresh/resources\views\contact.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Contact Page
        </x-slot>

        <h1>Hello from the Contact Page.</h1>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\dashboard.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        ATB Users Dashboard
    </x-slot:heading>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100">
                    {{ __("You're logged in!") }}
                </div>
            </div>
        </div>
    </div>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\home.blade.php
॥๛॥
<x-layout>

    <x-slot:heading>
        Home
    </x-slot:heading>

    {{-- <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Home') }}
        </h2>
    </x-slot> --}}

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <h2 class="text-3xl text-blue-900 mb-6">What is ATB?</h2>

                    <div class="space-y-4 text-gray-700">
                        <p>
                            Awareness Through the Body (ATB), started in July 1992 as a program to improve the posture
                            of school children, but quickly evolved into a practice to help children develop their
                            capacity for attention, concentration and relaxation, while enhancing their ability for self
                            awareness and self-regulation.
                        </p>

                        <p>
                            ATB is a practice that assists children and adults to come to better know the complexity of
                            their own being and find ways to manage this complexity more effectively, so as to become a
                            more self-directed beings organized around their psychological center, the inmost, truer
                            part of their being.
                        </p>

                        <p>
                            The activities are creative and often fun. They develop gradually and encourage
                            concentration, focus, relaxation and a sense of accomplishment. The practice works by first
                            bringing the individuals in contact with their own body felt sensations and into a state of
                            receptivity in which they can better "listen" to the many and varied inputs they are
                            continuously receiving from both their inner and outer world. The exercises then allow them
                            to gradually discover the complex amalgam of which they are made and to find the tools to
                            manage this complexity effectively. A key point in ATB is to discover and cultivate the
                            witness attitude: A positioning of our attention that watches and witnesses all the
                            movements in our being, without judging, analyzing or getting caught by any of them.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <livewire:hello-world />
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\index-shell.blade.php
॥๛॥
@props(['direction' => 'asc'])

<x-layout>
    <x-slot:heading>
        ATB Students
    </x-slot:heading>

    @section('content')
    <div class="container">
        <h1>Students List</h1>

        <table class="min-w-full table-auto border-collapse border border-gray-300">
            <thead>
                <tr class="hover:bg-gray-900">
                    <th class="border border-gray-300 px-4 py-2"><a
                            href="{{ route('students.index', ['sort_by' => 'first_name', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">First
                            Name</a></th>
                    <th class="border border-gray-300 px-4 py-2"><a
                            href="{{ route('students.index', ['sort_by' => 'last_name', 'direction'=> $direction =='asc' ? 'desc' : 'asc']) }}">Last
                            Name</a></th>
                    <th class="border border-gray-300 px-4 py-2"><a
                            href="{{ route('students.index', ['sort_by' => 'email', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">Email</a>
                    </th>
                    <th class="border border-gray-300 px-4 py-2"><a
                            href="{{ route('students.index', ['sort_by' => 'phone_number', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">Phone
                            Number</a></th>
                    <th class="border border-gray-300 px-4 py-2"><a
                            href="{{ route('students.index', ['sort_by' => 'city', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">City</a>
                    </th>
                </tr>
            </thead>

            <tbody>
                @foreach($students as $student)
                <tr onclick="window.location='{{ route('students.show', $student->id) }}'" style="cursor:pointer;">
                    <td>{{ $student->first_name }}</td>
                    <td>{{ $student->last_name }}</td>
                    <td>{{ $student->email }}</td>
                    <td>{{ $student->phone_number }}</td>
                    <td>{{ $student->city }}</td>
                </tr>
                @endforeach
            </tbody>
        </table>

        {{ $students->appends(request()->input())->links() }}
        <!--Pagination with query strings-->
    </div>

    @endsection
    </x-Components /layout>

॥๛॥
/ATB_Fresh/resources\views\welcome.blade.php
॥๛॥
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Laravel</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,600&display=swap" rel="stylesheet" />

        <!-- Styles -->
        <style>
            /* ! tailwindcss v3.4.1 | MIT License | https://tailwindcss.com */*,::after,::before{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}::after,::before{--tw-content:''}:host,html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:Figtree, ui-sans-serif, system-ui, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;font-feature-settings:normal;font-variation-settings:normal;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}*, ::before, ::after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.absolute{position:absolute}.relative{position:relative}.-left-20{left:-5rem}.top-0{top:0px}.-bottom-16{bottom:-4rem}.-left-16{left:-4rem}.-mx-3{margin-left:-0.75rem;margin-right:-0.75rem}.mt-4{margin-top:1rem}.mt-6{margin-top:1.5rem}.flex{display:flex}.grid{display:grid}.hidden{display:none}.aspect-video{aspect-ratio:16 / 9}.size-12{width:3rem;height:3rem}.size-5{width:1.25rem;height:1.25rem}.size-6{width:1.5rem;height:1.5rem}.h-12{height:3rem}.h-40{height:10rem}.h-full{height:100%}.min-h-screen{min-height:100vh}.w-full{width:100%}.w-\[calc\(100\%\+8rem\)\]{width:calc(100% + 8rem)}.w-auto{width:auto}.max-w-\[877px\]{max-width:877px}.max-w-2xl{max-width:42rem}.flex-1{flex:1 1 0%}.shrink-0{flex-shrink:0}.grid-cols-2{grid-template-columns:repeat(2, minmax(0, 1fr))}.flex-col{flex-direction:column}.items-start{align-items:flex-start}.items-center{align-items:center}.items-stretch{align-items:stretch}.justify-end{justify-content:flex-end}.justify-center{justify-content:center}.gap-2{gap:0.5rem}.gap-4{gap:1rem}.gap-6{gap:1.5rem}.self-center{align-self:center}.overflow-hidden{overflow:hidden}.rounded-\[10px\]{border-radius:10px}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:0.5rem}.rounded-md{border-radius:0.375rem}.rounded-sm{border-radius:0.125rem}.bg-\[\#FF2D20\]\/10{background-color:rgb(255 45 32 / 0.1)}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255 / var(--tw-bg-opacity))}.bg-gradient-to-b{background-image:linear-gradient(to bottom, var(--tw-gradient-stops))}.from-transparent{--tw-gradient-from:transparent var(--tw-gradient-from-position);--tw-gradient-to:rgb(0 0 0 / 0) var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from), var(--tw-gradient-to)}.via-white{--tw-gradient-to:rgb(255 255 255 / 0)  var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from), #fff var(--tw-gradient-via-position), var(--tw-gradient-to)}.to-white{--tw-gradient-to:#fff var(--tw-gradient-to-position)}.stroke-\[\#FF2D20\]{stroke:#FF2D20}.object-cover{object-fit:cover}.object-top{object-position:top}.p-6{padding:1.5rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.py-10{padding-top:2.5rem;padding-bottom:2.5rem}.px-3{padding-left:0.75rem;padding-right:0.75rem}.py-16{padding-top:4rem;padding-bottom:4rem}.py-2{padding-top:0.5rem;padding-bottom:0.5rem}.pt-3{padding-top:0.75rem}.text-center{text-align:center}.font-sans{font-family:Figtree, ui-sans-serif, system-ui, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji}.text-sm{font-size:0.875rem;line-height:1.25rem}.text-sm\/relaxed{font-size:0.875rem;line-height:1.625}.text-xl{font-size:1.25rem;line-height:1.75rem}.font-semibold{font-weight:600}.text-black{--tw-text-opacity:1;color:rgb(0 0 0 / var(--tw-text-opacity))}.text-white{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.underline{-webkit-text-decoration-line:underline;text-decoration-line:underline}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.shadow-\[0px_14px_34px_0px_rgba\(0\2c 0\2c 0\2c 0\.08\)\]{--tw-shadow:0px 14px 34px 0px rgba(0,0,0,0.08);--tw-shadow-colored:0px 14px 34px 0px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.ring-1{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.ring-transparent{--tw-ring-color:transparent}.ring-white\/\[0\.05\]{--tw-ring-color:rgb(255 255 255 / 0.05)}.drop-shadow-\[0px_4px_34px_rgba\(0\2c 0\2c 0\2c 0\.06\)\]{--tw-drop-shadow:drop-shadow(0px 4px 34px rgba(0,0,0,0.06));filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.drop-shadow-\[0px_4px_34px_rgba\(0\2c 0\2c 0\2c 0\.25\)\]{--tw-drop-shadow:drop-shadow(0px 4px 34px rgba(0,0,0,0.25));filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.transition{transition-property:color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.duration-300{transition-duration:300ms}.selection\:bg-\[\#FF2D20\] *::selection{--tw-bg-opacity:1;background-color:rgb(255 45 32 / var(--tw-bg-opacity))}.selection\:text-white *::selection{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.selection\:bg-\[\#FF2D20\]::selection{--tw-bg-opacity:1;background-color:rgb(255 45 32 / var(--tw-bg-opacity))}.selection\:text-white::selection{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.hover\:text-black:hover{--tw-text-opacity:1;color:rgb(0 0 0 / var(--tw-text-opacity))}.hover\:text-black\/70:hover{color:rgb(0 0 0 / 0.7)}.hover\:ring-black\/20:hover{--tw-ring-color:rgb(0 0 0 / 0.2)}.focus\:outline-none:focus{outline:2px solid transparent;outline-offset:2px}.focus-visible\:ring-1:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.focus-visible\:ring-\[\#FF2D20\]:focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgb(255 45 32 / var(--tw-ring-opacity))}@media (min-width: 640px){.sm\:size-16{width:4rem;height:4rem}.sm\:size-6{width:1.5rem;height:1.5rem}.sm\:pt-5{padding-top:1.25rem}}@media (min-width: 768px){.md\:row-span-3{grid-row:span 3 / span 3}}@media (min-width: 1024px){.lg\:col-start-2{grid-column-start:2}.lg\:h-16{height:4rem}.lg\:max-w-7xl{max-width:80rem}.lg\:grid-cols-3{grid-template-columns:repeat(3, minmax(0, 1fr))}.lg\:grid-cols-2{grid-template-columns:repeat(2, minmax(0, 1fr))}.lg\:flex-col{flex-direction:column}.lg\:items-end{align-items:flex-end}.lg\:justify-center{justify-content:center}.lg\:gap-8{gap:2rem}.lg\:p-10{padding:2.5rem}.lg\:pb-10{padding-bottom:2.5rem}.lg\:pt-0{padding-top:0px}.lg\:text-\[\#FF2D20\]{--tw-text-opacity:1;color:rgb(255 45 32 / var(--tw-text-opacity))}}@media (prefers-color-scheme: dark){.dark\:block{display:block}.dark\:hidden{display:none}.dark\:bg-black{--tw-bg-opacity:1;background-color:rgb(0 0 0 / var(--tw-bg-opacity))}.dark\:bg-zinc-900{--tw-bg-opacity:1;background-color:rgb(24 24 27 / var(--tw-bg-opacity))}.dark\:via-zinc-900{--tw-gradient-to:rgb(24 24 27 / 0)  var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from), #18181b var(--tw-gradient-via-position), var(--tw-gradient-to)}.dark\:to-zinc-900{--tw-gradient-to:#18181b var(--tw-gradient-to-position)}.dark\:text-white\/50{color:rgb(255 255 255 / 0.5)}.dark\:text-white{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.dark\:text-white\/70{color:rgb(255 255 255 / 0.7)}.dark\:ring-zinc-800{--tw-ring-opacity:1;--tw-ring-color:rgb(39 39 42 / var(--tw-ring-opacity))}.dark\:hover\:text-white:hover{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.dark\:hover\:text-white\/70:hover{color:rgb(255 255 255 / 0.7)}.dark\:hover\:text-white\/80:hover{color:rgb(255 255 255 / 0.8)}.dark\:hover\:ring-zinc-700:hover{--tw-ring-opacity:1;--tw-ring-color:rgb(63 63 70 / var(--tw-ring-opacity))}.dark\:focus-visible\:ring-\[\#FF2D20\]:focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgb(255 45 32 / var(--tw-ring-opacity))}.dark\:focus-visible\:ring-white:focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgb(255 255 255 / var(--tw-ring-opacity))}}
        </style>
    </head>
    <body class="font-sans antialiased dark:bg-black dark:text-white/50">
        <div class="bg-gray-50 text-black/50 dark:bg-black dark:text-white/50">
            <img id="background" class="absolute -left-20 top-0 max-w-[877px]" src="https://laravel.com/assets/img/welcome/background.svg" />
            <div class="relative min-h-screen flex flex-col items-center justify-center selection:bg-[#FF2D20] selection:text-white">
                <div class="relative w-full max-w-2xl px-6 lg:max-w-7xl">
                    <header class="grid grid-cols-2 items-center gap-2 py-10 lg:grid-cols-3">
                        <div class="flex lg:justify-center lg:col-start-2">
                            <svg class="h-12 w-auto text-white lg:h-16 lg:text-[#FF2D20]" viewBox="0 0 62 65" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M61.8548 14.6253C61.8778 14.7102 61.8895 14.7978 61.8897 14.8858V28.5615C61.8898 28.737 61.8434 28.9095 61.7554 29.0614C61.6675 29.2132 61.5409 29.3392 61.3887 29.4265L49.9104 36.0351V49.1337C49.9104 49.4902 49.7209 49.8192 49.4118 49.9987L25.4519 63.7916C25.3971 63.8227 25.3372 63.8427 25.2774 63.8639C25.255 63.8714 25.2338 63.8851 25.2101 63.8913C25.0426 63.9354 24.8666 63.9354 24.6991 63.8913C24.6716 63.8838 24.6467 63.8689 24.6205 63.8589C24.5657 63.8389 24.5084 63.8215 24.456 63.7916L0.501061 49.9987C0.348882 49.9113 0.222437 49.7853 0.134469 49.6334C0.0465019 49.4816 0.000120578 49.3092 0 49.1337L0 8.10652C0 8.01678 0.0124642 7.92953 0.0348998 7.84477C0.0423783 7.8161 0.0598282 7.78993 0.0697995 7.76126C0.0884958 7.70891 0.105946 7.65531 0.133367 7.6067C0.152063 7.5743 0.179485 7.54812 0.20192 7.51821C0.230588 7.47832 0.256763 7.43719 0.290416 7.40229C0.319084 7.37362 0.356476 7.35243 0.388883 7.32751C0.425029 7.29759 0.457436 7.26518 0.498568 7.2415L12.4779 0.345059C12.6296 0.257786 12.8015 0.211853 12.9765 0.211853C13.1515 0.211853 13.3234 0.257786 13.475 0.345059L25.4531 7.2415H25.4556C25.4955 7.26643 25.5292 7.29759 25.5653 7.32626C25.5977 7.35119 25.6339 7.37362 25.6625 7.40104C25.6974 7.43719 25.7224 7.47832 25.7523 7.51821C25.7735 7.54812 25.8021 7.5743 25.8196 7.6067C25.8483 7.65656 25.8645 7.70891 25.8844 7.76126C25.8944 7.78993 25.9118 7.8161 25.9193 7.84602C25.9423 7.93096 25.954 8.01853 25.9542 8.10652V33.7317L35.9355 27.9844V14.8846C35.9355 14.7973 35.948 14.7088 35.9704 14.6253C35.9792 14.5954 35.9954 14.5692 36.0053 14.5405C36.0253 14.4882 36.0427 14.4346 36.0702 14.386C36.0888 14.3536 36.1163 14.3274 36.1375 14.2975C36.1674 14.2576 36.1923 14.2165 36.2272 14.1816C36.2559 14.1529 36.292 14.1317 36.3244 14.1068C36.3618 14.0769 36.3942 14.0445 36.4341 14.0208L48.4147 7.12434C48.5663 7.03694 48.7383 6.99094 48.9133 6.99094C49.0883 6.99094 49.2602 7.03694 49.4118 7.12434L61.3899 14.0208C61.4323 14.0457 61.4647 14.0769 61.5021 14.1055C61.5333 14.1305 61.5694 14.1529 61.5981 14.1803C61.633 14.2165 61.6579 14.2576 61.6878 14.2975C61.7103 14.3274 61.7377 14.3536 61.7551 14.386C61.7838 14.4346 61.8 14.4882 61.8199 14.5405C61.8312 14.5692 61.8474 14.5954 61.8548 14.6253ZM59.893 27.9844V16.6121L55.7013 19.0252L49.9104 22.3593V33.7317L59.8942 27.9844H59.893ZM47.9149 48.5566V37.1768L42.2187 40.4299L25.953 49.7133V61.2003L47.9149 48.5566ZM1.99677 9.83281V48.5566L23.9562 61.199V49.7145L12.4841 43.2219L12.4804 43.2194L12.4754 43.2169C12.4368 43.1945 12.4044 43.1621 12.3682 43.1347C12.3371 43.1097 12.3009 43.0898 12.2735 43.0624L12.271 43.0586C12.2386 43.0275 12.2162 42.9888 12.1887 42.9539C12.1638 42.9203 12.1339 42.8916 12.114 42.8567L12.1127 42.853C12.0903 42.8156 12.0766 42.7707 12.0604 42.7283C12.0442 42.6909 12.023 42.656 12.013 42.6161C12.0005 42.5688 11.998 42.5177 11.9931 42.4691C11.9881 42.4317 11.9781 42.3943 11.9781 42.3569V15.5801L6.18848 12.2446L1.99677 9.83281ZM12.9777 2.36177L2.99764 8.10652L12.9752 13.8513L22.9541 8.10527L12.9752 2.36177H12.9777ZM18.1678 38.2138L23.9574 34.8809V9.83281L19.7657 12.2459L13.9749 15.5801V40.6281L18.1678 38.2138ZM48.9133 9.14105L38.9344 14.8858L48.9133 20.6305L58.8909 14.8846L48.9133 9.14105ZM47.9149 22.3593L42.124 19.0252L37.9323 16.6121V27.9844L43.7219 31.3174L47.9149 33.7317V22.3593ZM24.9533 47.987L39.59 39.631L46.9065 35.4555L36.9352 29.7145L25.4544 36.3242L14.9907 42.3482L24.9533 47.987Z" fill="currentColor"/></svg>
                        </div>
                        @if (Route::has('login'))
                            <nav class="-mx-3 flex flex-1 justify-end">
                                @auth
                                    <a
                                        href="{{ url('/dashboard') }}"
                                        class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
                                    >
                                        Dashboard
                                    </a>
                                @else
                                    <a
                                        href="{{ route('login') }}"
                                        class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
                                    >
                                        Log in
                                    </a>

                                    @if (Route::has('register'))
                                        <a
                                            href="{{ route('register') }}"
                                            class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
                                        >
                                            Register
                                        </a>
                                    @endif
                                @endauth
                            </nav>
                        @endif
                    </header>

                    <main class="mt-6">
                        <div class="grid gap-6 lg:grid-cols-2 lg:gap-8">
                            <a
                                href="https://laravel.com/docs"
                                id="docs-card"
                                class="flex flex-col items-start gap-6 overflow-hidden rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] md:row-span-3 lg:p-10 lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]"
                            >
                                <div id="screenshot-container" class="relative flex w-full flex-1 items-stretch">
                                    <img
                                        src="https://laravel.com/assets/img/welcome/docs-light.svg"
                                        alt="Laravel documentation screenshot"
                                        class="aspect-video h-full w-full flex-1 rounded-[10px] object-top object-cover drop-shadow-[0px_4px_34px_rgba(0,0,0,0.06)] dark:hidden"
                                        onerror="
                                            document.getElementById('screenshot-container').classList.add('!hidden');
                                            document.getElementById('docs-card').classList.add('!row-span-1');
                                            document.getElementById('docs-card-content').classList.add('!flex-row');
                                            document.getElementById('background').classList.add('!hidden');
                                        "
                                    />
                                    <img
                                        src="https://laravel.com/assets/img/welcome/docs-dark.svg"
                                        alt="Laravel documentation screenshot"
                                        class="hidden aspect-video h-full w-full flex-1 rounded-[10px] object-top object-cover drop-shadow-[0px_4px_34px_rgba(0,0,0,0.25)] dark:block"
                                    />
                                    <div
                                        class="absolute -bottom-16 -left-16 h-40 w-[calc(100%+8rem)] bg-gradient-to-b from-transparent via-white to-white dark:via-zinc-900 dark:to-zinc-900"
                                    ></div>
                                </div>

                                <div class="relative flex items-center gap-6 lg:items-end">
                                    <div id="docs-card-content" class="flex items-start gap-6 lg:flex-col">
                                        <div class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16">
                                            <svg class="size-5 sm:size-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path fill="#FF2D20" d="M23 4a1 1 0 0 0-1.447-.894L12.224 7.77a.5.5 0 0 1-.448 0L2.447 3.106A1 1 0 0 0 1 4v13.382a1.99 1.99 0 0 0 1.105 1.79l9.448 4.728c.14.065.293.1.447.1.154-.005.306-.04.447-.105l9.453-4.724a1.99 1.99 0 0 0 1.1-1.789V4ZM3 6.023a.25.25 0 0 1 .362-.223l7.5 3.75a.251.251 0 0 1 .138.223v11.2a.25.25 0 0 1-.362.224l-7.5-3.75a.25.25 0 0 1-.138-.22V6.023Zm18 11.2a.25.25 0 0 1-.138.224l-7.5 3.75a.249.249 0 0 1-.329-.099.249.249 0 0 1-.033-.12V9.772a.251.251 0 0 1 .138-.224l7.5-3.75a.25.25 0 0 1 .362.224v11.2Z"/><path fill="#FF2D20" d="m3.55 1.893 8 4.048a1.008 1.008 0 0 0 .9 0l8-4.048a1 1 0 0 0-.9-1.785l-7.322 3.706a.506.506 0 0 1-.452 0L4.454.108a1 1 0 0 0-.9 1.785H3.55Z"/></svg>
                                        </div>

                                        <div class="pt-3 sm:pt-5 lg:pt-0">
                                            <h2 class="text-xl font-semibold text-black dark:text-white">Documentation</h2>

                                            <p class="mt-4 text-sm/relaxed">
                                                Laravel has wonderful documentation covering every aspect of the framework. Whether you are a newcomer or have prior experience with Laravel, we recommend reading our documentation from beginning to end.
                                            </p>
                                        </div>
                                    </div>

                                    <svg class="size-6 shrink-0 stroke-[#FF2D20]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"/></svg>
                                </div>
                            </a>

                            <a
                                href="https://laracasts.com"
                                class="flex items-start gap-4 rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]"
                            >
                                <div class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16">
                                    <svg class="size-5 sm:size-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><g fill="#FF2D20"><path d="M24 8.25a.5.5 0 0 0-.5-.5H.5a.5.5 0 0 0-.5.5v12a2.5 2.5 0 0 0 2.5 2.5h19a2.5 2.5 0 0 0 2.5-2.5v-12Zm-7.765 5.868a1.221 1.221 0 0 1 0 2.264l-6.626 2.776A1.153 1.153 0 0 1 8 18.123v-5.746a1.151 1.151 0 0 1 1.609-1.035l6.626 2.776ZM19.564 1.677a.25.25 0 0 0-.177-.427H15.6a.106.106 0 0 0-.072.03l-4.54 4.543a.25.25 0 0 0 .177.427h3.783c.027 0 .054-.01.073-.03l4.543-4.543ZM22.071 1.318a.047.047 0 0 0-.045.013l-4.492 4.492a.249.249 0 0 0 .038.385.25.25 0 0 0 .14.042h5.784a.5.5 0 0 0 .5-.5v-2a2.5 2.5 0 0 0-1.925-2.432ZM13.014 1.677a.25.25 0 0 0-.178-.427H9.101a.106.106 0 0 0-.073.03l-4.54 4.543a.25.25 0 0 0 .177.427H8.4a.106.106 0 0 0 .073-.03l4.54-4.543ZM6.513 1.677a.25.25 0 0 0-.177-.427H2.5A2.5 2.5 0 0 0 0 3.75v2a.5.5 0 0 0 .5.5h1.4a.106.106 0 0 0 .073-.03l4.54-4.543Z"/></g></svg>
                                </div>

                                <div class="pt-3 sm:pt-5">
                                    <h2 class="text-xl font-semibold text-black dark:text-white">Laracasts</h2>

                                    <p class="mt-4 text-sm/relaxed">
                                        Laracasts offers thousands of video tutorials on Laravel, PHP, and JavaScript development. Check them out, see for yourself, and massively level up your development skills in the process.
                                    </p>
                                </div>

                                <svg class="size-6 shrink-0 self-center stroke-[#FF2D20]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"/></svg>
                            </a>

                            <a
                                href="https://laravel-news.com"
                                class="flex items-start gap-4 rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]"
                            >
                                <div class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16">
                                    <svg class="size-5 sm:size-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><g fill="#FF2D20"><path d="M8.75 4.5H5.5c-.69 0-1.25.56-1.25 1.25v4.75c0 .69.56 1.25 1.25 1.25h3.25c.69 0 1.25-.56 1.25-1.25V5.75c0-.69-.56-1.25-1.25-1.25Z"/><path d="M24 10a3 3 0 0 0-3-3h-2V2.5a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2V20a3.5 3.5 0 0 0 3.5 3.5h17A3.5 3.5 0 0 0 24 20V10ZM3.5 21.5A1.5 1.5 0 0 1 2 20V3a.5.5 0 0 1 .5-.5h14a.5.5 0 0 1 .5.5v17c0 .295.037.588.11.874a.5.5 0 0 1-.484.625L3.5 21.5ZM22 20a1.5 1.5 0 1 1-3 0V9.5a.5.5 0 0 1 .5-.5H21a1 1 0 0 1 1 1v10Z"/><path d="M12.751 6.047h2a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-2A.75.75 0 0 1 12 7.3v-.5a.75.75 0 0 1 .751-.753ZM12.751 10.047h2a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-2A.75.75 0 0 1 12 11.3v-.5a.75.75 0 0 1 .751-.753ZM4.751 14.047h10a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-10A.75.75 0 0 1 4 15.3v-.5a.75.75 0 0 1 .751-.753ZM4.75 18.047h7.5a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-7.5A.75.75 0 0 1 4 19.3v-.5a.75.75 0 0 1 .75-.753Z"/></g></svg>
                                </div>

                                <div class="pt-3 sm:pt-5">
                                    <h2 class="text-xl font-semibold text-black dark:text-white">Laravel News</h2>

                                    <p class="mt-4 text-sm/relaxed">
                                        Laravel News is a community driven portal and newsletter aggregating all of the latest and most important news in the Laravel ecosystem, including new package releases and tutorials.
                                    </p>
                                </div>

                                <svg class="size-6 shrink-0 self-center stroke-[#FF2D20]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"/></svg>
                            </a>

                            <div class="flex items-start gap-4 rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]">
                                <div class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16">
                                    <svg class="size-5 sm:size-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <g fill="#FF2D20">
                                            <path
                                                d="M16.597 12.635a.247.247 0 0 0-.08-.237 2.234 2.234 0 0 1-.769-1.68c.001-.195.03-.39.084-.578a.25.25 0 0 0-.09-.267 8.8 8.8 0 0 0-4.826-1.66.25.25 0 0 0-.268.181 2.5 2.5 0 0 1-2.4 1.824.045.045 0 0 0-.045.037 12.255 12.255 0 0 0-.093 3.86.251.251 0 0 0 .208.214c2.22.366 4.367 1.08 6.362 2.118a.252.252 0 0 0 .32-.079 10.09 10.09 0 0 0 1.597-3.733ZM13.616 17.968a.25.25 0 0 0-.063-.407A19.697 19.697 0 0 0 8.91 15.98a.25.25 0 0 0-.287.325c.151.455.334.898.548 1.328.437.827.981 1.594 1.619 2.28a.249.249 0 0 0 .32.044 29.13 29.13 0 0 0 2.506-1.99ZM6.303 14.105a.25.25 0 0 0 .265-.274 13.048 13.048 0 0 1 .205-4.045.062.062 0 0 0-.022-.07 2.5 2.5 0 0 1-.777-.982.25.25 0 0 0-.271-.149 11 11 0 0 0-5.6 2.815.255.255 0 0 0-.075.163c-.008.135-.02.27-.02.406.002.8.084 1.598.246 2.381a.25.25 0 0 0 .303.193 19.924 19.924 0 0 1 5.746-.438ZM9.228 20.914a.25.25 0 0 0 .1-.393 11.53 11.53 0 0 1-1.5-2.22 12.238 12.238 0 0 1-.91-2.465.248.248 0 0 0-.22-.187 18.876 18.876 0 0 0-5.69.33.249.249 0 0 0-.179.336c.838 2.142 2.272 4 4.132 5.353a.254.254 0 0 0 .15.048c1.41-.01 2.807-.282 4.117-.802ZM18.93 12.957l-.005-.008a.25.25 0 0 0-.268-.082 2.21 2.21 0 0 1-.41.081.25.25 0 0 0-.217.2c-.582 2.66-2.127 5.35-5.75 7.843a.248.248 0 0 0-.09.299.25.25 0 0 0 .065.091 28.703 28.703 0 0 0 2.662 2.12.246.246 0 0 0 .209.037c2.579-.701 4.85-2.242 6.456-4.378a.25.25 0 0 0 .048-.189 13.51 13.51 0 0 0-2.7-6.014ZM5.702 7.058a.254.254 0 0 0 .2-.165A2.488 2.488 0 0 1 7.98 5.245a.093.093 0 0 0 .078-.062 19.734 19.734 0 0 1 3.055-4.74.25.25 0 0 0-.21-.41 12.009 12.009 0 0 0-10.4 8.558.25.25 0 0 0 .373.281 12.912 12.912 0 0 1 4.826-1.814ZM10.773 22.052a.25.25 0 0 0-.28-.046c-.758.356-1.55.635-2.365.833a.25.25 0 0 0-.022.48c1.252.43 2.568.65 3.893.65.1 0 .2 0 .3-.008a.25.25 0 0 0 .147-.444c-.526-.424-1.1-.917-1.673-1.465ZM18.744 8.436a.249.249 0 0 0 .15.228 2.246 2.246 0 0 1 1.352 2.054c0 .337-.08.67-.23.972a.25.25 0 0 0 .042.28l.007.009a15.016 15.016 0 0 1 2.52 4.6.25.25 0 0 0 .37.132.25.25 0 0 0 .096-.114c.623-1.464.944-3.039.945-4.63a12.005 12.005 0 0 0-5.78-10.258.25.25 0 0 0-.373.274c.547 2.109.85 4.274.901 6.453ZM9.61 5.38a.25.25 0 0 0 .08.31c.34.24.616.561.8.935a.25.25 0 0 0 .3.127.631.631 0 0 1 .206-.034c2.054.078 4.036.772 5.69 1.991a.251.251 0 0 0 .267.024c.046-.024.093-.047.141-.067a.25.25 0 0 0 .151-.23A29.98 29.98 0 0 0 15.957.764a.25.25 0 0 0-.16-.164 11.924 11.924 0 0 0-2.21-.518.252.252 0 0 0-.215.076A22.456 22.456 0 0 0 9.61 5.38Z"
                                            />
                                        </g>
                                    </svg>
                                </div>

                                <div class="pt-3 sm:pt-5">
                                    <h2 class="text-xl font-semibold text-black dark:text-white">Vibrant Ecosystem</h2>

                                    <p class="mt-4 text-sm/relaxed">
                                        Laravel's robust library of first-party tools and libraries, such as <a href="https://forge.laravel.com" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white dark:focus-visible:ring-[#FF2D20]">Forge</a>, <a href="https://vapor.laravel.com" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Vapor</a>, <a href="https://nova.laravel.com" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Nova</a>, <a href="https://envoyer.io" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Envoyer</a>, and <a href="https://herd.laravel.com" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Herd</a> help you take your projects to the next level. Pair them with powerful open source libraries like <a href="https://laravel.com/docs/billing" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Cashier</a>, <a href="https://laravel.com/docs/dusk" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Dusk</a>, <a href="https://laravel.com/docs/broadcasting" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Echo</a>, <a href="https://laravel.com/docs/horizon" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Horizon</a>, <a href="https://laravel.com/docs/sanctum" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Sanctum</a>, <a href="https://laravel.com/docs/telescope" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Telescope</a>, and more.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </main>

                    <footer class="py-16 text-center text-sm text-black dark:text-white/70">
                        Laravel v{{ Illuminate\Foundation\Application::VERSION }} (PHP v{{ PHP_VERSION }})
                    </footer>
                </div>
            </div>
        </div>
    </body>
</html>

॥๛॥
/ATB_Fresh/resources\views\auth\confirm-password.blade.php
॥๛॥
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
        {{ __('This is a secure area of the application. Please confirm your password before continuing.') }}
    </div>

    <form method="POST" action="{{ route('password.confirm') }}">
        @csrf

        <!-- Password -->
        <div>
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <div class="flex justify-end mt-4">
            <x-primary-button>
                {{ __('Confirm') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

॥๛॥
/ATB_Fresh/resources\views\auth\forgot-password.blade.php
॥๛॥
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
        {{ __('Forgot your password? No problem. Just let us know your email address and we will email you a password reset link that will allow you to choose a new one.') }}
    </div>

    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('password.email') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Email Password Reset Link') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

॥๛॥
/ATB_Fresh/resources\views\auth\login.blade.php
॥๛॥
<x-guest-layout>
    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('login') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Remember Me -->
        <div class="block mt-4">
            <label for="remember_me" class="inline-flex items-center">
                <input id="remember_me" type="checkbox" class="rounded dark:bg-gray-900 border-gray-300 dark:border-gray-700 text-indigo-600 shadow-sm focus:ring-indigo-500 dark:focus:ring-indigo-600 dark:focus:ring-offset-gray-800" name="remember">
                <span class="ms-2 text-sm text-gray-600 dark:text-gray-400">{{ __('Remember me') }}</span>
            </label>
        </div>

        <div class="flex items-center justify-end mt-4">
            @if (Route::has('password.request'))
                <a class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800" href="{{ route('password.request') }}">
                    {{ __('Forgot your password?') }}
                </a>
            @endif

            <x-primary-button class="ms-3">
                {{ __('Log in') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

॥๛॥
/ATB_Fresh/resources\views\auth\register.blade.php
॥๛॥
<x-guest-layout>
    <form method="POST" action="{{ route('register') }}">
        @csrf

        <!-- Name -->
        <div>
            <x-input-label for="name" :value="__('Name')" />
            <x-text-input id="name" class="block mt-1 w-full" type="text" name="name" :value="old('name')" required
                autofocus autocomplete="name" />
            <x-input-error :messages="$errors->get('name')" class="mt-2" />
        </div>

        <!-- Email Address -->
        <div class="mt-4">
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required
                autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required
                autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full" type="password"
                name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <a class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800"
                href="{{ route('login') }}">
                {{ __('Already registered?') }}
            </a>

            <x-primary-button class="ms-4">
                {{ __('Register') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>
॥๛॥
/ATB_Fresh/resources\views\auth\reset-password.blade.php
॥๛॥
<x-guest-layout>
    <form method="POST" action="{{ route('password.store') }}">
        @csrf

        <!-- Password Reset Token -->
        <input type="hidden" name="token" value="{{ $request->route('token') }}">

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email', $request->email)" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />
            <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                                type="password"
                                name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Reset Password') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

॥๛॥
/ATB_Fresh/resources\views\auth\verify-email.blade.php
॥๛॥
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
        {{ __('Thanks for signing up! Before getting started, could you verify your email address by clicking on the link we just emailed to you? If you didn\'t receive the email, we will gladly send you another.') }}
    </div>

    @if (session('status') == 'verification-link-sent')
        <div class="mb-4 font-medium text-sm text-green-600 dark:text-green-400">
            {{ __('A new verification link has been sent to the email address you provided during registration.') }}
        </div>
    @endif

    <div class="mt-4 flex items-center justify-between">
        <form method="POST" action="{{ route('verification.send') }}">
            @csrf

            <div>
                <x-primary-button>
                    {{ __('Resend Verification Email') }}
                </x-primary-button>
            </div>
        </form>

        <form method="POST" action="{{ route('logout') }}">
            @csrf

            <button type="submit" class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800">
                {{ __('Log Out') }}
            </button>
        </form>
    </div>
</x-guest-layout>

॥๛॥
/ATB_Fresh/resources\views\auth\verify.blade.php
॥๛॥
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Verify Your Email Address') }}</div>

                <div class="card-body">
                    @if (session('resent'))
                        <div class="alert alert-success" role="alert">
                            {{ __('A fresh verification link has been sent to your email address.') }}
                        </div>
                    @endif

                    {{ __('Before proceeding, please check your email for a verification link.') }}
                    {{ __('If you did not receive the email') }},
                    <form class="d-inline" method="POST" action="{{ route('verification.resend') }}">
                        @csrf
                        <button type="submit" class="btn btn-link p-0 m-0 align-baseline">{{ __('click here to request another') }}</button>.
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

॥๛॥
/ATB_Fresh/resources\views\auth\passwords\confirm.blade.php
॥๛॥
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Confirm Password') }}</div>

                <div class="card-body">
                    {{ __('Please confirm your password before continuing.') }}

                    <form method="POST" action="{{ route('password.confirm') }}">
                        @csrf

                        <div class="row mb-3">
                            <label for="password" class="col-md-4 col-form-label text-md-end">{{ __('Password') }}</label>

                            <div class="col-md-6">
                                <input id="password" type="password" class="form-control @error('password') is-invalid @enderror" name="password" required autocomplete="current-password">

                                @error('password')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-8 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Confirm Password') }}
                                </button>

                                @if (Route::has('password.request'))
                                    <a class="btn btn-link" href="{{ route('password.request') }}">
                                        {{ __('Forgot Your Password?') }}
                                    </a>
                                @endif
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

॥๛॥
/ATB_Fresh/resources\views\auth\passwords\email.blade.php
॥๛॥
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Reset Password') }}</div>

                <div class="card-body">
                    @if (session('status'))
                        <div class="alert alert-success" role="alert">
                            {{ session('status') }}
                        </div>
                    @endif

                    <form method="POST" action="{{ route('password.email') }}">
                        @csrf

                        <div class="row mb-3">
                            <label for="email" class="col-md-4 col-form-label text-md-end">{{ __('Email Address') }}</label>

                            <div class="col-md-6">
                                <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email" value="{{ old('email') }}" required autocomplete="email" autofocus>

                                @error('email')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-6 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Send Password Reset Link') }}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

॥๛॥
/ATB_Fresh/resources\views\auth\passwords\reset.blade.php
॥๛॥
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Reset Password') }}</div>

                <div class="card-body">
                    <form method="POST" action="{{ route('password.update') }}">
                        @csrf

                        <input type="hidden" name="token" value="{{ $token }}">

                        <div class="row mb-3">
                            <label for="email" class="col-md-4 col-form-label text-md-end">{{ __('Email Address') }}</label>

                            <div class="col-md-6">
                                <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email" value="{{ $email ?? old('email') }}" required autocomplete="email" autofocus>

                                @error('email')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="password" class="col-md-4 col-form-label text-md-end">{{ __('Password') }}</label>

                            <div class="col-md-6">
                                <input id="password" type="password" class="form-control @error('password') is-invalid @enderror" name="password" required autocomplete="new-password">

                                @error('password')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="password-confirm" class="col-md-4 col-form-label text-md-end">{{ __('Confirm Password') }}</label>

                            <div class="col-md-6">
                                <input id="password-confirm" type="password" class="form-control" name="password_confirmation" required autocomplete="new-password">
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-6 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Reset Password') }}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

॥๛॥
/ATB_Fresh/resources\views\components\application-logo.blade.php
॥๛॥
<svg viewBox="0 0 316 316" xmlns="http://www.w3.org/2000/svg" {{ $attributes }}>
    <path d="M305.8 81.125C305.77 80.995 305.69 80.885 305.65 80.755C305.56 80.525 305.49 80.285 305.37 80.075C305.29 79.935 305.17 79.815 305.07 79.685C304.94 79.515 304.83 79.325 304.68 79.175C304.55 79.045 304.39 78.955 304.25 78.845C304.09 78.715 303.95 78.575 303.77 78.475L251.32 48.275C249.97 47.495 248.31 47.495 246.96 48.275L194.51 78.475C194.33 78.575 194.19 78.725 194.03 78.845C193.89 78.955 193.73 79.045 193.6 79.175C193.45 79.325 193.34 79.515 193.21 79.685C193.11 79.815 192.99 79.935 192.91 80.075C192.79 80.285 192.71 80.525 192.63 80.755C192.58 80.875 192.51 80.995 192.48 81.125C192.38 81.495 192.33 81.875 192.33 82.265V139.625L148.62 164.795V52.575C148.62 52.185 148.57 51.805 148.47 51.435C148.44 51.305 148.36 51.195 148.32 51.065C148.23 50.835 148.16 50.595 148.04 50.385C147.96 50.245 147.84 50.125 147.74 49.995C147.61 49.825 147.5 49.635 147.35 49.485C147.22 49.355 147.06 49.265 146.92 49.155C146.76 49.025 146.62 48.885 146.44 48.785L93.99 18.585C92.64 17.805 90.98 17.805 89.63 18.585L37.18 48.785C37 48.885 36.86 49.035 36.7 49.155C36.56 49.265 36.4 49.355 36.27 49.485C36.12 49.635 36.01 49.825 35.88 49.995C35.78 50.125 35.66 50.245 35.58 50.385C35.46 50.595 35.38 50.835 35.3 51.065C35.25 51.185 35.18 51.305 35.15 51.435C35.05 51.805 35 52.185 35 52.575V232.235C35 233.795 35.84 235.245 37.19 236.025L142.1 296.425C142.33 296.555 142.58 296.635 142.82 296.725C142.93 296.765 143.04 296.835 143.16 296.865C143.53 296.965 143.9 297.015 144.28 297.015C144.66 297.015 145.03 296.965 145.4 296.865C145.5 296.835 145.59 296.775 145.69 296.745C145.95 296.655 146.21 296.565 146.45 296.435L251.36 236.035C252.72 235.255 253.55 233.815 253.55 232.245V174.885L303.81 145.945C305.17 145.165 306 143.725 306 142.155V82.265C305.95 81.875 305.89 81.495 305.8 81.125ZM144.2 227.205L100.57 202.515L146.39 176.135L196.66 147.195L240.33 172.335L208.29 190.625L144.2 227.205ZM244.75 114.995V164.795L226.39 154.225L201.03 139.625V89.825L219.39 100.395L244.75 114.995ZM249.12 57.105L292.81 82.265L249.12 107.425L205.43 82.265L249.12 57.105ZM114.49 184.425L96.13 194.995V85.305L121.49 70.705L139.85 60.135V169.815L114.49 184.425ZM91.76 27.425L135.45 52.585L91.76 77.745L48.07 52.585L91.76 27.425ZM43.67 60.135L62.03 70.705L87.39 85.305V202.545V202.555V202.565C87.39 202.735 87.44 202.895 87.46 203.055C87.49 203.265 87.49 203.485 87.55 203.695V203.705C87.6 203.875 87.69 204.035 87.76 204.195C87.84 204.375 87.89 204.575 87.99 204.745C87.99 204.745 87.99 204.755 88 204.755C88.09 204.905 88.22 205.035 88.33 205.175C88.45 205.335 88.55 205.495 88.69 205.635L88.7 205.645C88.82 205.765 88.98 205.855 89.12 205.965C89.28 206.085 89.42 206.225 89.59 206.325C89.6 206.325 89.6 206.325 89.61 206.335C89.62 206.335 89.62 206.345 89.63 206.345L139.87 234.775V285.065L43.67 229.705V60.135ZM244.75 229.705L148.58 285.075V234.775L219.8 194.115L244.75 179.875V229.705ZM297.2 139.625L253.49 164.795V114.995L278.85 100.395L297.21 89.825V139.625H297.2Z"/>
</svg>

॥๛॥
/ATB_Fresh/resources\views\components\auth-session-status.blade.php
॥๛॥
@props(['status'])

@if ($status)
    <div {{ $attributes->merge(['class' => 'font-medium text-sm text-green-600 dark:text-green-400']) }}>
        {{ $status }}
    </div>
@endif

॥๛॥
/ATB_Fresh/resources\views\components\danger-button.blade.php
॥๛॥
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-red-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-red-500 active:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>

॥๛॥
/ATB_Fresh/resources\views\components\dropdown-link.blade.php
॥๛॥
<a {{ $attributes->merge(['class' => 'block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700
    hover:bg-gray-100 focus:outline-none focus:bg-gray-100 transition duration-150 ease-in-out']) }}>{{ $slot }}</a>
॥๛॥
/ATB_Fresh/resources\views\components\dropdown.blade.php
॥๛॥
@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white'])

@php
$alignmentClasses = match ($align) {
'left' => 'ltr:origin-top-left rtl:origin-top-right start-0',
'top' => 'origin-top',
default => 'ltr:origin-top-right rtl:origin-top-left end-0',
};

$width = match ($width) {
'48' => 'w-48',
default => $width,
};
@endphp

<div class="relative" x-data="{ open: false }" @click.outside="open = false" @close.stop="open = false">
    <div @click="open = ! open">
        {{ $trigger }}
    </div>

    <div x-show="open" x-transition:enter="transition ease-out duration-200"
        x-transition:enter-start="transform opacity-0 scale-95" x-transition:enter-end="transform opacity-100 scale-100"
        x-transition:leave="transition ease-in duration-75" x-transition:leave-start="transform opacity-100 scale-100"
        x-transition:leave-end="transform opacity-0 scale-95"
        class="absolute z-[9999] mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }}" @click="open = false">
        <div class="rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}">
            {{ $content }}
        </div>
    </div>
</div>
॥๛॥
/ATB_Fresh/resources\views\components\input-error.blade.php
॥๛॥
@props(['messages'])

@if ($messages)
    <ul {{ $attributes->merge(['class' => 'text-sm text-red-600 dark:text-red-400 space-y-1']) }}>
        @foreach ((array) $messages as $message)
            <li>{{ $message }}</li>
        @endforeach
    </ul>
@endif

॥๛॥
/ATB_Fresh/resources\views\components\input-label.blade.php
॥๛॥
@props(['value'])

<label {{ $attributes->merge(['class' => 'block font-medium text-sm text-gray-700 dark:text-gray-300']) }}>
    {{ $value ?? $slot }}
</label>

॥๛॥
/ATB_Fresh/resources\views\components\layout.blade.php
॥๛॥
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="h-full bg-gray-100" x-data>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ config('app.name', 'Laravel') }}</title>

    @livewireStyles

    <style>
        .highlight {
            background-color: #acd2f1;
        }
    </style>

    @vite(['resources/css/app.css', 'resources/js/app.js'])
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>

<body class="h-full antialiased">
    <div class="min-h-full bg-slate-200">
        <nav class="bg-gray-800">
            <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                <div class="flex h-16 items-center justify-between">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <img class="h-8 w-8" src="https://laracasts.com/images/logo/logo-triangle.svg"
                                alt="Your Company">
                        </div>
                        <div class="hidden md:block">
                            <div class="ml-10 flex items-baseline space-x-4">
                                <x-nav-link href="/" :active="request()->is('/')">Home</x-nav-link>
                                <x-nav-link href="/students" :active="request()->is('students')">Students</x-nav-link>
                                <x-nav-link href="/registrations" :active="request()->is('registrations')">Registrations
                                </x-nav-link>
                                <x-nav-link href="/events" :active="request()->is('events')">Events
                                </x-nav-link>
                                <x-nav-link href="/venues" :active="request()->is('venues')">Venues
                                </x-nav-link>
                                <x-nav-link href="/courses" :active="request()->is('courses')">Courses
                                </x-nav-link>
                                <x-nav-link href="/facilitators" :active="request()->is('facilitators')">Facilitators
                                </x-nav-link>
                            </div>
                        </div>
                    </div>
                    <div class="hidden md:block">
                        <div class="ml-4 flex items-center md:ml-6">

                            @auth
                            <div class="hidden md:block">
                                <div class="ml-4 flex items-center md:ml-6">
                                    <!-- Profile dropdown -->
                                    <div class="relative ml-3" x-data="{ open: false }">
                                        <div>
                                            <button @click="open = !open" type="button"
                                                class="relative flex max-w-xs items-center rounded-full bg-gray-800 text-sm text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800"
                                                id="user-menu-button">
                                                <span class="absolute -inset-1.5"></span>
                                                <span class="sr-only">Open user menu</span>
                                                <img class="h-8 w-8 rounded-full"
                                                    src="https://laracasts.com/images/lary-ai-face.svg" alt="">
                                            </button>
                                        </div>

                                        <div x-show="open" @click.away="open = false"
                                            class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5"
                                            role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button"
                                            tabindex="-1">

                                            @if(!request()->routeIs('dashboard'))
                                            <a href="{{ route('dashboard') }}"
                                                class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Dashboard</a>
                                            @endif

                                            @if(!request()->routeIs('profile.edit'))
                                            <a href="{{ route('profile.edit') }}"
                                                class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Profile</a>
                                            @endif

                                            <form method="POST" action="{{ route('logout') }}">
                                                @csrf
                                                <button type="submit"
                                                    class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                    Log Out
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @endauth
                        </div>
                    </div>
                    <div class="-mr-2 flex md:hidden">
                        <!-- Mobile menu button -->
                        <button type="button"
                            class="relative inline-flex items-center justify-center rounded-md bg-gray-800 p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800"
                            aria-controls="mobile-menu" aria-expanded="false">
                            <span class="absolute -inset-0.5"></span>
                            <span class="sr-only">Open main menu</span>
                            <!-- Menu open: "hidden", Menu closed: "block" -->
                            <svg class="block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
                            </svg>
                            <!-- Menu open: "block", Menu closed: "hidden" -->
                            <svg class="hidden h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Mobile menu, show/hide based on menu state. -->
            <div class="md:hidden" id="mobile-menu">
                <div class="space-y-1 px-2 pb-3 pt-2 sm:px-3">
                    <a href="/"
                        class="block rounded-md px-3 py-2 text-base font-medium text-gray-300 hover:bg-gray-700 hover:text-white">Home</a>
                    <a href="/about"
                        class="block rounded-md px-3 py-2 text-base font-medium text-gray-300 hover:bg-gray-700 hover:text-white">About</a>
                    <a href="/contact"
                        class="block rounded-md px-3 py-2 text-base font-medium text-gray-300 hover:bg-gray-700 hover:text-white">Contact</a>
                </div>
                <div class="border-t border-gray-700 pb-3 pt-4">
                    <div class="flex items-center px-5">
                        <div class="flex-shrink-0">
                            <img class="h-10 w-10 rounded-full" src="https://laracasts.com/images/lary-ai-face.svg"
                                alt="">
                        </div>
                        <div class="ml-3">
                            <div class="text-base font-medium leading-none text-white">Lary Robot</div>
                            <div class="text-sm font-medium leading-none text-gray-400">louisr57@gmail.com</div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>

        <header class="bg-gray-400 shadow">
            <div class="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
                <h1 class="text-3xl font-bold tracking-tight text-gray-900">{{ $heading }}</h1>
            </div>
        </header>
        <main>
            <div class="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
                {{ $slot }}
            </div>
        </main>
    </div>

    @livewireScripts

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const rows = document.querySelectorAll('.registration-row');
            if (rows.length > 0) {
                let currentIndex = null;

                function highlightRow(index) {
                    if (currentIndex !== null) {
                        rows[currentIndex].classList.remove('highlight');
                    }
                    currentIndex = index;
                    rows[currentIndex].classList.add('highlight');
                }

                rows.forEach((row, index) => {
                    row.addEventListener('click', function () {
                        highlightRow(index);
                    });

                    row.addEventListener('mouseover', function () {
                        row.classList.add('highlight');
                    });

                    row.addEventListener('mouseout', function () {
                        if (index !== currentIndex) {
                            row.classList.remove('highlight');
                        }
                    });
                });

                document.addEventListener('keydown', function (event) {
                    if (currentIndex !== null) {
                        if (event.key === 'ArrowDown') {
                            if (currentIndex < rows.length - 1) {
                                highlightRow(currentIndex + 1);
                            }
                        } else if (event.key === 'ArrowUp') {
                            if (currentIndex > 0) {
                                highlightRow(currentIndex - 1);
                            }
                        }
                    }
                });
            }
        });
    </script>
</body>

</html>
॥๛॥
/ATB_Fresh/resources\views\components\modal.blade.php
॥๛॥
@props([
    'name',
    'show' => false,
    'maxWidth' => '2xl'
])

@php
$maxWidth = [
    'sm' => 'sm:max-w-sm',
    'md' => 'sm:max-w-md',
    'lg' => 'sm:max-w-lg',
    'xl' => 'sm:max-w-xl',
    '2xl' => 'sm:max-w-2xl',
][$maxWidth];
@endphp

<div
    x-data="{
        show: @js($show),
        focusables() {
            // All focusable element types...
            let selector = 'a, button, input:not([type=\'hidden\']), textarea, select, details, [tabindex]:not([tabindex=\'-1\'])'
            return [...$el.querySelectorAll(selector)]
                // All non-disabled elements...
                .filter(el => ! el.hasAttribute('disabled'))
        },
        firstFocusable() { return this.focusables()[0] },
        lastFocusable() { return this.focusables().slice(-1)[0] },
        nextFocusable() { return this.focusables()[this.nextFocusableIndex()] || this.firstFocusable() },
        prevFocusable() { return this.focusables()[this.prevFocusableIndex()] || this.lastFocusable() },
        nextFocusableIndex() { return (this.focusables().indexOf(document.activeElement) + 1) % (this.focusables().length + 1) },
        prevFocusableIndex() { return Math.max(0, this.focusables().indexOf(document.activeElement)) -1 },
    }"
    x-init="$watch('show', value => {
        if (value) {
            document.body.classList.add('overflow-y-hidden');
            {{ $attributes->has('focusable') ? 'setTimeout(() => firstFocusable().focus(), 100)' : '' }}
        } else {
            document.body.classList.remove('overflow-y-hidden');
        }
    })"
    x-on:open-modal.window="$event.detail == '{{ $name }}' ? show = true : null"
    x-on:close-modal.window="$event.detail == '{{ $name }}' ? show = false : null"
    x-on:close.stop="show = false"
    x-on:keydown.escape.window="show = false"
    x-on:keydown.tab.prevent="$event.shiftKey || nextFocusable().focus()"
    x-on:keydown.shift.tab.prevent="prevFocusable().focus()"
    x-show="show"
    class="fixed inset-0 overflow-y-auto px-4 py-6 sm:px-0 z-50"
    style="display: {{ $show ? 'block' : 'none' }};"
>
    <div
        x-show="show"
        class="fixed inset-0 transform transition-all"
        x-on:click="show = false"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="absolute inset-0 bg-gray-500 dark:bg-gray-900 opacity-75"></div>
    </div>

    <div
        x-show="show"
        class="mb-6 bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full {{ $maxWidth }} sm:mx-auto"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
    >
        {{ $slot }}
    </div>
</div>

॥๛॥
/ATB_Fresh/resources\views\components\nav-link.blade.php
॥๛॥
@props(['active'])

@php
$classes = ($active ?? false)
? 'inline-flex items-center px-1 pt-1 border-b-2 border-sky-400 text-sm font-medium leading-5
text-gray-300 focus:outline-none focus:border-sky-300 transition duration-150 ease-in-out'
: 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-400
hover:text-gray-200 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>

{{-- dark:text-gray-100
dark:border-sky-600

dark:text-gray-400 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-700
focus:outline-none focus:text-gray-700 dark:focus:text-gray-300 focus:border-gray-300 dark:focus:border-gray-700
--}}
॥๛॥
/ATB_Fresh/resources\views\components\primary-button.blade.php
॥๛॥
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-gray-800 dark:bg-gray-200 border border-transparent rounded-md font-semibold text-xs text-white dark:text-gray-800 uppercase tracking-widest hover:bg-gray-700 dark:hover:bg-white focus:bg-gray-700 dark:focus:bg-white active:bg-gray-900 dark:active:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>

॥๛॥
/ATB_Fresh/resources\views\components\responsive-nav-link.blade.php
॥๛॥
@props(['active'])

@php
$classes = ($active ?? false)
            ? 'block w-full ps-3 pe-4 py-2 border-l-4 border-indigo-400 dark:border-indigo-600 text-start text-base font-medium text-indigo-700 dark:text-indigo-300 bg-indigo-50 dark:bg-indigo-900/50 focus:outline-none focus:text-indigo-800 dark:focus:text-indigo-200 focus:bg-indigo-100 dark:focus:bg-indigo-900 focus:border-indigo-700 dark:focus:border-indigo-300 transition duration-150 ease-in-out'
            : 'block w-full ps-3 pe-4 py-2 border-l-4 border-transparent text-start text-base font-medium text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 hover:border-gray-300 dark:hover:border-gray-600 focus:outline-none focus:text-gray-800 dark:focus:text-gray-200 focus:bg-gray-50 dark:focus:bg-gray-700 focus:border-gray-300 dark:focus:border-gray-600 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>

॥๛॥
/ATB_Fresh/resources\views\components\secondary-button.blade.php
॥๛॥
<button {{ $attributes->merge(['type' => 'button', 'class' => 'inline-flex items-center px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-500 rounded-md font-semibold text-xs text-gray-700 dark:text-gray-300 uppercase tracking-widest shadow-sm hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-25 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>

॥๛॥
/ATB_Fresh/resources\views\components\text-input.blade.php
॥๛॥
@props(['disabled' => false])

<input @disabled($disabled) {{ $attributes->merge(['class' => 'border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 rounded-md shadow-sm']) }}>

॥๛॥
/ATB_Fresh/resources\views\courses\create.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Create New Course
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Create New Course</h1>

        <!-- Display validation errors, if any -->
        @if ($errors->any())
        <div class="bg-red-100 text-red-800 p-4 mb-4 rounded">
            <ul>
                @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
        @endif

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <form action="{{ route('courses.store') }}" method="POST">
                @csrf

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Course Code -->
                    <div class="mb-4">
                        <label for="course_code" class="block text-gray-700 font-bold mb-2">Course Code</label>
                        <input type="text" id="course_code" name="course_code"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('course_code') }}" required>
                    </div>

                    <!-- Course Title -->
                    <div class="mb-4">
                        <label for="course_title" class="block text-gray-700 font-bold mb-2">Course Title</label>
                        <input type="text" id="course_title" name="course_title"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('course_title') }}" required>
                    </div>
                </div>

                <!-- Description -->
                <div class="mb-4">
                    <label for="description" class="block text-gray-700 font-bold mb-2">Description</label>
                    <textarea id="description" name="description"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200 h-32"
                        required>{{ old('description') }}</textarea>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Prerequisites -->
                    <div class="mb-4">
                        <label for="prerequisites" class="block text-gray-700 font-bold mb-2">Prerequisites</label>
                        <input type="text" id="prerequisites" name="prerequisites"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('prerequisites') }}" required>
                    </div>

                    <!-- Duration -->
                    <div class="mb-4">
                        <label for="duration" class="block text-gray-700 font-bold mb-2">Duration (in days)</label>
                        <input type="number" id="duration" name="duration" step="0.1"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('duration') }}" required>
                    </div>
                </div>

                <!-- Submit and Cancel buttons -->
                <div class="flex justify-between items-center mt-3">
                    <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600">
                        Create Course
                    </button>
                    <a href="{{ route('courses.index') }}"
                        class="bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600">
                        Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\courses\edit.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Edit Course
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Edit Course</h1>

        @if ($errors->any())
        <div class="bg-red-100 text-red-800 p-4 mb-4 rounded">
            <ul>
                @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
        @endif

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <form action="{{ route('courses.update', $course->id) }}" method="POST">
                @csrf
                @method('PUT')

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="mb-4">
                        <label for="course_title" class="block text-gray-700 font-bold mb-2">Course Title</label>
                        <input type="text" id="course_title" name="course_title"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('course_title', $course->course_title) }}" required>
                    </div>

                    <div class="mb-4">
                        <label for="course_code" class="block text-gray-700 font-bold mb-2">Course Code</label>
                        <input type="text" id="course_code" name="course_code"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('course_code', $course->course_code) }}" required>
                    </div>
                </div>

                <div class="mb-4">
                    <label for="description" class="block text-gray-700 font-bold mb-2">Description</label>
                    <textarea id="description" name="description"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200 h-32"
                        required>{{ old('description', $course->description) }}</textarea>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="mb-4">
                        <label for="prerequisites" class="block text-gray-700 font-bold mb-2">Prerequisites</label>
                        <input type="text" id="prerequisites" name="prerequisites"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('prerequisites', $course->prerequisites) }}" required>
                    </div>

                    <div class="mb-4">
                        <label for="duration" class="block text-gray-700 font-bold mb-2">Duration (in days)</label>
                        <input type="number" id="duration" name="duration" step="0.1"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('duration', $course->duration) }}" required>
                    </div>
                </div>

                <div>
                    <button type="submit"
                        class="mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                        Update Course
                    </button>
                </div>
            </form>
        </div>
    </div>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\courses\index.blade.php
॥๛॥
<x-layout>

    <x-slot:heading>
        ATB Courses
    </x-slot:heading>

    {{-- <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('ATB Courses') }}
        </h2>
    </x-slot> --}}

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <!-- Flash Message Section -->
                    @if(session('success'))
                    <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4" role="alert">
                        {{ session('success') }}
                    </div>
                    @endif

                    <div class="flex justify-between items-center mb-6">
                        <h1 class="text-2xl font-bold mb-0 mt-1">Courses List</h1>
                        <a href="{{ route('courses.create') }}"
                            class="mb-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Create New Course
                        </a>
                    </div>

                    @if($courses->isEmpty())
                    <h1>No courses available.</h1>
                    @else
                    <!-- Display courses in a table -->
                    <div class="overflow-x-auto">
                        <table class="min-w-full table-auto border-collapse border border-gray-500">
                            <thead class="bg-gray-200">
                                <tr>
                                    <!-- Action column -->
                                    <th class="border border-gray-500 px-4 py-2 sticky left-0 text-blue-500 z-10">
                                        Action
                                    </th>
                                    <th class="border border-gray-500 px-4 py-2 text-left">
                                        <a href="{{ route('courses.index', ['sort_by' => 'id', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                                            class="text-blue-500 hover:underline">ID
                                            @if ($sort_by === 'id')
                                            <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                            @endif
                                        </a>
                                    </th>
                                    <th class="border border-gray-500 px-4 py-2 text-left">
                                        <a href="{{ route('courses.index', ['sort_by' => 'course_title', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                                            class="text-blue-500 hover:underline">Course name
                                            @if ($sort_by === 'course_title')
                                            <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                            @endif</a>
                                    </th>
                                    <th class="border border-gray-500 px-4 py-2 text-left">
                                        <a href="{{ route('courses.index', ['sort_by' => 'duration', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                                            class="text-blue-500 hover:underline">Duration in Days
                                            @if ($sort_by === 'duration')
                                            <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                            @endif</a>
                                    </th>
                                    <th class="border border-gray-500 px-4 py-2 text-left">
                                        <a href="{{ route('courses.index', ['sort_by' => 'description', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                                            class="text-blue-500 hover:underline">Description
                                            @if ($sort_by === 'description')
                                            <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                            @endif</a>
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="bg-gray-50">
                                @foreach($courses as $course)
                                <tr class="hover:bg-sky-100">
                                    <!-- Action column with sticky left positioning -->
                                    <td
                                        class="text-center border border-gray-500 px-4 py-2 sticky left-0 z-10 bg-gray-50">
                                        <a href="{{ route('courses.show', $course->id) }}"
                                            class="text-blue-600 hover:underline">
                                            View
                                        </a>
                                    </td>
                                    <td class="border border-gray-500 px-4 py-2 text-left">{{ $course->id }}</td>
                                    <td
                                        class="border border-gray-500 px-4 py-2 text-left whitespace-normal break-words max-w-xs lg:max-w-md xl:max-w-lg">
                                        {{ $course->course_title }}
                                    </td>
                                    <td class="border border-gray-500 px-4 py-2 text-center">
                                        {{ number_format($course->duration, 1) }}
                                    </td>
                                    <td class="border border-gray-500 px-4 py-2 text-left">{{ $course->description }}
                                    </td>
                                </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                    @endif

                    <div class="mt-4">
                        {{ $courses->appends(request()->input())->links() }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\courses\show.blade.php
॥๛॥
<x-layout>

    <x-slot:heading>
        Course Details
    </x-slot:heading>

    <div class="container mx-auto p-4">

        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold">{{ $course->course_title }}</h1>
            @if($course->events->isEmpty())
            <form action="{{ route('courses.destroy', $course->id) }}" method="POST" class="inline">
                @csrf
                @method('DELETE')
                <button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
                    onclick="return confirm('Are you sure you want to delete this course?');">
                    Delete Course
                </button>
            </form>
            @endif
            <a href="{{ route('courses.edit', $course->id) }}"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Edit Course
            </a>
        </div>

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <!-- Course Code -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Course Code</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $course->course_code }}
                    </p>
                </div>

                <!-- Duration -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Duration (days)</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $course->duration }}
                    </p>
                </div>

                <!-- Prerequisites -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Prerequisites</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $course->prerequisites }}
                    </p>
                </div>
            </div>


            <div class="grid grid-cols-1 md:grid-cols-1 gap-4">

                <!-- Description -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Description</label>
                    <p
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200 h-24 overflow-y-auto">
                        {{ $course->description }}
                    </p>
                </div>
            </div>
        </div>

        @if($course->events->isNotEmpty())
        <h2 class="text-2xl font-bold mb-5 mt-5">Events for this Course</h2>
        <table class="min-w-full table-auto border-collapse border border-gray-500">
            <thead class="bg-gray-200 border border-gray-500 px-4 py-2 text-left">
                <tr>
                    <th class="border border-gray-500 px-4 py-2">Event Title</th>
                    <th class="border border-gray-500 px-4 py-2">Start Date</th>
                    <th class="border border-gray-500 px-4 py-2">End Date</th>
                    <th class="border border-gray-500 px-4 py-2">Facilitator</th>
                    <th class="border border-gray-500 px-4 py-2">Venue</th>
                </tr>
            </thead>
            <tbody class="bg-gray-50">
                @foreach($course->events as $event)
                <tr class="hover:bg-sky-100 border-gray-500">
                    <td class="border border-gray-500 px-4 py-2">{{ $event->title }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $event->datefrom }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $event->dateto }}</td>
                    <td class="border border-gray-500 px-4 py-2">
                        {{ $event->facilitator->first_name }} {{ $event->facilitator->last_name }}
                    </td>
                    <td class="border border-gray-500 px-4 py-2">{{ $event->venue }}</td>
                </tr>
                @endforeach
            </tbody>
        </table>
        @else
        <p class="text-lg text-gray-600">No events have been scheduled for this course yet.</p>
        @endif

        <div class="mt-6">
            <a href="{{ route('courses.index') }}" class="text-blue-600 hover:underline">← Back to Courses List</a>
        </div>
    </div>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\events\create.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Create New Event
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Create New Event</h1>

        @if ($errors->any())
        <div class="bg-red-100 text-red-800 p-4 mb-4 rounded">
            <ul>
                @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
        @endif

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <form action="{{ route('events.store') }}" method="POST">
                @csrf

                <!-- First row - Course, Facilitator, Venue selections -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <!-- Course Selection -->
                    <div class="mb-4" x-data="{ open: false, selectedId: '', selectedText: '', eventTitle: '' }">
                        <label for="course_id" class="block text-gray-700 font-bold mb-2">Course Title</label>
                        <div class="relative">
                            <input type="text" x-model="selectedText" @click="open = true" @focus="open = true" class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200
                                      @error('course_id') border-red-500 @enderror" placeholder="Select Course"
                                readonly>
                            <input type="hidden" name="course_id" :value="selectedId">
                            <input type="hidden" name="title" :value="eventTitle">
                            @error('course_id')
                            <p class="text-red-500 text-xs italic mt-1">{{ $message }}</p>
                            @enderror
                            <div x-show="open" @click.away="open = false"
                                class="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg max-h-60 overflow-y-auto">
                                @foreach($courses as $course)
                                <div class="cursor-pointer p-2 hover:bg-gray-100" @click="selectedId = '{{ $course->id }}';
                                           selectedText = '{{ $course->course_title }}';
                                           eventTitle = '{{ $course->course_title }}';
                                           open = false">
                                    {{ $course->course_title }}
                                </div>
                                @endforeach
                            </div>
                        </div>
                    </div>

                    <!-- Facilitator Selection -->
                    <div class="mb-4" x-data="{ open: false, selectedId: '', selectedText: '' }">
                        <label for="facilitator_id" class="block text-gray-700 font-bold mb-2">Facilitator</label>
                        <div class="relative">
                            <input type="text" x-model="selectedText" @click="open = true" @focus="open = true" class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200
                                      @error('facilitator_id') border-red-500 @enderror"
                                placeholder="Select Facilitator" readonly>
                            <input type="hidden" name="facilitator_id" :value="selectedId">
                            @error('facilitator_id')
                            <p class="text-red-500 text-xs italic mt-1">{{ $message }}</p>
                            @enderror
                            <div x-show="open" @click.away="open = false"
                                class="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg max-h-60 overflow-y-auto">
                                @foreach($facilitators as $facilitator)
                                <div class="cursor-pointer p-2 hover:bg-gray-100" @click="selectedId = '{{ $facilitator->id }}';
                                           selectedText = '{{ $facilitator->first_name }} {{ $facilitator->last_name }}';
                                           open = false">
                                    {{ $facilitator->first_name }} {{ $facilitator->last_name }}
                                </div>
                                @endforeach
                            </div>
                        </div>
                    </div>

                    <!-- Venue Selection -->
                    <div class="mb-4" x-data="{ open: false, selectedId: '', selectedText: '' }">
                        <label for="venue_id" class="block text-gray-700 font-bold mb-2">Venue</label>
                        <div class="relative">
                            <input type="text" x-model="selectedText" @click="open = true" @focus="open = true" class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200
                                      @error('venue_id') border-red-500 @enderror" placeholder="Select Venue" readonly>
                            <input type="hidden" name="venue_id" :value="selectedId">
                            @error('venue_id')
                            <p class="text-red-500 text-xs italic mt-1">{{ $message }}</p>
                            @enderror
                            <div x-show="open" @click.away="open = false"
                                class="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg max-h-60 overflow-y-auto">
                                @foreach($venues as $venue)
                                <div class="cursor-pointer p-2 hover:bg-gray-100" @click="selectedId = '{{ $venue->id }}';
                                           selectedText = '{{ $venue->venue_name }}';
                                           open = false">
                                    {{ $venue->venue_name }}
                                </div>
                                @endforeach
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Second row - Date fields -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <!-- Date From -->
                    <div class="mb-4">
                        <label for="datefrom" class="block text-gray-700 font-bold mb-2">Date From</label>
                        <input type="text" id="datefrom" name="datefrom"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            required>
                    </div>

                    <!-- Date To -->
                    <div class="mb-4">
                        <label for="dateto" class="block text-gray-700 font-bold mb-2">Date To</label>
                        <input type="text" id="dateto" name="dateto"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            required>
                    </div>
                </div>

                <!-- Third row - Time fields -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Time From -->
                    <div class="mb-4" x-data="{ open: false, selectedTime: '' }">
                        <label for="timefrom" class="block text-gray-700 font-bold mb-2">Time From</label>
                        <div class="relative">
                            <input type="text" x-model="selectedTime" @click="open = true"
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                                name="timefrom" readonly>
                            <div x-show="open" @click.away="open = false"
                                class="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg max-h-60 overflow-y-auto">
                                @for ($hour = 6; $hour <= 22; $hour++) @foreach(['00', '30' ] as $minute) <div
                                    class="cursor-pointer p-2 hover:bg-gray-100"
                                    @click="selectedTime = '{{ sprintf('%02d', $hour) }}:{{ $minute }}'; open = false">
                                    {{ sprintf('%02d', $hour) }}:{{ $minute }}
                            </div>
                            @endforeach
                            @endfor
                        </div>
                    </div>
                </div>

                <!-- Time To -->
                <div class="mb-4" x-data="{ open: false, selectedTime: '' }">
                    <label for="timeto" class="block text-gray-700 font-bold mb-2">Time To</label>
                    <div class="relative">
                        <input type="text" x-model="selectedTime" @click="open = true"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            name="timeto" readonly>
                        <div x-show="open" @click.away="open = false"
                            class="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg max-h-60 overflow-y-auto">
                            @for ($hour = 6; $hour <= 22; $hour++) @foreach(['00', '30' ] as $minute) <div
                                class="cursor-pointer p-2 hover:bg-gray-100"
                                @click="selectedTime = '{{ sprintf('%02d', $hour) }}:{{ $minute }}'; open = false">
                                {{ sprintf('%02d', $hour) }}:{{ $minute }}
                        </div>
                        @endforeach
                        @endfor
                    </div>
                </div>
        </div>
    </div>

    <!-- Remarks - Full width -->
    <div class="mb-4">
        <label for="remarks" class="block text-gray-700 font-bold mb-2">Remarks</label>
        <textarea id="remarks" name="remarks"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200 h-32">{{ old('remarks') }}</textarea>
    </div>

    <!-- Submit and Cancel buttons -->
    <div class="flex justify-between items-center mt-6">
        <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600">
            Create Event
        </button>
        <a href="{{ route('events.index') }}" class="bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600">
            Cancel
        </a>
    </div>
    </form>
    </div>
    </div>

    <!-- Include Pikaday CSS and JS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/pikaday/css/pikaday.css">
    <script src="https://cdn.jsdelivr.net/npm/pikaday/pikaday.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            ['datefrom', 'dateto'].forEach(function(fieldId) {
                new Pikaday({
                    field: document.getElementById(fieldId),
                    format: 'YYYY-MM-DD',
                    showYearDropdown: true,
                    showMonthDropdown: true,
                    toString(date, format) {
                        date.setHours(12, 0, 0, 0);
                        return date ? date.toISOString().split('T')[0] : '';
                    },
                    parse(dateString, format) {
                        const parts = dateString.split('-');
                        return dateString ? new Date(parts[0], parts[1] - 1, parts[2]) : null;
                    },
                    onSelect: function(date) {
                        date.setHours(12, 0, 0, 0);
                        this._field.value = date.toISOString().split('T')[0];
                    }
                });
            });
        });
    </script>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\events\edit.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Edit Event
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Edit Event</h1>

        @if ($errors->any())
        <div class="bg-red-100 text-red-800 p-4 mb-4 rounded">
            <ul>
                @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
        @endif

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <form action="{{ route('events.update', $event->id) }}" method="POST">
                @csrf
                @method('PUT')

                <!-- First row - Course, Facilitator, Venue selections -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <!-- Course Selection -->
                    <div class="mb-4"
                        x-data="{ open: false, selectedId: '{{ $event->course_id }}', selectedText: '{{ $event->course->course_title }}', eventTitle: '{{ $event->title }}' }">
                        <label for="course_id" class="block text-gray-700 font-bold mb-2">Course Title</label>
                        <div class="relative">
                            <input type="text" x-model="selectedText" @click="open = true" @focus="open = true"
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                                readonly>
                            <input type="hidden" name="course_id" :value="selectedId">
                            <input type="hidden" name="title" :value="eventTitle">
                            <div x-show="open" @click.away="open = false"
                                class="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg max-h-60 overflow-y-auto">
                                @foreach($courses as $course)
                                <div class="cursor-pointer p-2 hover:bg-gray-100" @click="selectedId = '{{ $course->id }}';
                                            selectedText = '{{ $course->course_title }}';
                                            eventTitle = '{{ $course->course_title }}';
                                            open = false">
                                    {{ $course->course_title }}
                                </div>
                                @endforeach
                            </div>
                        </div>
                    </div>

                    <!-- Facilitator Selection -->
                    <div class="mb-4"
                        x-data="{ open: false, selectedId: '{{ $event->facilitator_id }}', selectedText: '{{ $event->facilitator->first_name }} {{ $event->facilitator->last_name }}' }">
                        <label for="facilitator_id" class="block text-gray-700 font-bold mb-2">Facilitator</label>
                        <div class="relative">
                            <input type="text" x-model="selectedText" @click="open = true" @focus="open = true"
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                                readonly>
                            <input type="hidden" name="facilitator_id" :value="selectedId">
                            <div x-show="open" @click.away="open = false"
                                class="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg max-h-60 overflow-y-auto">
                                @foreach($facilitators as $facilitator)
                                <div class="cursor-pointer p-2 hover:bg-gray-100" @click="selectedId = '{{ $facilitator->id }}';
                                            selectedText = '{{ $facilitator->first_name }} {{ $facilitator->last_name }}';
                                            open = false">
                                    {{ $facilitator->first_name }} {{ $facilitator->last_name }}
                                </div>
                                @endforeach
                            </div>
                        </div>
                    </div>

                    <!-- Venue Selection -->
                    <div class="mb-4"
                        x-data="{ open: false, selectedId: '{{ $event->venue_id }}', selectedText: '{{ $event->venue->venue_name }}' }">
                        <label for="venue_id" class="block text-gray-700 font-bold mb-2">Venue</label>
                        <div class="relative">
                            <input type="text" x-model="selectedText" @click="open = true" @focus="open = true"
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                                readonly>
                            <input type="hidden" name="venue_id" :value="selectedId">
                            <div x-show="open" @click.away="open = false"
                                class="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg max-h-60 overflow-y-auto">
                                @foreach($venues as $venue)
                                <div class="cursor-pointer p-2 hover:bg-gray-100" @click="selectedId = '{{ $venue->id }}';
                                            selectedText = '{{ $venue->venue_name }}';
                                            open = false">
                                    {{ $venue->venue_name }}
                                </div>
                                @endforeach
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Second row - Date fields -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <!-- Date From -->
                    <div class="mb-4">
                        <label for="datefrom" class="block text-gray-700 font-bold mb-2">Date From</label>
                        <input type="text" id="datefrom" name="datefrom" value="{{ $event->datefrom }}"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            required>
                    </div>

                    <!-- Date To -->
                    <div class="mb-4">
                        <label for="dateto" class="block text-gray-700 font-bold mb-2">Date To</label>
                        <input type="text" id="dateto" name="dateto" value="{{ $event->dateto }}"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            required>
                    </div>
                </div>

                <!-- Third row - Time fields -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Time From -->
                    <div class="mb-4" x-data="{ open: false, selectedTime: '{{ $event->timefrom }}' }">
                        <label for="timefrom" class="block text-gray-700 font-bold mb-2">Time From</label>
                        <div class="relative">
                            <input type="text" x-model="selectedTime" @click="open = true"
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                                name="timefrom" readonly>
                            <div x-show="open" @click.away="open = false"
                                class="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg max-h-60 overflow-y-auto">
                                @for ($hour = 6; $hour <= 22; $hour++) @foreach(['00', '30' ] as $minute) <div
                                    class="cursor-pointer p-2 hover:bg-gray-100"
                                    @click="selectedTime = '{{ sprintf('%02d', $hour) }}:{{ $minute }}'; open = false">
                                    {{ sprintf('%02d', $hour) }}:{{ $minute }}
                            </div>
                            @endforeach
                            @endfor
                        </div>
                    </div>
                </div>

                <!-- Time To -->
                <div class="mb-4" x-data="{ open: false, selectedTime: '{{ $event->timeto }}' }">
                    <label for="timeto" class="block text-gray-700 font-bold mb-2">Time To</label>
                    <div class="relative">
                        <input type="text" x-model="selectedTime" @click="open = true"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            name="timeto" readonly>
                        <div x-show="open" @click.away="open = false"
                            class="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg max-h-60 overflow-y-auto">
                            @for ($hour = 6; $hour <= 22; $hour++) @foreach(['00', '30' ] as $minute) <div
                                class="cursor-pointer p-2 hover:bg-gray-100"
                                @click="selectedTime = '{{ sprintf('%02d', $hour) }}:{{ $minute }}'; open = false">
                                {{ sprintf('%02d', $hour) }}:{{ $minute }}
                        </div>
                        @endforeach
                        @endfor
                    </div>
                </div>
        </div>
    </div>

    <!-- Remarks -->
    <div class="mb-4">
        <label for="remarks" class="block text-gray-700 font-bold mb-2">Remarks</label>
        <textarea id="remarks" name="remarks"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200 h-32">{{ $event->remarks }}</textarea>
    </div>

    <!-- Submit and Cancel buttons -->
    <div class="flex justify-between items-center mt-6">
        <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600">
            Update Event
        </button>
        <a href="{{ route('events.show', $event->id) }}"
            class="bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600">
            Cancel
        </a>
    </div>
    </form>
    </div>
    </div>

    <!-- Include Pikaday CSS and JS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/pikaday/css/pikaday.css">
    <script src="https://cdn.jsdelivr.net/npm/pikaday/pikaday.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            ['datefrom', 'dateto'].forEach(function(fieldId) {
                new Pikaday({
                    field: document.getElementById(fieldId),
                    format: 'YYYY-MM-DD',
                    showYearDropdown: true,
                    showMonthDropdown: true,
                    toString(date, format) {
                        date.setHours(12, 0, 0, 0);
                        return date ? date.toISOString().split('T')[0] : '';
                    },
                    parse(dateString, format) {
                        const parts = dateString.split('-');
                        return dateString ? new Date(parts[0], parts[1] - 1, parts[2]) : null;
                    },
                    onSelect: function(date) {
                        date.setHours(12, 0, 0, 0);
                        this._field.value = date.toISOString().split('T')[0];
                    }
                });
            });
        });
    </script>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\events\index.blade.php
॥๛॥
@props(['direction' => 'asc'])

<x-layout>
    <x-slot:heading>
        ATB Calendar Events
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold mb-0 mt-1">Events (Calendar) List</h1>
            <a href="{{ route('events.create') }}"
                class="mb-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Create New Event
            </a>
        </div>

        <!-- Wrapping the table inside a div to make it horizontally scrollable -->
        <div class="relative overflow-x-auto">
            <table class="min-w-full table-auto border-collapse border border-gray-300">
                <thead class="bg-gray-100">
                    <tr>
                        <!-- Action column -->
                        <th class="border px-4 py-2 sticky left-0 bg-gray-100 z-10">
                            Action
                        </th>
                        <th class="border px-4 py-2">
                            <a
                                href="{{ route('events.index', ['sort_by' => 'course_title', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                Course Title
                                @if ($sort_by === 'course_title')
                                <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                @endif
                            </a>
                        </th>
                        <th class="border px-4 py-2">
                            <a
                                href="{{ route('events.index', ['sort_by' => 'facilitator_name', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                Facilitator Name
                                @if ($sort_by === 'facilitator_name')
                                <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                @endif
                            </a>
                        </th>
                        <th class="border px-4 py-2">
                            <a
                                href="{{ route('events.index', ['sort_by' => 'participant_count', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                Participant Count
                                @if ($sort_by === 'participant_count')
                                <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                @endif
                            </a>
                        </th>
                        <th class="border px-4 py-2">
                            <a
                                href="{{ route('events.index', ['sort_by' => 'datefrom', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                Start Date
                                @if ($sort_by === 'datefrom')
                                <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                @endif
                            </a>
                        </th>
                        <th class="border px-4 py-2">
                            <a
                                href="{{ route('events.index', ['sort_by' => 'dateto', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                End Date
                                @if ($sort_by === 'dateto')
                                <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                @endif
                            </a>
                        </th>
                        <th class="border px-4 py-2">Venue</th>
                        <th class="border px-4 py-2">City</th>
                        <th class="border px-4 py-2">State</th>
                        <th class="border px-4 py-2">Country</th>
                        <th class="border px-4 py-2">Remarks</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach ($events as $event)
                    <tr class="hover:bg-gray-100 registration-row">
                        <!-- Action column with sticky left positioning -->
                        <td class="border px-4 py-2 sticky left-0 bg-white z-10">
                            <a href="{{ route('events.show', $event->id) }}" class="text-blue-600 hover:underline">
                                View
                            </a>
                        </td>
                        <td class="border px-4 py-2 whitespace-nowrap">
                            {{ $event->course->course_title }}
                        </td>
                        <td class="border px-4 py-2 whitespace-nowrap">
                            {{ $event->facilitator->first_name }} {{ $event->facilitator->last_name }}
                        </td>
                        <td class="border px-4 py-2 whitespace-nowrap">
                            {{ $event->participant_count }}
                        </td>
                        <td class="border px-4 py-2 whitespace-nowrap">
                            {{ $event->datefrom }}
                        </td>
                        <td class="border px-4 py-2 whitespace-nowrap">
                            {{ $event->dateto ?? 'N/A' }}
                        </td>
                        <td class="border px-4 py-2 whitespace-nowrap">{{ $event->venue }}</td>
                        <td class="border px-4 py-2 whitespace-nowrap">{{ $event->city }}</td>
                        <td class="border px-4 py-2 whitespace-nowrap">{{ $event->state }}</td>
                        <td class="border px-4 py-2 whitespace-nowrap">{{ $event->country }}</td>
                        <td class="border px-4 py-2 whitespace-nowrap">
                            {{ $event->remarks ?? 'No remarks' }}
                        </td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="mt-4">
            {{ $events->appends(request()->input())->links() }}
        </div>
    </div>

</x-layout>
॥๛॥
/ATB_Fresh/resources\views\events\show.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Event Details
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <!-- Flash Message Component -->
        @livewire('flash-message')

        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold">{{ $event->title }}</h1>
            <div class="space-x-4">
                <button type="button" x-data @click="$dispatch('open-modal', 'add-participant')"
                    class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                    Add Participant
                </button>
                <a href="{{ route('events.edit', $event->id) }}"
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Edit Event
                </a>
            </div>
        </div>

        <!-- Event Details -->
        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <h1 class="text-3xl font-bold mb-4">{{ $event->course->course_title }}</h1>

            <p class="text-lg mb-2">
                <strong>Date:</strong> {{ $event->datefrom }} to {{ $event->dateto ?? 'N/A' }}
            </p>
            <p class="text-lg mb-4">
                <strong>Facilitator:</strong> {{ $event->facilitator->first_name }} {{ $event->facilitator->last_name }}
            </p>
        </div>

        <!-- Participants List -->
        @livewire('participants-list', ['event' => $event])
    </div>

    <!-- Add Participant Modal -->
    <x-modal name="add-participant" :show="false" focusable>
        <div class="p-6">
            <h2 class="text-lg font-medium text-gray-900 mb-4">
                Add Participant to Event
            </h2>
            @livewire('student-search', ['event' => $event])
        </div>
    </x-modal>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\facilitators\create.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Create New Facilitator
    </x-slot:heading>

    <div class="container mx-auto p-4">

        <div class="flex justify-between items-center mb-4">
            <h1 class="text-3xl font-bold mb-4">Create New Facilitator</h1>
        </div>

        @if ($errors->any())
        <div class="bg-red-100 text-red-800 p-4 mb-4 rounded">
            <ul>
                @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
        @endif

        <form action="{{ route('facilitators.store') }}" method="POST"
            class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            @csrf

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- First Name -->
                <div class="mb-4">
                    <label for="first_name" class="block text-gray-700 font-medium mb-2">First Name</label>
                    <input type="text" name="first_name" id="first_name"
                        class="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required>
                </div>

                <!-- Last Name -->
                <div class="mb-4">
                    <label for="last_name" class="block text-gray-700 font-medium mb-2">Last Name</label>
                    <input type="text" name="last_name" id="last_name"
                        class="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required>
                </div>

                <!-- Email -->
                <div class="mb-4">
                    <label for="email" class="block text-gray-700 font-medium mb-2">Email</label>
                    <input type="email" name="email" id="email"
                        class="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required>
                </div>

                <!-- Phone Number -->
                <div class="mb-4">
                    <label for="phone_number" class="block text-gray-700 font-medium mb-2">Phone Number</label>
                    <input type="text" name="phone_number" id="phone_number"
                        class="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>

                <!-- Date of Birth -->
                <div class="mb-6">
                    <label for="dob" class="block text-gray-700 font-medium mb-2">Date of Birth</label>
                    <input type="text" name="dob" id="dob" {{--
                        value="{{ old('dob', $facilitator->dob ? \Carbon\Carbon::parse($facilitator->dob)->format('Y-m-d') : '') }}"
                        --}}
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        required>
                </div>

                <!-- Address -->
                <div class="mb-4">
                    <label for="address" class="block text-gray-700 font-medium mb-2">Address</label>
                    <input type="text" name="address" id="address"
                        class="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>

                <!-- City -->
                <div class="mb-4">
                    <label for="city" class="block text-gray-700 font-medium mb-2">City</label>
                    <input type="text" name="city" id="city"
                        class="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>

                <!-- State -->
                <div class="mb-4">
                    <label for="state" class="block text-gray-700 font-medium mb-2">State</label>
                    <input type="text" name="state" id="state"
                        class="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>

                <!-- Country -->
                <div class="mb-4">
                    <label for="country" class="block text-gray-700 font-bold mb-2">Country</label>
                    <select name="country" id="country"
                        class="form-control shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                        value="{{ old('country') }} required">
                        <option value="">Select a country</option>
                        @foreach($countries as $country)
                        <option value="{{ $country['name'] }}">{{ $country['name'] }}</option>
                        @endforeach
                    </select>
                </div>

                <!-- Post Code -->
                <div class="mb-6">
                    <label for="post_code" class="block text-gray-700 font-medium mb-2">Post Code</label>
                    <input type="text" name="post_code" id="post_code"
                        class="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>

                <!-- Website -->
                <div class="mb-6">
                    <label for="website" class="block text-gray-700 font-medium mb-2">Website</label>
                    <input type="text" name="website" id="website"
                        class="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
            </div>
            <!-- Submit and Cancel buttons -->
            <div class="flex justify-between items-center mt-3">
                <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600">
                    Create Facilitator
                </button>
                <a href="{{ route('facilitators.index') }}"
                    class="bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600">
                    Cancel
                </a>
            </div>
        </form>
    </div>

    <!-- Include Pikaday CSS and JS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/pikaday/css/pikaday.css">
    <script src="https://cdn.jsdelivr.net/npm/pikaday/pikaday.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var currentYear = new Date().getFullYear();
            var minBirthYear = currentYear - 100; // Assuming a maximum age of 100 years
            var maxBirthYear = currentYear - 18;  // Assuming a minimum age of 18 years

            var picker = new Pikaday({
                field: document.getElementById('dob'),
                format: 'YYYY-MM-DD',yearRange: [minBirthYear, maxBirthYear],
                yearRange: [minBirthYear, maxBirthYear],
                maxDate: new Date(maxBirthYear, 11, 31),
                minDate: new Date(minBirthYear, 0, 1),
                defaultDate: new Date(maxBirthYear, 0, 1),
                showYearDropdown: true,
                showMonthDropdown: true,
                // Allow the field to be cleared
                setDefaultDate: false,
                toString(date, format) {
                    date.setHours(12, 0, 0, 0);
                    return date ? date.toISOString().split('T')[0] : '';
                },
                parse(dateString, format) {
                    const parts = dateString.split('-');
                    return dateString ? new Date(parts[0], parts[1] - 1, parts[2], 12, 0, 0) : null;
                },
                onSelect: function(date) {
                    date.setHours(12, 0, 0, 0);
                    this._field.value = date.toISOString().split('T')[0];
                },
            });
        });
    </script>

</x-layout>
॥๛॥
/ATB_Fresh/resources\views\facilitators\edit.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Edit Facilitator
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <!-- Flex container for title and buttons -->
        <div class="flex justify-between items-center mb-4">
            <h1 class="text-2xl font-bold mb-6">Edit Facilitator</h1>

            {{-- <div>
                <button type="submit" form="edit-facilitator-form"
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Update Facilitator
                </button>
            </div> --}}
        </div>

        <form id="edit-facilitator-form" action="{{ route('facilitators.update', $facilitator->id) }}" method="POST"
            class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            @csrf
            @method('PUT')

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">

                <div class="mb-4">
                    <label for="first_name" class="block text-gray-700 font-bold mb-2">First Name</label>
                    <input type="text" name="first_name" id="first_name"
                        value="{{ old('first_name', $facilitator->first_name) }}"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        required>
                </div>

                <div class="mb-4">
                    <label for="last_name" class="block text-gray-700 font-bold mb-2">Last Name</label>
                    <input type="text" name="last_name" id="last_name"
                        value="{{ old('last_name', $facilitator->last_name) }}"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        required>
                </div>

                <div class="mb-4">
                    <label for="email" class="block text-gray-700 font-bold mb-2">Email</label>
                    <input type="email" name="email" id="email" value="{{ old('email', $facilitator->email) }}"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        required>
                </div>

                <div class="mb-4">
                    <label for="phone_number" class="block text-gray-700 font-bold mb-2">Phone Number</label>
                    <input type="text" name="phone_number" id="phone_number"
                        value="{{ old('phone_number', $facilitator->phone_number) }}"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>

                <div class="mb-4">
                    <label for="dob" class="block text-gray-700 font-bold mb-2">Date of Birth</label>
                    <input type="text" name="dob" id="dob"
                        value="{{ old('dob', \Carbon\Carbon::parse($facilitator->dob)->format('Y-m-d')) }}"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        required>
                </div>

                <div class="mb-4">
                    <label for="address" class="block text-gray-700 font-bold mb-2">Address</label>
                    <input type="text" name="address" id="address" value="{{ old('address', $facilitator->address) }}"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>

                <div class="mb-4">
                    <label for="city" class="block text-gray-700 font-bold mb-2">City</label>
                    <input type="text" name="city" id="city" value="{{ old('city', $facilitator->city) }}"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>

                <div class="mb-4">
                    <label for="state" class="block text-gray-700 font-bold mb-2">State</label>
                    <input type="text" name="state" id="state" value="{{ old('state', $facilitator->state) }}"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>

                <div class="mb-4">
                    <label for="country" class="block text-gray-700 font-bold mb-2">Country</label>
                    <select name="country" id="country"
                        class="form-control shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                        required>
                        @foreach($countries as $country)
                        <option value="{{ $country['name'] }}" {{ old('country', $facilitator->country) ==
                            $country['name'] ? 'selected' : '' }}>
                            {{ $country['name'] }}
                        </option>
                        @endforeach
                    </select>
                </div>

                <div class="mb-4">
                    <label for="post_code" class="block text-gray-700 font-bold mb-2">Post Code</label>
                    <input type="text" name="post_code" id="post_code"
                        value="{{ old('post_code', $facilitator->post_code) }}"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>

                <!-- Website -->
                <div class="mb-4">
                    <label for="website" class="block text-gray-700 font-bold mb-2">Website</label>
                    <input type="text" name="website" id="website" value="{{ old('website', $facilitator->website) }}"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>
            </div>

            <div class="flex items-center justify-between">
                <button type="submit"
                    class="mt-10 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Update Facilitator
                </button>
            </div>
        </form>

        <!-- Back to facilitators list -->
        <div class="mt-5">
            <a href="{{ route('facilitators.index') }}" class="text-blue-600 hover:underline">
                ← Back to Facilitators List
            </a>
        </div>
    </div>

    <!-- Include Pikaday CSS and JS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/pikaday/css/pikaday.css">
    <script src="https://cdn.jsdelivr.net/npm/pikaday/pikaday.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var currentYear = new Date().getFullYear();
            var minBirthYear = currentYear - 100; // Assuming a maximum age of 100 years
            var maxBirthYear = currentYear - 18; // Assuming a minimum age of 18 years

            var picker = new Pikaday({
                field: document.getElementById('dob'),
                format: 'YYYY-MM-DD',
                yearRange: [minBirthYear, maxBirthYear],
                maxDate: new Date(maxBirthYear, 11, 31),
                minDate: new Date(minBirthYear, 0, 1),
                showYearDropdown: true,
                showMonthDropdown: true,
                setDefaultDate: false,
                toString(date, format) {
                    // Set the time to noon in local time
                    date.setHours(12, 0, 0, 0);
                    return date.toISOString().split('T')[0];
                },

                parse(dateString, format) {
                    const parts = dateString.split('-');
                    // Create date at noon in local time
                    return dateString ? new Date(parts[0], parts[1] - 1, parts[2]) : null;
                },

                onSelect: function(date) {
                    // Set the time to noon in local time
                    date.setHours(12, 0, 0, 0);
                    this._field.value = date.toISOString().split('T')[0];
                },
            });
        });
    </script>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\facilitators\index.blade.php
॥๛॥
@props(['direction' => 'asc'])

<x-layout>
    <x-slot:heading>
        Facilitators
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <!-- Flash Message Section -->
        @if(session('success'))
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4" role="alert">
            {{ session('success') }}
        </div>
        @endif

        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold mb-6">Facilitators List</h1>
            <a href="{{ route('facilitators.create') }}"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Create New Facilitator
            </a>
        </div>
        @if($facilitators->isEmpty())
        <p>No Facilitators available.</p>
        @else
        <table class="min-w-full table-auto border-collapse border border-gray-500">
            <thead class="bg-gray-200">
                <tr>
                    <th class="border border-gray-500 px-4 py-2 text-left text-blue-500 hover:underline">View</th>
                    <th class="border border-gray-500 px-4 py-2 text-left text-blue-500 hover:underline">First Name</th>
                    <th class="border border-gray-500 px-4 py-2 text-left text-blue-500 hover:underline">Last Name</th>
                    <th class="border border-gray-500 px-4 py-2 text-left text-blue-500 hover:underline">Email</th>
                </tr>
            </thead>
            <tbody class="bg-white">
                @foreach($facilitators as $facilitator)
                <tr class="hover:bg-sky-100 registration-row">
                    <td class="border border-gray-500 px-4 py-2">
                        <a href="{{ route('facilitators.show', $facilitator->id) }}"
                            class="text-blue-600 hover:underline">View</a>
                    </td>
                    <td class="border border-gray-500 px-4 py-2">{{ $facilitator->first_name }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $facilitator->last_name }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $facilitator->email }}</td>
                </tr>
                @endforeach
            </tbody>
        </table>
        @endif
    </div>

</x-layout>
॥๛॥
/ATB_Fresh/resources\views\facilitators\show.blade.php
॥๛॥
<x-layout>

    <x-slot:heading>
        Facilitator Details
    </x-slot:heading>


    <div class="container mx-auto p-4">
        <!-- Flex container for title and delete button -->
        <div class="flex justify-between items-center mb-4">

            <!-- Facilitator Name -->
            <h1 class="text-3xl font-bold mb-4">{{ $facilitator->first_name }} {{ $facilitator->last_name }}</h1>

            <!-- Delete Button ... will only show if there are no events for this facilitator -->
            @if($facilitator->events->isEmpty())
            <form action="{{ route('facilitators.destroy', $facilitator->id) }}" method="POST" class="top-0 right-0">
                @csrf
                @method('DELETE')
                <button type="submit" class="bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700"
                    onclick="return confirm('Are you sure you want to delete this facilitator?');">
                    Delete Facilitator
                </button>
            </form>
            @endif

            <a href="{{ route('facilitators.edit', $facilitator->id) }}"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">
                Edit Facilitator
            </a>
        </div>

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- First Name -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">First Name</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $facilitator->first_name }}
                    </p>
                </div>

                <!-- Last Name -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Last Name</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $facilitator->last_name }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Email -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Email</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $facilitator->email }}
                    </p>
                </div>

                <!-- Phone Number -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Phone Number</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $facilitator->phone_number ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Date of Birth -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Date of Birth</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ \Carbon\Carbon::parse($facilitator->dob)->format('Y-m-d') ?? 'N/A' }}
                    </p>
                </div>

                <!-- Address -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Address</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $facilitator->address ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- City -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">City</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $facilitator->city ?? 'N/A' }}
                    </p>
                </div>

                <!-- State -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">State</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $facilitator->state ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Country -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Country</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $facilitator->country ?? 'N/A' }}
                    </p>
                </div>

                <!-- Post Code -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Post Code</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $facilitator->post_code ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Website -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Website</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $facilitator->website ?? 'N/A' }}
                    </p>
                </div>
            </div>
        </div>

        @if($facilitator->events->isNotEmpty())
        <div class="mb-6 mt-10">
            <h2 class="text-2xl text-blue-700 font-semibold">Past and Future Courses</h2></br>

            <table class="min-w-full table-auto border-collapse border border-gray-300">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="border px-4 py-2">Course Title</th>
                        <th class="border px-4 py-2">Event Title</th>
                        <th class="border px-4 py-2">Start Date</th>
                        <th class="border px-4 py-2">End Date</th>
                        <th class="border px-4 py-2">Venue</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($facilitator->events as $event)
                    <tr class="hover:bg-gray-100">
                        <td class="border px-4 py-2">{{ $event->course->course_title }}</td>
                        <td class="border px-4 py-2">{{ $event->title }}</td>
                        <td class="border px-4 py-2">{{ $event->datefrom }}</td>
                        <td class="border px-4 py-2">{{ $event->dateto }}</td>
                        <td class="border px-4 py-2">{{ $event->venue }}</td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
        @else
        <p>This Facilitator has not taught any courses yet.</p>
        @endif

        <!-- Back to facilitators list -->
        <div class="mt-4">
            <a href="{{ route('facilitators.index') }}" class="text-blue-600 hover:underline">
                ← Back to Facilitators List
            </a>
        </div>
    </div>

</x-layout>

॥๛॥
/ATB_Fresh/resources\views\layouts\app.blade.php
॥๛॥
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="h-full bg-gray-100">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'Laravel') }}</title>

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Scripts -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>

<body class="h-full antialiased">
    <div class="min-h-full bg-slate-200">
        <nav class="bg-gray-800">
            <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                <div class="flex h-16 items-center justify-between">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <img class="h-8 w-8" src="https://laracasts.com/images/logo/logo-triangle.svg"
                                alt="Your Company">
                        </div>
                        <div class="hidden md:block">
                            <div class="ml-10 flex items-baseline space-x-4">
                                <div class="relative" x-data="{ open: false }">
                                    <x-nav-link @click="open = !open" :active="request()->is('/')"
                                        class="cursor-pointer">
                                        Home
                                        <svg class="ml-1 h-4 w-4 inline-block" xmlns="http://www.w3.org/2000/svg"
                                            viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd"
                                                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                                clip-rule="evenodd" />
                                        </svg>
                                    </x-nav-link>

                                    <div x-show="open" @click.away="open = false"
                                        class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                                        <a href="#"
                                            class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Option 1</a>
                                        <a href="#"
                                            class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Option 2</a>
                                    </div>
                                </div>

                                <div class="relative" x-data="{ open: false }">
                                    <x-nav-link @click="open = !open" :active="request()->is('students')"
                                        class="cursor-pointer">
                                        ATB Students
                                        <svg class="ml-1 h-4 w-4 inline-block" xmlns="http://www.w3.org/2000/svg"
                                            viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd"
                                                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                                clip-rule="evenodd" />
                                        </svg>
                                    </x-nav-link>

                                    <div x-show="open" @click.away="open = false"
                                        class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">View
                                            All Students</a>
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Add
                                            New Student</a>
                                    </div>
                                </div>

                                <div class="relative" x-data="{ open: false }">
                                    <x-nav-link @click="open = !open" :active="request()->is('registrations')"
                                        class="cursor-pointer">
                                        ATB Course Registrations
                                        <svg class="ml-1 h-4 w-4 inline-block" xmlns="http://www.w3.org/2000/svg"
                                            viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd"
                                                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                                clip-rule="evenodd" />
                                        </svg>
                                    </x-nav-link>

                                    <div x-show="open" @click.away="open = false"
                                        class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">View
                                            All Registrations</a>
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Add
                                            New Registration</a>
                                    </div>
                                </div>

                                <div class="relative" x-data="{ open: false }">
                                    <x-nav-link @click="open = !open" :active="request()->is('events')"
                                        class="cursor-pointer">
                                        ATB Calendar Events
                                        <svg class="ml-1 h-4 w-4 inline-block" xmlns="http://www.w3.org/2000/svg"
                                            viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd"
                                                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                                clip-rule="evenodd" />
                                        </svg>
                                    </x-nav-link>

                                    <div x-show="open" @click.away="open = false"
                                        class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">View
                                            All Events</a>
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Add
                                            New Event</a>
                                    </div>
                                </div>

                                <div class="relative" x-data="{ open: false }">
                                    <x-nav-link @click="open = !open" :active="request()->is('venues')"
                                        class="cursor-pointer">
                                        ATB Venues
                                        <svg class="ml-1 h-4 w-4 inline-block" xmlns="http://www.w3.org/2000/svg"
                                            viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd"
                                                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                                clip-rule="evenodd" />
                                        </svg>
                                    </x-nav-link>

                                    <div x-show="open" @click.away="open = false"
                                        class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">View
                                            All Venues</a>
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Add
                                            New Venue</a>
                                    </div>
                                </div>

                                <div class="relative" x-data="{ open: false }">
                                    <x-nav-link @click="open = !open" :active="request()->is('courses')"
                                        class="cursor-pointer">
                                        Courses
                                        <svg class="ml-1 h-4 w-4 inline-block" xmlns="http://www.w3.org/2000/svg"
                                            viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd"
                                                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                                clip-rule="evenodd" />
                                        </svg>
                                    </x-nav-link>

                                    <div x-show="open" @click.away="open = false"
                                        class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">View
                                            All Courses</a>
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Add
                                            New Course</a>
                                    </div>
                                </div>

                                <div class="relative" x-data="{ open: false }">
                                    <x-nav-link @click="open = !open" :active="request()->is('facilitators')"
                                        class="cursor-pointer">
                                        Facilitators
                                        <svg class="ml-1 h-4 w-4 inline-block" xmlns="http://www.w3.org/2000/svg"
                                            viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd"
                                                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                                clip-rule="evenodd" />
                                        </svg>
                                    </x-nav-link>

                                    <div x-show="open" @click.away="open = false"
                                        class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">View
                                            All Facilitators</a>
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Add
                                            New Facilitator</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @auth
                    <div class="hidden md:block">
                        <div class="ml-4 flex items-center md:ml-6">
                            <!-- Profile dropdown -->
                            <div class="relative ml-3" x-data="{ open: false }">
                                <div>
                                    <button @click="open = !open" type="button"
                                        class="relative flex max-w-xs items-center rounded-full bg-gray-800 text-sm text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800"
                                        id="user-menu-button">
                                        <span class="absolute -inset-1.5"></span>
                                        <span class="sr-only">Open user menu</span>
                                        <img class="h-8 w-8 rounded-full"
                                            src="https://laracasts.com/images/lary-ai-face.svg" alt="">
                                    </button>
                                </div>

                                <div x-show="open" @click.away="open = false"
                                    class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5"
                                    role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button"
                                    tabindex="-1" style="display: none;">

                                    @if(!request()->routeIs('dashboard'))
                                    <a href="{{ route('dashboard') }}"
                                        class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Dashboard</a>
                                    @endif

                                    @if(!request()->routeIs('profile.edit'))
                                    <a href="{{ route('profile.edit') }}"
                                        class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Profile</a>
                                    @endif

                                    <form method="POST" action="{{ route('logout') }}">
                                        @csrf
                                        <button type="submit"
                                            class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                            Log Out
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                    @endauth

                    <!-- Mobile menu button -->
                    <div class="-mr-2 flex md:hidden">
                        <button type="button" @click="open = !open"
                            class="relative inline-flex items-center justify-center rounded-md bg-gray-800 p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800"
                            aria-controls="mobile-menu" aria-expanded="false">
                            <span class="absolute -inset-0.5"></span>
                            <span class="sr-only">Open main menu</span>
                            <svg class="block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Mobile menu -->
            <div class="md:hidden" id="mobile-menu" x-show="open" style="display: none;">
                <div class="space-y-1 px-2 pb-3 pt-2 sm:px-3">
                    <x-responsive-nav-link href="/" :active="request()->is('/')">Home</x-responsive-nav-link>
                    <x-responsive-nav-link href="/students" :active="request()->is('students')">ATB Students
                    </x-responsive-nav-link>
                    <x-responsive-nav-link href="/registrations" :active="request()->is('registrations')">ATB Course
                        Registrations</x-responsive-nav-link>
                    <x-responsive-nav-link href="/events" :active="request()->is('events')">ATB Calendar Events
                    </x-responsive-nav-link>
                    <x-responsive-nav-link href="/venues" :active="request()->is('venues')">ATB Venues
                    </x-responsive-nav-link>
                    <x-responsive-nav-link href="/courses" :active="request()->is('courses')">Courses
                    </x-responsive-nav-link>
                    <x-responsive-nav-link href="/facilitators" :active="request()->is('facilitators')">Facilitators
                    </x-responsive-nav-link>
                </div>

                @auth
                <div class="border-t border-gray-700 pb-3 pt-4">
                    <div class="flex items-center px-5">
                        <div class="flex-shrink-0">
                            <img class="h-10 w-10 rounded-full" src="https://laracasts.com/images/lary-ai-face.svg"
                                alt="">
                        </div>
                        <div class="ml-3">
                            <div class="text-base font-medium text-white">{{ Auth::user()->name }}</div>
                            <div class="text-sm font-medium text-gray-400">{{ Auth::user()->email }}</div>
                        </div>
                    </div>
                    <div class="mt-3 space-y-1 px-2">
                        @if(!request()->routeIs('dashboard'))
                        <x-responsive-nav-link href="{{ route('dashboard') }}">Dashboard</x-responsive-nav-link>
                        @endif

                        @if(!request()->routeIs('profile.edit'))
                        <x-responsive-nav-link href="{{ route('profile.edit') }}">Profile</x-responsive-nav-link>
                        @endif

                        <form method="POST" action="{{ route('logout') }}">
                            @csrf
                            <x-responsive-nav-link href="{{ route('logout') }}" onclick="event.preventDefault();
                                                this.closest('form').submit();">
                                Log Out
                            </x-responsive-nav-link>
                        </form>
                    </div>
                </div>
                @endauth
            </div>
        </nav>

        @isset($header)
        <header class="bg-gray-400 shadow">
            <div class="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
                <h1 class="text-3xl font-bold tracking-tight text-gray-900">{{ $header }}</h1>
            </div>
        </header>
        @endisset

        <!-- Page Content -->
        <main>
            <div class="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
                {{ $slot }}
            </div>
        </main>
    </div>
</body>

</html>
॥๛॥
/ATB_Fresh/resources\views\layouts\guest.blade.php
॥๛॥
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'Laravel') }}</title>

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Scripts -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>

<body class="font-sans text-gray-900 antialiased">
    <div class="min-h-screen flex flex-col sm:justify-center items-center pt-6 sm:pt-0 bg-gray-100">
        <div>
            <a href="/">
                <x-application-logo class="w-20 h-20 fill-current text-gray-500" />
            </a>
        </div>

        <div class="w-full sm:max-w-md mt-6 px-6 py-4 bg-white shadow-md overflow-hidden sm:rounded-lg">
            {{ $slot }}
        </div>
    </div>
</body>

</html>
॥๛॥
/ATB_Fresh/resources\views\layouts\navigation.blade.php
॥๛॥
<nav x-data="{ open: false }" class="bg-white border-b border-gray-100">
    <!-- Primary Navigation Menu -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex">
                <!-- Logo -->
                <div class="shrink-0 flex items-center">
                    <a href="/">
                        <x-application-logo class="block h-9 w-auto fill-current text-gray-800" />
                    </a>
                </div>

                <!-- Navigation Links -->
                <div class="hidden space-x-8 sm:-my-px sm:ms-10 sm:flex">
                    <x-nav-link :href="route('courses.index')" :active="request()->routeIs('courses.index')">
                        {{ __('Courses') }}
                    </x-nav-link>
                    <x-nav-link :href="route('events.index')" :active="request()->routeIs('events.index')">
                        {{ __('Events') }}
                    </x-nav-link>
                    <x-nav-link :href="route('facilitators.index')" :active="request()->routeIs('facilitators.index')">
                        {{ __('Facilitators') }}
                    </x-nav-link>
                    <x-nav-link :href="route('venues.index')" :active="request()->routeIs('venues.index')">
                        {{ __('Venues') }}
                    </x-nav-link>
                </div>
            </div>

            <!-- Settings Dropdown -->
            <div class="hidden sm:flex sm:items-center sm:ms-6">
                @auth
                <div class="relative" x-data="{ open: false }">
                    <!-- Dropdown Trigger -->
                    <button @click="open = !open"
                        class="flex items-center text-sm font-medium text-gray-500 hover:text-gray-700 focus:outline-none transition duration-150 ease-in-out">
                        {{ Auth::user()->name }}
                        <div class="ms-1">
                            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path fill-rule="evenodd"
                                    d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                    clip-rule="evenodd" />
                            </svg>
                        </div>
                    </button>

                    <!-- Dropdown Menu -->
                    <div x-show="open" @click.away="open = false"
                        class="absolute right-0 mt-2 w-48 py-1 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5"
                        style="display: none;">
                        @if(!request()->routeIs('dashboard'))
                        <a href="{{ route('dashboard') }}"
                            class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                            Dashboard
                        </a>
                        @endif

                        @if(!request()->routeIs('profile.edit'))
                        <a href="{{ route('profile.edit') }}"
                            class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                            Profile
                        </a>
                        @endif

                        <form method="POST" action="{{ route('logout') }}">
                            @csrf
                            <button type="submit"
                                class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                Log Out
                            </button>
                        </form>
                    </div>
                </div>
                @else
                <div class="space-x-4">
                    <a href="{{ route('login') }}" class="text-sm text-gray-700 hover:text-gray-900">Log in</a>
                    <a href="{{ route('register') }}" class="text-sm text-gray-700 hover:text-gray-900">Register</a>
                </div>
                @endauth
            </div>

            <!-- Hamburger -->
            <div class="-me-2 flex items-center sm:hidden">
                <button @click="open = ! open"
                    class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 focus:text-gray-500 transition duration-150 ease-in-out">
                    <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path :class="{'hidden': open, 'inline-flex': ! open }" class="inline-flex"
                            stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M4 6h16M4 12h16M4 18h16" />
                        <path :class="{'hidden': ! open, 'inline-flex': open }" class="hidden" stroke-linecap="round"
                            stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Responsive Navigation Menu -->
    <div :class="{'block': open, 'hidden': ! open}" class="hidden sm:hidden">
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('courses.index')" :active="request()->routeIs('courses.index')">
                {{ __('Courses') }}
            </x-responsive-nav-link>
            <x-responsive-nav-link :href="route('events.index')" :active="request()->routeIs('events.index')">
                {{ __('Events') }}
            </x-responsive-nav-link>
            <x-responsive-nav-link :href="route('facilitators.index')"
                :active="request()->routeIs('facilitators.index')">
                {{ __('Facilitators') }}
            </x-responsive-nav-link>
            <x-responsive-nav-link :href="route('venues.index')" :active="request()->routeIs('venues.index')">
                {{ __('Venues') }}
            </x-responsive-nav-link>
        </div>

        @auth
        <!-- Responsive Settings Options -->
        <div class="pt-4 pb-1 border-t border-gray-200">
            <div class="px-4">
                <div class="font-medium text-base text-gray-800">{{ Auth::user()->name }}</div>
                <div class="font-medium text-sm text-gray-500">{{ Auth::user()->email }}</div>
            </div>

            <div class="mt-3 space-y-1">
                @if(!request()->routeIs('dashboard'))
                <x-responsive-nav-link :href="route('dashboard')">
                    {{ __('Dashboard') }}
                </x-responsive-nav-link>
                @endif

                @if(!request()->routeIs('profile.edit'))
                <x-responsive-nav-link :href="route('profile.edit')">
                    {{ __('Profile') }}
                </x-responsive-nav-link>
                @endif

                <!-- Authentication -->
                <form method="POST" action="{{ route('logout') }}" class="w-full">
                    @csrf
                    <button type="submit" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                        {{ __('Log Out') }}
                    </button>
                </form>
            </div>
        </div>
        @else
        <div class="pt-4 pb-1 border-t border-gray-200">
            <div class="space-y-1">
                <x-responsive-nav-link :href="route('login')">
                    {{ __('Log in') }}
                </x-responsive-nav-link>
                <x-responsive-nav-link :href="route('register')">
                    {{ __('Register') }}
                </x-responsive-nav-link>
            </div>
        </div>
        @endauth
    </div>
</nav>
॥๛॥
/ATB_Fresh/resources\views\livewire\student-search.blade.php
॥๛॥
<div class="p-6 max-h-[80vh] overflow-y-auto relative">
    <x-data="{ searchInput: '' , resetSearch() { this.searchInput='' ; @this.message='' ; } }"
        @init-search.window="resetSearch" @close-modal.window="if ($event.detail === 'add-participant') resetSearch()">

        @if($message)
        <div
            class="mb-4 p-4 rounded {{ str_contains($message, 'successfully') ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700' }}">
            {{ $message }}
        </div>
        @endif

        <label for="search" class="block text-gray-700 font-bold mb-2">Select Student</label>
        <div class="relative" x-data="{ searchInput: '' }" @init-search.window="searchInput = ''">
            <input type="text" id="search" wire:model.live="search" x-model="searchInput"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none"
                placeholder="Start typing student name..." autocomplete="off">

            @if($showDropdown && $students->isNotEmpty())
            <div class="absolute w-full mt-1 bg-white rounded-md shadow-xl overflow-y-auto border border-gray-200 relative z-50"
                style="max-height: calc(80vh - 250px);">
                <div class="relative z-50 bg-white">
                    @foreach($students as $student)
                    <div wire:key="student-{{ $student->id }}"
                        wire:click="selectStudent({{ $student->id }}, '{{ $student->first_name }}', '{{ $student->last_name }}')"
                        x-on:click="searchInput = '{{ $student->first_name }} {{ $student->last_name }}'"
                        class="cursor-pointer p-2 hover:bg-gray-100 transition duration-150 bg-white relative z-50">
                        {{ $student->first_name }} {{ $student->last_name }}
                    </div>
                    @endforeach
                </div>
            </div>
            @endif

            @if($selectedId)
            <button type="button" wire:click="clearSelection"
                class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700">
                ×
            </button>
            @endif
        </div>


        <div class="mt-4 flex items-center space-x-3">
            <button type="button" wire:click="addParticipant"
                class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition duration-150 disabled:opacity-50 disabled:cursor-not-allowed"
                @if(!$selectedId) disabled @endif>
                Add Participant
            </button>
            <button type="button" @click="$dispatch('close-modal', 'add-participant')"
                class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition duration-150">
                Cancel
            </button>
        </div>
</div>
॥๛॥
/ATB_Fresh/resources\views\livewire\participants-list.blade.php
॥๛॥
<div>
    @if($registrations->isNotEmpty())
    <div class="mt-8">
        <h2 class="text-2xl font-bold mb-4">Participants</h2>
        <table class="min-w-full table-auto border-collapse border border-gray-500">
            <thead class="bg-gray-200 text-left">
                <tr>
                    <th class="border px-4 py-2">Name</th>
                    <th class="border px-4 py-2">Email</th>
                    <th class="border px-4 py-2">Status</th>
                    <th class="border px-4 py-2">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach($registrations as $registration)
                <tr class="hover:bg-gray-100">
                    <td class="border px-4 py-2">
                        {{ $registration->student->first_name }} {{ $registration->student->last_name }}
                    </td>
                    <td class="border px-4 py-2">{{ $registration->student->email }}</td>
                    <td class="border px-4 py-2">{{ $registration->end_status }}</td>
                    <td class="border px-4 py-2">
                        <div class="flex items-center space-x-3">
                            <a href="{{ route('registrations.show', $registration->id) }}"
                                class="text-blue-600 hover:underline">View</a>
                            <button type="button" wire:click="deleteRegistration({{ $registration->id }})"
                                wire:confirm="Are you sure you want to remove this participant from the event?"
                                wire:loading.attr="disabled" wire:target="deleteRegistration({{ $registration->id }})"
                                class="text-red-600 hover:text-red-800 disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none">
                                <span wire:loading.remove wire:target="deleteRegistration({{ $registration->id }})">
                                    Delete
                                </span>
                                <span wire:loading wire:target="deleteRegistration({{ $registration->id }})"
                                    class="inline-flex items-center">
                                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-red-600"
                                        xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor"
                                            stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor"
                                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                                        </path>
                                    </svg>
                                    Deleting...
                                </span>
                            </button>
                        </div>
                    </td>
                </tr>
                @endforeach
            </tbody>
        </table>
    </div>
    @else
    <p class="text-lg text-gray-600 mt-4">No participants registered yet.</p>
    @endif
</div>
॥๛॥
/ATB_Fresh/resources\views\profile\edit.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        User Profile
    </x-slot:heading>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">
            <div class="p-4 sm:p-8 bg-white dark:bg-gray-800 shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-profile-information-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white dark:bg-gray-800 shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-password-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white dark:bg-gray-800 shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.delete-user-form')
                </div>
            </div>
        </div>
    </div>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\profile\partials\delete-user-form.blade.php
॥๛॥
<section class="space-y-6">
    <header>
        <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
            {{ __('Delete Account') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Before deleting your account, please download any data or information that you wish to retain.') }}
        </p>
    </header>

    <x-danger-button
        x-data=""
        x-on:click.prevent="$dispatch('open-modal', 'confirm-user-deletion')"
    >{{ __('Delete Account') }}</x-danger-button>

    <x-modal name="confirm-user-deletion" :show="$errors->userDeletion->isNotEmpty()" focusable>
        <form method="post" action="{{ route('profile.destroy') }}" class="p-6">
            @csrf
            @method('delete')

            <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                {{ __('Are you sure you want to delete your account?') }}
            </h2>

            <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
                {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.') }}
            </p>

            <div class="mt-6">
                <x-input-label for="password" value="{{ __('Password') }}" class="sr-only" />

                <x-text-input
                    id="password"
                    name="password"
                    type="password"
                    class="mt-1 block w-3/4"
                    placeholder="{{ __('Password') }}"
                />

                <x-input-error :messages="$errors->userDeletion->get('password')" class="mt-2" />
            </div>

            <div class="mt-6 flex justify-end">
                <x-secondary-button x-on:click="$dispatch('close')">
                    {{ __('Cancel') }}
                </x-secondary-button>

                <x-danger-button class="ms-3">
                    {{ __('Delete Account') }}
                </x-danger-button>
            </div>
        </form>
    </x-modal>
</section>

॥๛॥
/ATB_Fresh/resources\views\profile\partials\update-password-form.blade.php
॥๛॥
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
            {{ __('Update Password') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            {{ __('Ensure your account is using a long, random password to stay secure.') }}
        </p>
    </header>

    <form method="post" action="{{ route('password.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('put')

        <div>
            <x-input-label for="update_password_current_password" :value="__('Current Password')" />
            <x-text-input id="update_password_current_password" name="current_password" type="password" class="mt-1 block w-full" autocomplete="current-password" />
            <x-input-error :messages="$errors->updatePassword->get('current_password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password" :value="__('New Password')" />
            <x-text-input id="update_password_password" name="password" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password_confirmation" :value="__('Confirm Password')" />
            <x-text-input id="update_password_password_confirmation" name="password_confirmation" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'password-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600 dark:text-gray-400"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>

॥๛॥
/ATB_Fresh/resources\views\profile\partials\update-profile-information-form.blade.php
॥๛॥
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
            {{ __('Profile Information') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            {{ __("Update your account's profile information and email address.") }}
        </p>
    </header>

    <form id="send-verification" method="post" action="{{ route('verification.send') }}">
        @csrf
    </form>

    <form method="post" action="{{ route('profile.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('patch')

        <div>
            <x-input-label for="name" :value="__('Name')" />
            <x-text-input id="name" name="name" type="text" class="mt-1 block w-full" :value="old('name', $user->name)" required autofocus autocomplete="name" />
            <x-input-error class="mt-2" :messages="$errors->get('name')" />
        </div>

        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" name="email" type="email" class="mt-1 block w-full" :value="old('email', $user->email)" required autocomplete="username" />
            <x-input-error class="mt-2" :messages="$errors->get('email')" />

            @if ($user instanceof \Illuminate\Contracts\Auth\MustVerifyEmail && ! $user->hasVerifiedEmail())
                <div>
                    <p class="text-sm mt-2 text-gray-800 dark:text-gray-200">
                        {{ __('Your email address is unverified.') }}

                        <button form="send-verification" class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800">
                            {{ __('Click here to re-send the verification email.') }}
                        </button>
                    </p>

                    @if (session('status') === 'verification-link-sent')
                        <p class="mt-2 font-medium text-sm text-green-600 dark:text-green-400">
                            {{ __('A new verification link has been sent to your email address.') }}
                        </p>
                    @endif
                </div>
            @endif
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'profile-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600 dark:text-gray-400"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>

॥๛॥
/ATB_Fresh/resources\views\registrations\create.blade.php
॥๛॥
{{-- resources/views/registrations/create.blade.php --}}
<x-layout>
    <x-slot:heading>
        Add Participant to Event
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            @livewire('student-search', ['event' => $event])
        </div>
    </div>
</x-layout>

{{--
<livewire:student-search :eventId="$event->id" /> --}}
॥๛॥
/ATB_Fresh/resources\views\registrations\index.blade.php
॥๛॥
@props(['direction' => 'asc'])

<x-layout>
    <x-slot:heading>
        ATB Course Registrations
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Registrations List</h1>

        <!-- Wrapping the table inside a div to make it horizontally scrollable -->
        <div class="relative overflow-x-auto">
            <!-- Sticky horizontal scroll bar wrapper -->
            <div class="sticky bottom-52 overflow-x-auto">
                <table class="min-w-full table-auto border-collapse border border-gray-300">
                    <thead class="bg-gray-100">
                        <tr>
                            <!-- "Debug info" Column -->
                            {{-- <th class="sticky left-0 bg-gray-100 border px-4 py-2">
                                Debug Info
                            </th> --}}
                            <!-- Sticky "Action" Column -->
                            <th class="bg-gray-100 border px-4 py-2">
                                Action
                            </th>
                            <th class="border px-4 py-2">
                                <a
                                    href="{{ route('registrations.index', ['sort_by' => 'student_name', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                    Student Name
                                    @if ($sort_by === 'student_name')
                                    @if(request('direction') == 'asc')
                                    <i class="fa fa-sort-asc"></i>
                                    @else
                                    <i class="fa fa-sort-desc"></i>
                                    @endif
                                    @endif
                                </a>
                            </th>
                            <th class="border px-4 py-2">
                                <a
                                    href="{{ route('registrations.index', ['sort_by' => 'course_name', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                    Course Name
                                    @if ($sort_by === 'course_name')
                                    <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                    @endif
                                </a>
                            </th>
                            <th class="border px-4 py-2">
                                <a
                                    href="{{ route('registrations.index', ['sort_by' => 'id', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                    Sequence
                                    @if ($sort_by === 'id')
                                    <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                    @endif
                                </a>
                            </th>
                            <th class="border px-4 py-2">
                                <a
                                    href="{{ route('registrations.index', ['sort_by' => 'datefrom', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                    Start Date
                                    @if ($sort_by === 'datefrom')
                                    <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                    @endif
                                </a>
                            </th>
                            <th class="border px-4 py-2">
                                <a
                                    href="{{ route('registrations.index', ['sort_by' => 'dateto', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                    End Date
                                    @if ($sort_by === 'dateto')
                                    <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                    @endif
                                </a>
                            </th>
                            <th class="border px-4 py-2">
                                <a
                                    href="{{ route('registrations.index', ['sort_by' => 'facilitator_name', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                    Facilitator Name
                                    @if ($sort_by === 'facilitator_name')
                                    <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                    @endif
                                </a>
                            </th>
                            <th class="border px-4 py-2">
                                <a
                                    href="{{ route('registrations.index', ['sort_by' => 'end_status', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}">
                                    Status
                                    @if ($sort_by === 'end_status')
                                    <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                                    @endif
                                </a>
                            </th>
                            <th class="border px-4 py-2">Remarks</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach ($registrations as $registration)
                        <tr class="hover:bg-gray-100 registration-row">
                            <!-- Debug Information -->
                            {{-- <td>
                                Registration ID: {{ $registration->id }} <br>
                                Student ID: {{ $registration->student->id }} <br>
                                Student Name: {{ $registration->student->first_name }} {{
                                $registration->student->last_name
                                }}<br>
                                Course ID: {{ $registration->event->course->id }} <br>
                                Course Name: {{ $registration->event->course->course_title }} <br>
                                facilitator ID: {{ $registration->event->facilitator->id }} <br>
                                facilitator Name: {{ $registration->event->facilitator->first_name }} {{
                                $registration->event->facilitator->last_name }} <br>
                            </td> --}}
                            <!-- Sticky "View" Button -->
                            <td class="sticky left-0 bg-gray-100 border px-4 py-2">
                                <a href="{{ route('registrations.show', $registration->id) }}"
                                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded">
                                    View
                                </a>
                            </td>
                            <td class="border px-4 py-2 whitespace-nowrap">
                                {{ $registration->student->first_name }} {{ $registration->student->last_name }}
                            </td>
                            <!-- Safeguard for null event or course -->
                            <td class="border px-4 py-2 whitespace-nowrap">
                                {{ $registration->event->course->course_title ?? 'N/A' }}
                            </td>
                            <td class="border px-4 py-2 whitespace-nowrap">
                                {{ $registration->event->course->id ?? 'N/A' }}
                            </td>
                            <td class="border px-4 py-2 whitespace-nowrap">
                                {{ $registration->event->datefrom ?? 'N/A' }}
                            </td>
                            <td class="border px-4 py-2 whitespace-nowrap">
                                {{ $registration->event->dateto ?? 'N/A' }}
                            </td>
                            <td class="border px-4 py-2 whitespace-nowrap">
                                {{ $registration->event->facilitator->first_name ?? 'N/A' }} {{
                                $registration->event->facilitator->last_name ?? 'N/A' }}
                            </td>
                            <td class="border px-4 py-2 whitespace-nowrap">
                                {{ ucfirst($registration->end_status) }}
                            </td>
                            <td class="border px-4 py-2 whitespace-nowrap">
                                {{ $registration->comments ?? 'No remarks' }}
                            </td>
                        </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    <div class="mt-4">
        {{ $registrations->appends(request()->input())->links() }}
    </div>
    </div>

    {{-- <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Make horizontal scroll sticky at the bottom
            const table = document.getElementById('registrations-table');
            table.parentElement.addEventListener('scroll', function() {
                table.parentElement.scrollTop = 0; // Keep scroll locked at the top
            });
        });
    </script> --}}

</x-layout>
॥๛॥
/ATB_Fresh/resources\views\registrations\show.blade.php
॥๛॥
<x-layout>

    <x-slot:heading>
        Registration Details
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Registration Details</h1>

        <table class="min-w-full table-auto border-collapse border border-gray-300 mb-4">
            <tr class="bg-gray-100">
                <th class="border px-4 py-2">Student ID</th>
                <td class="border px-4 py-2">
                    {{ $registration->student->id }}
                </td>
            </tr>
            <tr class="bg-gray-100">
                <th class="border px-4 py-2">Registration ID</th>
                <td class="border px-4 py-2">
                    {{ $registration->id }}
                </td>
            </tr>
            <tr class="bg-gray-100">
                <th class="border px-4 py-2">Student Name</th>
                <td class="border px-4 py-2">
                    {{ $registration->student->first_name }} {{ $registration->student->last_name }}
                </td>
            </tr>
            <tr>
                <th class="border px-4 py-2">Course Name</th>
                <td class="border px-4 py-2">{{ $registration->event->course->course_title }}</td>
            </tr>
            <tr class="bg-gray-100">
                <th class="border px-4 py-2">Course Start Date</th>
                <td class="border px-4 py-2">{{ $registration->event->datefrom }}</td>
            </tr>
            <tr>
                <th class="border px-4 py-2">Course End Date</th>
                <td class="border px-4 py-2">{{ $registration->event->dateto ?? 'N/A' }}</td>
            </tr>
            <tr class="bg-gray-100">
                <th class="border px-4 py-2">
                    Facilitator Name</th>
                <td class="border px-4 py-2">
                    {{ $registration->event->facilitator->first_name }} {{
                    $registration->event->facilitator->last_name }}
                </td>
            </tr>
            <tr>
                <th class="border px-4 py-2">Registration Status</th>
                <td class="border px-4 py-2">{{ ucfirst($registration->end_status) }}</td>
            </tr>
            <tr class="bg-gray-100">
                <th class="border px-4 py-2">Remarks</th>
                <td class="border px-4 py-2">{{ $registration->comments ?? 'No remarks' }}</td>
            </tr>
        </table>

        <a href="{{ route('registrations.index') }}" class="text-blue-600 hover:underline">Back to Registrations
            List</a>
    </div>


</x-layout>
॥๛॥
/ATB_Fresh/resources\views\students\create.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Create New Student
    </x-slot:heading>

    {{-- TODO: Need to add the missing fields including dob javascript --}}

    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Create New Student</h1>

        <!-- Display validation errors, if any -->
        @if ($errors->any())
        <div class="bg-red-100 text-red-800 p-4 mb-4 rounded">
            <ul>
                @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
        @endif

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <form action="{{ route('students.store') }}" method="POST">
                @csrf

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- First Name -->
                    <div class="mb-4">
                        <label for="first_name" class="block text-gray-700 font-bold mb-2">First Name</label>
                        <input type="text" id="first_name" name="first_name"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('first_name') }}" required>
                    </div>

                    <!-- Last Name -->
                    <div class="mb-4">
                        <label for="last_name" class="block text-gray-700 font-bold mb-2">Last Name</label>
                        <input type="text" id="last_name" name="last_name"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('last_name') }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Email -->
                    <div class="mb-4">
                        <label for="email" class="block text-gray-700 font-bold mb-2">Email</label>
                        <input type="email" id="email" name="email"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('email') }}" required>
                    </div>

                    <!-- Phone Number -->
                    <div class="mb-4">
                        <label for="phone_number" class="block text-gray-700 font-bold mb-2">Phone Number</label>
                        <input type="text" id="phone_number" name="phone_number"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('phone_number') }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="mb-6">
                        <label for="dob" class="block text-gray-700 font-bold mb-2">Date of Birth</label>
                        <input type="text" name="dob" id="dob" {{--
                            value="{{ old('dob', $facilitator->dob ? \Carbon\Carbon::parse($facilitator->dob)->format('Y-m-d') : '') }}"
                            --}}
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200 focus:outline-none focus:shadow-outline"
                            required>
                    </div>

                    <!-- Address -->
                    <div class="mb-4">
                        <label for="address" class="block text-gray-700 font-bold mb-2">Address</label>
                        <input type="text" id="address" name="address"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('address') }}" required>
                    </div>

                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- City -->
                    <div class="mb-4">
                        <label for="city" class="block text-gray-700 font-bold mb-2">City</label>
                        <input type="text" id="city" name="city"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('city') }}" required>
                    </div>

                    <!-- State -->
                    <div class="mb-4">
                        <label for="state" class="block text-gray-700 font-bold mb-2">State</label>
                        <input type="text" id="state" name="state"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('state') }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">

                    <!-- Country -->
                    <div class="mb-4">
                        <label for="country" class="block text-gray-700 font-bold mb-2">Country</label>
                        <select name="country" id="country"
                            class="form-control shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('country') }} required">
                            <option value="">Select a country</option>
                            @foreach($countries as $country)
                            <option value="{{ $country['name'] }}">{{ $country['name'] }}</option>
                            @endforeach
                        </select>
                    </div>

                    <!-- Post Code -->
                    <div class="mb-4">
                        <label for="post_code" class="block text-gray-700 font-bold mb-2">Post Code</label>
                        <input type="text" id="post_code" name="post_code"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('post_code') }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Website -->
                    <div class="mb-4">
                        <label for="website" class="block text-gray-700 font-bold mb-2">Website</label>
                        <input type="text" id="website" name="website"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('website') }}">
                    </div>

                    <!-- Extra ID ... like passport number, driver's licence, social insurance number, etc. -->
                    <div class="mb-4">
                        <label for="ident" class="block text-gray-700 font-bold mb-2">Extra ID</label>
                        <input type="text" id="ident" name="ident"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('ident') }}">
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Next of kin ... who to contact in case of emergencies -->
                    <div class="mb-4">
                        <label for="next_of_kin" class="block text-gray-700 font-bold mb-2">Next of Kin</label>
                        <input type="text" id="next_of_kin" name="next_of_kin"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('next_of_kin') }}">
                    </div>

                    <!-- Allergies -->
                    <div class="mb-4">
                        <label for="allergies" class="block text-gray-700 font-bold mb-2">Allergies</label>
                        <input type="text" id="allergies" name="allergies"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('allergies') }}">
                    </div>
                </div>

                <!-- Special Needs -->
                <div class="mb-4">
                    <label for="special_needs" class="block text-gray-700 font-bold mb-2">Special Needs</label>
                    <input type="text" id="special_needs" name="special_needs"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                        value="{{ old('special_needs') }}">
                </div>

                <!-- Submit Button -->
                <div>
                    <button type="submit"
                        class="mt-7 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                        Submit
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Include Pikaday CSS and JS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/pikaday/css/pikaday.css">
    <script src="https://cdn.jsdelivr.net/npm/pikaday/pikaday.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var currentYear = new Date().getFullYear();
            var minBirthYear = currentYear - 100; // Assuming a maximum age of 100 years
            var maxBirthYear = currentYear - 18;  // Assuming a minimum age of 18 years

            var picker = new Pikaday({
                field: document.getElementById('dob'),
                format: 'YYYY-MM-DD',yearRange: [minBirthYear, maxBirthYear],
                yearRange: [minBirthYear, maxBirthYear],
                maxDate: new Date(maxBirthYear, 11, 31),
                minDate: new Date(minBirthYear, 0, 1),
                defaultDate: new Date(maxBirthYear, 0, 1),
                showYearDropdown: true,
                showMonthDropdown: true,
                // Allow the field to be cleared
                setDefaultDate: false,
                toString(date, format) {
                    date.setHours(12, 0, 0, 0);
                    return date ? date.toISOString().split('T')[0] : '';
                },
                parse(dateString, format) {
                    const parts = dateString.split('-');
                    return dateString ? new Date(parts[0], parts[1] - 1, parts[2], 12, 0, 0) : null;
                },
                onSelect: function(date) {
                    date.setHours(12, 0, 0, 0);
                    this._field.value = date.toISOString().split('T')[0];
                },
            });
        });
    </script>

</x-layout>
॥๛॥
/ATB_Fresh/resources\views\students\edit.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Edit Student
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Edit Student</h1>

        <!-- Display validation errors, if any -->
        @if ($errors->any())
        <div class="bg-red-100 text-red-800 p-4 mb-4 rounded">
            <ul>
                @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
        @endif

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <form action="{{ route('students.update', $student->id) }}" method="POST">
                @csrf
                @method('PUT')

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">

                    <!-- First Name -->
                    <div class="mb-4">
                        <label for="first_name" class="block text-gray-700 font-bold mb-2">First Name</label>
                        <input type="text" id="first_name" name="first_name"
                            value="{{ old('first_name', $student->first_name) }}"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            required>
                    </div>

                    <!-- Last Name -->
                    <div class="mb-4">
                        <label for="last_name" class="block text-gray-700 font-bold mb-2">Last Name</label>
                        <input type="text" id="last_name" name="last_name"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('last_name', $student->last_name) }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Email -->
                    <div class="mb-4">
                        <label for="email" class="block text-gray-700 font-bold mb-2">Email</label>
                        <input type="email" id="email" name="email"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('email', $student->email) }}" required>
                    </div>

                    <!-- Phone Number -->
                    <div class="mb-4">
                        <label for="phone_number" class="block text-gray-700 font-bold mb-2">Phone Number</label>
                        <input type="text" id="phone_number" name="phone_number"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('phone_number', $student->phone_number) }}" required>
                    </div>
                </div>

                <!-- Date of birth -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="mb-6">
                        <label for="dob" class="block text-gray-700 font-bold mb-2">Date of Birth</label>
                        <input type="text" name="dob" id="dob"
                            value="{{ old('dob', \Carbon\Carbon::parse($student->dob)->format('Y-m-d')) }}"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            required>
                    </div>

                    <!-- Address -->
                    <div class="mb-4">
                        <label for="address" class="block text-gray-700 font-bold mb-2">Address</label>
                        <input type="text" id="address" name="address"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('address', $student->address) }}" required>
                    </div>

                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- City -->
                    <div class="mb-4">
                        <label for="city" class="block text-gray-700 font-bold mb-2">City</label>
                        <input type="text" id="city" name="city"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('city', $student->city) }}" required>
                    </div>

                    <!-- State -->
                    <div class="mb-4">
                        <label for="state" class="block text-gray-700 font-bold mb-2">State</label>
                        <input type="text" id="state" name="state"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('state', $student->state) }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">

                    <!-- Country -->
                    <div class="mb-4">
                        <label for="country" class="block text-gray-700 font-bold mb-2">Country</label>
                        <select name="country" id="country"
                            class="form-control shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            required>
                            @foreach($countries as $country)
                            <option value="{{ $country['name'] }}" {{ old('country', $student->country) ==
                                $country['name'] ? 'selected' : '' }}>
                                {{ $country['name'] }}
                            </option>
                            @endforeach
                        </select>
                    </div>

                    <!-- Post Code -->
                    <div class="mb-4">
                        <label for="post_code" class="block text-gray-700 font-bold mb-2">Post Code</label>
                        <input type="text" id="post_code" name="post_code"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('post_code', $student->post_code) }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Website -->
                    <div class="mb-4">
                        <label for="website" class="block text-gray-700 font-bold mb-2">Website</label>
                        <input type="text" id="website" name="website"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('website', $student->website) }}">
                    </div>

                    <!-- Extra ID ... like passport number, driver's licence, social insurance number, etc. -->
                    <div class="mb-4">
                        <label for="ident" class="block text-gray-700 font-bold mb-2">Extra ID</label>
                        <input type="text" id="ident" name="ident"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('ident', $student->ident) }}">
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Next of kin ... who to contact in case of emergencies -->
                    <div class="mb-4">
                        <label for="next_of_kin" class="block text-gray-700 font-bold mb-2">Next of Kin</label>
                        <input type="text" id="next_of_kin" name="next_of_kin"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('next_of_kin', $student->next_of_kin) }}">
                    </div>

                    <!-- Allergies -->
                    <div class="mb-4">
                        <label for="allergies" class="block text-gray-700 font-bold mb-2">Allergies</label>
                        <input type="text" id="allergies" name="allergies"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                            value="{{ old('allergies', $student->allergies) }}">
                    </div>
                </div>

                <!-- Special Needs -->
                <div class="mb-4">
                    <label for="special_needs" class="block text-gray-700 font-bold mb-2">Special Needs</label>
                    <input type="text" id="special_needs" name="special_needs"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline"
                        value="{{ old('special_needs', $student->special_needs) }}">
                </div>

                <!-- Submit Button -->
                <div>
                    <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                        Update Student
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Include Pikaday CSS and JS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/pikaday/css/pikaday.css">
    <script src="https://cdn.jsdelivr.net/npm/pikaday/pikaday.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
                var currentYear = new Date().getFullYear();
                var minBirthYear = currentYear - 100; // Assuming a maximum age of 100 years
                var maxBirthYear = currentYear - 18;  // Assuming a minimum age of 18 years

                var picker = new Pikaday({
                    field: document.getElementById('dob'),
                    format: 'YYYY-MM-DD',
                    yearRange: [minBirthYear, maxBirthYear],
                    maxDate: new Date(maxBirthYear, 11, 31),
                    minDate: new Date(minBirthYear, 0, 1),
                    defaultDate: new Date(maxBirthYear, 0, 1),
                    showYearDropdown: true,
                    showMonthDropdown: true,
                    // Allow the field to be cleared
                    setDefaultDate: false,
                    toString(date, format) {
                        // Set the time to noon in local time
                        date.setHours(12, 0, 0, 0);
                        return date.toISOString().split('T')[0];
                    },
                    parse(dateString, format) {
                        const parts = dateString.split('-');
                        return dateString ? new Date(parts[0], parts[1] - 1, parts[2]) : null;
                    },
                    onSelect: function(date) {
                        date.setHours(12, 0, 0, 0);
                        this._field.value = date.toISOString().split('T')[0];
                    },
                });
            });
    </script>

</x-layout>
॥๛॥
/ATB_Fresh/resources\views\students\index.blade.php
॥๛॥
@props(['direction' => 'asc'])

<x-layout>
    <x-slot:heading>
        ATB Students
    </x-slot:heading>

    <div class="container mx-auto p-4">

        <!-- Flash Message Section -->
        @if(session('success'))
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4" role="alert">
            {{ session('success') }}
        </div>
        @endif

        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold mb-0">Students List</h1>
            <a href="{{ route('students.create') }}"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Create New Student
            </a>
        </div>

        @if($students->isEmpty())
        <h1>No students available.</h1>
        @else
        <table class="min-w-full table-auto border-collapse border border-gray-500">
            <thead class="bg-gray-200">
                <tr>
                    <th class="border border-gray-500 px-4 py-2 text-left">
                        <a href="{{ route('students.index', ['sort_by' => 'first_name', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                            class="text-blue-500 hover:underline">First Name</a>
                    </th>
                    <th class="border border-gray-500 px-4 py-2 text-left">
                        <a href="{{ route('students.index', ['sort_by' => 'last_name', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                            class="text-blue-500 hover:underline">Last Name</a>
                    </th>
                    <th class="border border-gray-500 px-4 py-2 text-left">
                        <a href="{{ route('students.index', ['sort_by' => 'email', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                            class="text-blue-500 hover:underline">Email</a>
                    </th>
                    <th class="border border-gray-500 px-4 py-2 text-left">
                        <a href="{{ route('students.index', ['sort_by' => 'phone_number', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                            class="text-blue-500 hover:underline">Phone Number</a>
                    </th>
                    <th class="border border-gray-500 px-4 py-2 text-left">
                        <a href="{{ route('students.index', ['sort_by' => 'city', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                            class="text-blue-500 hover:underline">City</a>
                    </th>
                </tr>
            </thead>
            <tbody class="bg-white">
                @foreach($students as $student)
                <tr data-student-id="{{ $student->id }}"
                    onclick="window.location='{{ route('students.show', $student->id) }}'"
                    class="hover:bg-cyan-100 hover:underline cursor-pointer">
                    <!-- Action column with sticky left positioning -->
                    {{-- <td class="border px-4 py-2 sticky left-0 bg-white z-10">
                        <a href="{{ route('students.show', $student->id) }}" class="text-blue-600 hover:underline">
                            View
                        </a>
                    </td> --}}
                    <td class="border border-gray-500 px-4 py-2">{{ $student->first_name }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $student->last_name }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $student->email }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $student->phone_number }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $student->city }}</td>
                </tr>
                <script>
                    console.log('Rendered student row with ID: {{ $student->id }}');
                </script>
                @endforeach
            </tbody>
        </table>
        @endif

        <div class="mt-4">
            {{ $students->appends(request()->input())->links() }}
            <!-- Pagination with query strings -->
        </div>
    </div>

    <script>
        // Ensure DOM is fully loaded
document.addEventListener('DOMContentLoaded', function() {
    // Get the highlight parameter from the query string
    const urlParams = new URLSearchParams(window.location.search);
    const highlightId = urlParams.get('highlight');

    if (highlightId) {
        // Find the row that matches the student ID
        const row = document.querySelector(`tr[data-student-id="${highlightId}"]`);
        if (row) {
            // Add a highlight class to the row
            row.classList.add('bg-yellow-500');

            // Scroll the row into view smoothly after a small delay to ensure full rendering
            setTimeout(() => {
                row.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 500);

            // Remove the highlight when the user clicks anywhere on the page
            document.addEventListener('click', function() {
                row.classList.remove('bg-yellow-500');
            }, { once: true });
        }
    }
});
    </script>

</x-layout>

॥๛॥
/ATB_Fresh/resources\views\students\show.blade.php
॥๛॥
<x-layout>

    <x-slot:heading>
        Student Details
    </x-slot:heading>

    <div class="container mx-auto p-4">

        <!-- Flash Message Section -->
        @if(session('success'))
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4" role="alert">
            {{ session('success') }}
        </div>
        @endif

        <!-- Flex container for student name and delete button -->
        <div class="flex justify-between items-center mb-4">

            <!-- student Name -->
            <h1 class="text-3xl font-bold mb-4">{{ $student->first_name }} {{ $student->last_name }}</h1>

            <!-- Delete Button ... will only show if there are no events for this student -->
            @if($student->registrations->isEmpty())
            <form action="{{ route('students.destroy', $student->id) }}" method="POST" class="top-0 right-0">
                @csrf
                @method('DELETE')
                <button type="submit" class="bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700"
                    onclick="return confirm('Are you sure you want to delete this student?');">
                    Delete Student
                </button>
            </form>
            @endif

            <a href="{{ route('students.edit', $student->id) }}"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">
                Edit Student
            </a>
        </div>

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- First Name -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">First Name</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->first_name }}
                    </p>
                </div>

                <!-- Last Name -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Last Name</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->last_name }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Email -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Email</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->email }}
                    </p>
                </div>

                <!-- Phone Number -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Phone Number</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->phone_number ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Date of Birth -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Date of Birth</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ \Carbon\Carbon::parse($student->dob)->format('Y-m-d') ?? 'N/A' }}
                    </p>
                </div>

                <!-- Address -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Address</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->address ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- City -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">City</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->city ?? 'N/A' }}
                    </p>
                </div>

                <!-- State -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">State</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->state ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Country -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Country</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->country ?? 'N/A' }}
                    </p>
                </div>

                <!-- Post Code -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Post Code</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->post_code ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Website -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Website</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->website ?? 'N/A' }}
                    </p>
                </div>

                <!-- Extra ID ... like passport number, driver's licence, social insurance number, etc. -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Extra ID</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->ident ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Next of kin ... who to contact in case of emergencies -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Next of Kin</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->next_of_kin ?? 'N/A' }}
                    </p>
                </div>

                <!-- Allergies -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Allergies</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $student->allergies ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <!-- Special Needs -->
            <div class="mb-4">
                <label class="block text-gray-700 font-bold mb-2">Special Needs</label>
                <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                    {{ $student->special_needs ?? 'N/A' }}
                </p>
            </div>

        </div>

        @if($student->registrations->isNotEmpty())
        <div class="mb-6 mt-10">
            <h2 class="text-2xl text-blue-700 font-semibold">Past and Future Courses</h2></br>

            <table class="min-w-full table-auto border-collapse border border-gray-500">
                <thead class="bg-gray-200 border border-gray-500 px-4 py-2 text-left">
                    <tr>
                        <th class="border border-gray-500 px-4 py-2">Course Title</th>
                        <th class="border border-gray-500 px-4 py-2">Event Title</th>
                        <th class="border border-gray-500 px-4 py-2">Start Date</th>
                        <th class="border border-gray-500 px-4 py-2">End Date</th>
                        <th class="border border-gray-500 px-4 py-2">Facilitator</th>
                        <th class="border border-gray-500 px-4 py-2">Registration Status</th>
                    </tr>
                </thead>
                <tbody class="bg-gray-50">
                    @foreach($student->registrations as $registration)
                    <tr class="hover:bg-sky-100 border-gray-500 registration-row">
                        <td class="border border-gray-500 px-4 py-2">{{ $registration->event->course->course_title }}
                        </td>
                        <td class="border border-gray-500 px-4 py-2">{{ $registration->event->title }}</td>
                        <td class="border border-gray-500 px-4 py-2">{{ $registration->event->datefrom }}</td>
                        <td class="border border-gray-500 px-4 py-2">{{ $registration->event->dateto }}</td>
                        <td class="border border-gray-500 px-4 py-2">
                            {{ $registration->event->facilitator->first_name }} {{
                            $registration->event->facilitator->last_name }}
                        </td>
                        <td class="border border-gray-500 px-4 py-2">{{ $registration->end_status }}</td>
                    </tr>
                    @endforeach
                </tbody>
            </table>

            @else
            <p>No registrations found for this student.</p>
            @endif

            <!-- Back to students list -->
            <div class="mt-4">
                <a href="{{ route('students.index') }}" class="text-blue-600 hover:underline">
                    ← Back to Students List
                </a>
            </div>
        </div>
    </div>

</x-layout>

॥๛॥
/ATB_Fresh/resources\views\venues\create.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Create New Venue
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Create New Venue</h1>

        <!-- Display validation errors, if any -->
        @if ($errors->any())
        <div class="bg-red-100 text-red-800 p-4 mb-4 rounded">
            <ul>
                @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
        @endif

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <form action="{{ route('venues.store') }}" method="POST">
                @csrf

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Venue Name -->
                    <div class="mb-4">
                        <label for="venue_name" class="block text-gray-700 font-bold mb-2">Venue Name</label>
                        <input type="text" id="venue_name" name="venue_name"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('venue_name') }}" required>
                    </div>

                    <!-- Address -->
                    <div class="mb-4">
                        <label for="address" class="block text-gray-700 font-bold mb-2">Address</label>
                        <input type="text" id="address" name="address"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('address') }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <!-- City -->
                    <div class="mb-4">
                        <label for="city" class="block text-gray-700 font-bold mb-2">City</label>
                        <input type="text" id="city" name="city"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('city') }}" required>
                    </div>

                    <!-- State -->
                    <div class="mb-4">
                        <label for="state" class="block text-gray-700 font-bold mb-2">State</label>
                        <input type="text" id="state" name="state"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('state') }}" required>
                    </div>

                    <!-- Post Code -->
                    <div class="mb-4">
                        <label for="postcode" class="block text-gray-700 font-bold mb-2">Post Code</label>
                        <input type="text" id="postcode" name="postcode"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('postcode') }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Country -->
                    <div class="mb-4">
                        <label for="country" class="block text-gray-700 font-bold mb-2">Country</label>
                        <select name="country" id="country"
                            class="form-control shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            required>
                            <option value="">Select a country</option>
                            @foreach($countries as $country)
                            <option value="{{ $country['name'] }}" {{ old('country')==$country['name'] ? 'selected' : ''
                                }}>
                                {{ $country['name'] }}
                            </option>
                            @endforeach
                        </select>
                    </div>

                    <!-- Location Geocode -->
                    <div class="mb-4">
                        <label for="location_geocode" class="block text-gray-700 font-bold mb-2">Location
                            Geocode</label>
                        <input type="text" id="location_geocode" name="location_geocode"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('location_geocode') }}">
                    </div>
                </div>

                <!-- Remarks -->
                <div class="mb-4">
                    <label for="remarks" class="block text-gray-700 font-bold mb-2">Remarks</label>
                    <textarea id="remarks" name="remarks"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200 h-24">{{ old('remarks') }}</textarea>
                </div>

                <!-- Submit Button -->
                <div class="flex items-center justify-between">
                    <button type="submit"
                        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                        Create Venue
                    </button>
                    <a href="{{ route('venues.index') }}" class="text-blue-600 hover:underline">Cancel</a>
                </div>
            </form>
        </div>
    </div>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\venues\edit.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Edit Venue
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Edit Venue</h1>

        <!-- Display validation errors, if any -->
        @if ($errors->any())
        <div class="bg-red-100 text-red-800 p-4 mb-4 rounded">
            <ul>
                @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
        @endif

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <form action="{{ route('venues.update', $venue->id) }}" method="POST">
                @csrf
                @method('PUT')

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Venue Name -->
                    <div class="mb-4">
                        <label for="venue_name" class="block text-gray-700 font-bold mb-2">Venue Name</label>
                        <input type="text" id="venue_name" name="venue_name"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('venue_name', $venue->venue_name) }}" required>
                    </div>

                    <!-- Address -->
                    <div class="mb-4">
                        <label for="address" class="block text-gray-700 font-bold mb-2">Address</label>
                        <input type="text" id="address" name="address"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('address', $venue->address) }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <!-- City -->
                    <div class="mb-4">
                        <label for="city" class="block text-gray-700 font-bold mb-2">City</label>
                        <input type="text" id="city" name="city"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('city', $venue->city) }}" required>
                    </div>

                    <!-- State -->
                    <div class="mb-4">
                        <label for="state" class="block text-gray-700 font-bold mb-2">State</label>
                        <input type="text" id="state" name="state"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('state', $venue->state) }}" required>
                    </div>

                    <!-- Post Code -->
                    <div class="mb-4">
                        <label for="postcode" class="block text-gray-700 font-bold mb-2">Post Code</label>
                        <input type="text" id="postcode" name="postcode"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('postcode', $venue->postcode) }}" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Country -->
                    <div class="mb-4">
                        <label for="country" class="block text-gray-700 font-bold mb-2">Country</label>
                        <select name="country" id="country"
                            class="form-control shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            required>
                            <option value="">Select a country</option>
                            @foreach($countries as $country)
                            <option value="{{ $country['name'] }}" {{ old('country', $venue->country) ==
                                $country['name'] ? 'selected' : '' }}>
                                {{ $country['name'] }}
                            </option>
                            @endforeach
                        </select>
                    </div>

                    <!-- Location Geocode -->
                    <div class="mb-4">
                        <label for="location_geocode" class="block text-gray-700 font-bold mb-2">Location
                            Geocode</label>
                        <input type="text" id="location_geocode" name="location_geocode"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200"
                            value="{{ old('location_geocode', $venue->location_geocode) }}">
                    </div>
                </div>

                <!-- Remarks -->
                <div class="mb-4">
                    <label for="remarks" class="block text-gray-700 font-bold mb-2">Remarks</label>
                    <textarea id="remarks" name="remarks"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200 h-24">{{ old('remarks', $venue->remarks) }}</textarea>
                </div>

                <!-- Submit Button -->
                <div class="flex items-center justify-between">
                    <button type="submit"
                        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                        Update Venue
                    </button>
                    <a href="{{ route('venues.show', $venue->id) }}" class="text-blue-600 hover:underline">Cancel</a>
                </div>
            </form>
        </div>
    </div>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\venues\index.blade.php
॥๛॥
@props(['direction' => 'asc'])

<x-layout>
    <x-slot:heading>
        ATB Venues
    </x-slot:heading>

    <div class="container overflow-x-auto mx-auto p-6">

        <!-- Flash Message Section -->
        @if(session('success'))
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4" role="alert">
            {{ session('success') }}
        </div>
        @endif

        @if(session('error'))
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
            {{ session('error') }}
        </div>
        @endif

        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold mb-0 mt-1">Venues List</h1>
            <a href="{{ route('venues.create') }}"
                class="mb-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Create New Venue
            </a>
        </div>

        @if($venues->isEmpty())
        <h1>No venues available.</h1>
        @else
        <!-- Display venues in a table -->
        <table class="min-w-full table-auto border-collapse border border-gray-500">
            <thead class="bg-gray-200">
                <tr>
                    <th class="border border-gray-500 px-4 py-2 sticky left-0 text-blue-500 z-10">
                        Actions
                    </th>
                    <th class="border border-gray-500 px-4 py-2 text-left">
                        <a href="{{ route('venues.index', ['sort_by' => 'id', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                            class="text-blue-500 hover:underline">ID
                            @if ($sort_by === 'id')
                            <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                            @endif
                        </a>
                    </th>
                    <th class="border border-gray-500 px-4 py-2 text-left">
                        <a href="{{ route('venues.index', ['sort_by' => 'venue_name', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                            class="text-blue-500 hover:underline">Venue Name
                            @if ($sort_by === 'venue_name')
                            <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                            @endif
                        </a>
                    </th>
                    <th class="border border-gray-500 px-4 py-2 text-left">
                        <a href="{{ route('venues.index', ['sort_by' => 'city', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                            class="text-blue-500 hover:underline">City
                            @if ($sort_by === 'city')
                            <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                            @endif
                        </a>
                    </th>
                    <th class="border border-gray-500 px-4 py-2 text-left">
                        <a href="{{ route('venues.index', ['sort_by' => 'country', 'direction' => $direction === 'asc' ? 'desc' : 'asc']) }}"
                            class="text-blue-500 hover:underline">Country
                            @if ($sort_by === 'country')
                            <span>{{ $direction === 'asc' ? '↑' : '↓' }}</span>
                            @endif
                        </a>
                    </th>
                    <th class="border border-gray-500 px-4 py-2 text-left">Address</th>
                </tr>
            </thead>
            <tbody class="bg-gray-50">
                @foreach($venues as $venue)
                <tr class="hover:bg-sky-100">
                    <td class="text-center border border-gray-500 px-4 py-2 sticky left-0 z-10 bg-gray-50">
                        <div class="flex gap-2 justify-center">
                            <a href="{{ route('venues.show', $venue->id) }}" class="text-blue-600 hover:underline">
                                View
                            </a>
                            {{-- @if($venue->events->isEmpty())
                            <form action="{{ route('venues.destroy', $venue->id) }}" method="POST" class="inline">
                                @csrf
                                @method('DELETE')
                                <button type="submit" class="text-red-600 hover:underline"
                                    onclick="return confirm('Are you sure you want to delete this venue?')">
                                    Delete
                                </button>
                            </form>
                            @endif --}}
                        </div>
                    </td>
                    <td class="border border-gray-500 px-4 py-2">{{ $venue->id }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $venue->venue_name }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $venue->city }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $venue->country }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $venue->address }}</td>
                </tr>
                @endforeach
            </tbody>
        </table>
        @endif

        <div class="mt-4">
            {{ $venues->appends(request()->input())->links() }}
        </div>
    </div>
</x-layout>
॥๛॥
/ATB_Fresh/resources\views\venues\show.blade.php
॥๛॥
<x-layout>
    <x-slot:heading>
        Venue Details
    </x-slot:heading>

    <div class="container mx-auto p-4">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold">{{ $venue->venue_name }}</h1>
            @if($venue->events->isEmpty())
            <form action="{{ route('venues.destroy', $venue->id) }}" method="POST" class="inline">
                @csrf
                @method('DELETE')
                <button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
                    onclick="return confirm('Are you sure you want to delete this venue?');">
                    Delete Venue
                </button>
            </form>
            @endif
            <a href="{{ route('venues.edit', $venue->id) }}"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Edit Venue
            </a>
        </div>

        <div class="bg-slate-400 shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <!-- Venue Name -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Venue Name</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $venue->venue_name }}
                    </p>
                </div>

                <!-- City -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">City</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $venue->city }}
                    </p>
                </div>

                <!-- State -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">State</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $venue->state }}
                    </p>
                </div>

                <!-- Country -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Country</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $venue->country }}
                    </p>
                </div>

                <!-- Postcode -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Postcode</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $venue->postcode }}
                    </p>
                </div>

                <!-- Location Geocode -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Location Geocode</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $venue->location_geocode ?? 'N/A' }}
                    </p>
                </div>
            </div>

            <div class="grid grid-cols-1 gap-4">
                <!-- Address -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Address</label>
                    <p class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200">
                        {{ $venue->address }}
                    </p>
                </div>

                <!-- Remarks -->
                <div class="mb-4">
                    <label class="block text-gray-700 font-bold mb-2">Remarks</label>
                    <p
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-slate-800 bg-gray-200 h-24 overflow-y-auto">
                        {{ $venue->remarks ?? 'No remarks' }}
                    </p>
                </div>
            </div>
        </div>

        @if($venue->events->isNotEmpty())
        <h2 class="text-2xl font-bold mb-5 mt-5">Events at this Venue</h2>
        <table class="min-w-full table-auto border-collapse border border-gray-500">
            <thead class="bg-gray-200">
                <tr>
                    <th class="border border-gray-500 px-4 py-2">Event Title</th>
                    <th class="border border-gray-500 px-4 py-2">Course</th>
                    <th class="border border-gray-500 px-4 py-2">Start Date</th>
                    <th class="border border-gray-500 px-4 py-2">End Date</th>
                    <th class="border border-gray-500 px-4 py-2">Facilitator</th>
                </tr>
            </thead>
            <tbody class="bg-gray-50">
                @foreach($venue->events as $event)
                <tr class="hover:bg-sky-100">
                    <td class="border border-gray-500 px-4 py-2">{{ $event->title }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $event->course->course_title }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $event->datefrom }}</td>
                    <td class="border border-gray-500 px-4 py-2">{{ $event->dateto }}</td>
                    <td class="border border-gray-500 px-4 py-2">
                        {{ $event->facilitator->first_name }} {{ $event->facilitator->last_name }}
                    </td>
                </tr>
                @endforeach
            </tbody>
        </table>
        @else
        <p class="text-lg text-gray-600">No events have been scheduled at this venue yet.</p>
        @endif

        <div class="mt-6">
            <a href="{{ route('venues.index') }}" class="text-blue-600 hover:underline">← Back to Venues List</a>
        </div>
    </div>
</x-layout>
॥๛॥
/ATB_Fresh/routes\auth.php
॥๛॥
<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\ConfirmablePasswordController;
use App\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Http\Controllers\Auth\EmailVerificationPromptController;
use App\Http\Controllers\Auth\NewPasswordController;
use App\Http\Controllers\Auth\PasswordController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    Route::get('register', [RegisteredUserController::class, 'create'])
        ->name('register');

    Route::post('register', [RegisteredUserController::class, 'store']);

    Route::get('login', [AuthenticatedSessionController::class, 'create'])
        ->name('login');

    Route::post('login', [AuthenticatedSessionController::class, 'store']);

    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])
        ->name('password.request');

    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])
        ->name('password.email');

    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])
        ->name('password.reset');

    Route::post('reset-password', [NewPasswordController::class, 'store'])
        ->name('password.store');
});

Route::middleware('auth')->group(function () {
    Route::get('verify-email', EmailVerificationPromptController::class)
        ->name('verification.notice');

    Route::get('verify-email/{id}/{hash}', VerifyEmailController::class)
        ->middleware(['signed', 'throttle:6,1'])
        ->name('verification.verify');

    Route::post('email/verification-notification', [EmailVerificationNotificationController::class, 'store'])
        ->middleware('throttle:6,1')
        ->name('verification.send');

    Route::get('confirm-password', [ConfirmablePasswordController::class, 'show'])
        ->name('password.confirm');

    Route::post('confirm-password', [ConfirmablePasswordController::class, 'store']);

    Route::put('password', [PasswordController::class, 'update'])->name('password.update');

    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
        ->name('logout');
});

॥๛॥
/ATB_Fresh/routes\console.php
॥๛॥
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Schedule;

Schedule::command('telescope:prune')->daily();

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote')->hourly();

॥๛॥
/ATB_Fresh/routes\web.php
॥๛॥
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\StudentController;
use App\Http\Controllers\RegistrationController;
use App\Http\Controllers\CourseController;
use App\Http\Controllers\EventController;
use App\Http\Controllers\FacilitatorController;
use App\Http\Controllers\VenueController;
use App\Models\Job;


// // Public routes
// Route::get('/contact', function () {
//     return view('contact');
// });

// Route::get('/jobs', function () {
//     return view('jobs', [
//         'jobs' => Job::all()
//     ]);
// });

// Route::get('/jobs/{id}', function ($id) {
//     $job = Job::find($id);
//     return view('job', [
//         'job' => $job
//     ]);
// });

// Breeze Authentication Routes
require __DIR__ . '/auth.php';




// Protected routes (require authentication)
Route::middleware(['auth'])->group(function () {

    // Home route (protected)
    Route::get('/', function () {
        return view('home', ['greeting' => 'It\'s another really beautiful day!']);
    });

    // Dashboard and Profile routes
    Route::get('/dashboard', function () {
        return view('dashboard');
    })->name('dashboard');

    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');

    // Course routes (all protected)
    Route::get('/courses', [CourseController::class, 'index'])->name('courses.index');
    Route::get('/courses/create', [CourseController::class, 'create'])->name('courses.create');
    Route::post('/courses', [CourseController::class, 'store'])->name('courses.store');
    Route::get('/courses/{id}', [CourseController::class, 'show'])->name('courses.show');
    Route::get('/courses/{id}/edit', [CourseController::class, 'edit'])->name('courses.edit');
    Route::put('/courses/{id}', [CourseController::class, 'update'])->name('courses.update');
    Route::delete('/courses/{id}', [CourseController::class, 'destroy'])->name('courses.destroy');

    // Facilitator routes (all protected)
    Route::get('/facilitators', [FacilitatorController::class, 'index'])->name('facilitators.index');
    Route::get('/facilitators/create', [FacilitatorController::class, 'create'])->name('facilitators.create');
    Route::post('/facilitators', [FacilitatorController::class, 'store'])->name('facilitators.store');
    Route::get('/facilitators/{id}', [FacilitatorController::class, 'show'])->name('facilitators.show');
    Route::get('/facilitators/{facilitator}/edit', [FacilitatorController::class, 'edit'])->name('facilitators.edit');
    Route::put('/facilitators/{facilitator}', [FacilitatorController::class, 'update'])->name('facilitators.update');
    Route::delete('/facilitators/{id}', [FacilitatorController::class, 'destroy'])->name('facilitators.destroy');

    // Student routes (all protected)
    Route::get('/students', [StudentController::class, 'index'])->name('students.index');
    Route::get('/students/create', [StudentController::class, 'create'])->name('students.create');
    Route::post('/students', [StudentController::class, 'store'])->name('students.store');
    Route::get('/students/{student}/edit', [StudentController::class, 'edit'])->name('students.edit');
    Route::get('/students/{id}', [StudentController::class, 'show'])->name('students.show');
    Route::put('/students/{student}', [StudentController::class, 'update'])->name('students.update');
    Route::delete('/students/{id}', [StudentController::class, 'destroy'])->name('students.destroy');

    // Event routes (all protected)
    Route::get('/events', [EventController::class, 'index'])->name('events.index');
    Route::get('/events/create', [EventController::class, 'create'])->name('events.create');
    Route::get('/events/{id}', [EventController::class, 'show'])->name('events.show');
    Route::get('/events/{event}/edit', [EventController::class, 'edit'])->name('events.edit');
    Route::put('/events/{event}', [EventController::class, 'update'])->name('events.update');
    Route::post('/events', [EventController::class, 'store'])->name('events.store');

    // Venue routes (all protected)
    Route::get('/venues', [VenueController::class, 'index'])->name('venues.index');
    Route::get('/venues/create', [VenueController::class, 'create'])->name('venues.create');
    Route::post('/venues', [VenueController::class, 'store'])->name('venues.store');
    Route::get('/venues/{id}', [VenueController::class, 'show'])->name('venues.show');
    Route::get('/venues/{venue}/edit', [VenueController::class, 'edit'])->name('venues.edit');
    Route::put('/venues/{venue}', [VenueController::class, 'update'])->name('venues.update');
    Route::delete('/venues/{id}', [VenueController::class, 'destroy'])->name('venues.destroy');

    // Registration routes (all protected)
    Route::get('/registrations', [RegistrationController::class, 'index'])->name('registrations.index');
    Route::get('/registrations/{registration}', [RegistrationController::class, 'show'])->name('registrations.show');
    Route::get('/registrations/create/{event}', [RegistrationController::class, 'create'])->name('registrations.create');
    Route::post('/registrations', [RegistrationController::class, 'store'])->name('registrations.store');
});

॥๛॥



